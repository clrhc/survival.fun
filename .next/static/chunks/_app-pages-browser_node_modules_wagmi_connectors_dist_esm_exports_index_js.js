"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_wagmi_connectors_dist_esm_exports_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coinbaseWallet: () => (/* binding */ coinbaseWallet)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\ncoinbaseWallet.type = 'coinbaseWallet';\nfunction coinbaseWallet(parameters = {}) {\n    if (parameters.version === '3' || parameters.headlessMode)\n        return version3(parameters);\n    return version4(parameters);\n}\nfunction version4(parameters) {\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        rdns: 'com.coinbase.wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId, ...rest } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                    params: 'instantOnboarding' in rest && rest.instantOnboarding\n                        ? [{ onboarding: 'instant' }]\n                        : [],\n                })).map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(error.message))\n                    throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close?.();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = (await provider.request({\n                method: 'eth_chainId',\n            }));\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                const preference = (() => {\n                    if (typeof parameters.preference === 'string')\n                        return { options: parameters.preference };\n                    return {\n                        ...parameters.preference,\n                        options: parameters.preference?.options ?? 'all',\n                    };\n                })();\n                const { createCoinbaseWalletSDK } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_coinbase_wallet-sdk_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @coinbase/wallet-sdk */ \"(app-pages-browser)/./node_modules/@coinbase/wallet-sdk/dist/index.js\"));\n                const sdk = createCoinbaseWalletSDK({\n                    ...parameters,\n                    appChainIds: config.chains.map((x) => x.id),\n                    preference,\n                });\n                walletProvider = sdk.getProvider();\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new _wagmi_core__WEBPACK_IMPORTED_MODULE_3__.ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: (0,viem__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: (0,viem__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                    }\n                }\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\nfunction version3(parameters) {\n    const reloadOnDisconnect = false;\n    let sdk;\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        rdns: 'com.coinbase.wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                })).map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message))\n                    throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = await provider.request({\n                method: 'eth_chainId',\n            });\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const CoinbaseWalletSDK = await (async () => {\n                    const { default: SDK } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_cbw-sdk_dist_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! cbw-sdk */ \"(app-pages-browser)/./node_modules/cbw-sdk/dist/index.js\", 19));\n                    if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n                        return SDK.default;\n                    return SDK;\n                })();\n                sdk = new CoinbaseWalletSDK({ ...parameters, reloadOnDisconnect });\n                // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n                const walletExtensionChainId = sdk.walletExtension?.getChainId();\n                const chain = config.chains.find((chain) => parameters.chainId\n                    ? chain.id === parameters.chainId\n                    : chain.id === walletExtensionChainId) || config.chains[0];\n                const chainId = parameters.chainId || chain?.id;\n                const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];\n                walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new _wagmi_core__WEBPACK_IMPORTED_MODULE_3__.ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: (0,viem__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: (0,viem__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                    }\n                }\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\n//# sourceMappingURL=coinbaseWallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/exports/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/exports/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coinbaseWallet: () => (/* reexport safe */ _coinbaseWallet_js__WEBPACK_IMPORTED_MODULE_2__.coinbaseWallet),\n/* harmony export */   injected: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_0__.injected),\n/* harmony export */   metaMask: () => (/* reexport safe */ _metaMask_js__WEBPACK_IMPORTED_MODULE_3__.metaMask),\n/* harmony export */   mock: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.mock),\n/* harmony export */   safe: () => (/* reexport safe */ _safe_js__WEBPACK_IMPORTED_MODULE_4__.safe),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_6__.version),\n/* harmony export */   walletConnect: () => (/* reexport safe */ _walletConnect_js__WEBPACK_IMPORTED_MODULE_5__.walletConnect)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/injected.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/mock.js\");\n/* harmony import */ var _coinbaseWallet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../coinbaseWallet.js */ \"(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js\");\n/* harmony import */ var _metaMask_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metaMask.js */ \"(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/metaMask.js\");\n/* harmony import */ var _safe_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../safe.js */ \"(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/safe.js\");\n/* harmony import */ var _walletConnect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../walletConnect.js */ \"(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/walletConnect.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../version.js */ \"(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/version.js\");\n// biome-ignore lint/performance/noBarrelFile: entrypoint module\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2VzbS9leHBvcnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDOEM7QUFDUztBQUNiO0FBQ1I7QUFDbUI7QUFDYjtBQUN4QyIsInNvdXJjZXMiOlsiRjpcXHdlYlxcU3Vydml2YWxDRFBcXHN1cnZpdmFsLmZ1blxcbm9kZV9tb2R1bGVzXFxAd2FnbWlcXGNvbm5lY3RvcnNcXGRpc3RcXGVzbVxcZXhwb3J0c1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYmlvbWUtaWdub3JlIGxpbnQvcGVyZm9ybWFuY2Uvbm9CYXJyZWxGaWxlOiBlbnRyeXBvaW50IG1vZHVsZVxuZXhwb3J0IHsgaW5qZWN0ZWQsIG1vY2ssIH0gZnJvbSAnQHdhZ21pL2NvcmUnO1xuZXhwb3J0IHsgY29pbmJhc2VXYWxsZXQsIH0gZnJvbSAnLi4vY29pbmJhc2VXYWxsZXQuanMnO1xuZXhwb3J0IHsgbWV0YU1hc2sgfSBmcm9tICcuLi9tZXRhTWFzay5qcyc7XG5leHBvcnQgeyBzYWZlIH0gZnJvbSAnLi4vc2FmZS5qcyc7XG5leHBvcnQgeyB3YWxsZXRDb25uZWN0LCB9IGZyb20gJy4uL3dhbGxldENvbm5lY3QuanMnO1xuZXhwb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3ZlcnNpb24uanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/exports/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/metaMask.js":
/*!*************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/metaMask.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   metaMask: () => (/* binding */ metaMask)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/utils/extractRpcUrls.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/connector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/promise/withRetry.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/promise/withTimeout.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/fromHex.js\");\n\n\nmetaMask.type = 'metaMask';\nfunction metaMask(parameters = {}) {\n    let sdk;\n    let provider;\n    let providerPromise;\n    let accountsChanged;\n    let chainChanged;\n    let connect;\n    let displayUri;\n    let disconnect;\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'metaMaskSDK',\n        name: 'MetaMask',\n        rdns: ['io.metamask', 'io.metamask.mobile'],\n        type: metaMask.type,\n        async setup() {\n            const provider = await this.getProvider();\n            if (provider?.on) {\n                if (!connect) {\n                    connect = this.onConnect.bind(this);\n                    provider.on('connect', connect);\n                }\n                // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\n                // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n            }\n        },\n        async connect({ chainId, isReconnecting } = {}) {\n            const provider = await this.getProvider();\n            if (!displayUri) {\n                displayUri = this.onDisplayUri;\n                provider.on('display_uri', displayUri);\n            }\n            let accounts = [];\n            if (isReconnecting)\n                accounts = await this.getAccounts().catch(() => []);\n            try {\n                let signResponse;\n                let connectWithResponse;\n                if (!accounts?.length) {\n                    if (parameters.connectAndSign || parameters.connectWith) {\n                        if (parameters.connectAndSign)\n                            signResponse = await sdk.connectAndSign({\n                                msg: parameters.connectAndSign,\n                            });\n                        else if (parameters.connectWith)\n                            connectWithResponse = await sdk.connectWith({\n                                method: parameters.connectWith.method,\n                                params: parameters.connectWith.params,\n                            });\n                        accounts = await this.getAccounts();\n                    }\n                    else {\n                        const requestedAccounts = (await sdk.connect());\n                        accounts = requestedAccounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n                    }\n                }\n                // Switch to chain if provided\n                let currentChainId = (await this.getChainId());\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                if (displayUri) {\n                    provider.removeListener('display_uri', displayUri);\n                    displayUri = undefined;\n                }\n                if (signResponse)\n                    provider.emit('connectAndSign', {\n                        accounts,\n                        chainId: currentChainId,\n                        signResponse,\n                    });\n                else if (connectWithResponse)\n                    provider.emit('connectWith', {\n                        accounts,\n                        chainId: currentChainId,\n                        connectWithResponse,\n                    });\n                // Manage EIP-1193 event listeners\n                // https://eips.ethereum.org/EIPS/eip-1193#events\n                if (connect) {\n                    provider.removeListener('connect', connect);\n                    connect = undefined;\n                }\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (err) {\n                const error = err;\n                if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                    throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.ResourceUnavailableRpcError.code)\n                    throw new viem__WEBPACK_IMPORTED_MODULE_2__.ResourceUnavailableRpcError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            // Manage EIP-1193 event listeners\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            if (!connect) {\n                connect = this.onConnect.bind(this);\n                provider.on('connect', connect);\n            }\n            await sdk.terminate();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            const accounts = (await provider.request({\n                method: 'eth_accounts',\n            }));\n            return accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = provider.getChainId() ||\n                (await provider?.request({ method: 'eth_chainId' }));\n            return Number(chainId);\n        },\n        async getProvider() {\n            async function initProvider() {\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const MetaMaskSDK = await (async () => {\n                    const { default: SDK } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_metamask_sdk_dist_browser_es_metamask-sdk_js\").then(__webpack_require__.bind(__webpack_require__, /*! @metamask/sdk */ \"(app-pages-browser)/./node_modules/@metamask/sdk/dist/browser/es/metamask-sdk.js\"));\n                    if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n                        return SDK.default;\n                    return SDK;\n                })();\n                const readonlyRPCMap = {};\n                for (const chain of config.chains)\n                    readonlyRPCMap[(0,viem__WEBPACK_IMPORTED_MODULE_3__.numberToHex)(chain.id)] = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_4__.extractRpcUrls)({\n                        chain,\n                        transports: config.transports,\n                    })?.[0];\n                sdk = new MetaMaskSDK({\n                    _source: 'wagmi',\n                    forceDeleteProvider: false,\n                    forceInjectProvider: false,\n                    injectProvider: false,\n                    // Workaround cast since MetaMask SDK does not support `'exactOptionalPropertyTypes'`\n                    ...parameters,\n                    readonlyRPCMap,\n                    dappMetadata: {\n                        ...parameters.dappMetadata,\n                        // Test if name and url are set AND not empty\n                        name: parameters.dappMetadata?.name\n                            ? parameters.dappMetadata?.name\n                            : 'wagmi',\n                        url: parameters.dappMetadata?.url\n                            ? parameters.dappMetadata?.url\n                            : typeof window !== 'undefined'\n                                ? window.location.origin\n                                : 'https://wagmi.sh',\n                    },\n                    useDeeplink: parameters.useDeeplink ?? true,\n                });\n                const result = await sdk.init();\n                // On initial load, sometimes `sdk.getProvider` does not return provider.\n                // https://github.com/wevm/wagmi/issues/4367\n                // Use result of `init` call if available.\n                const provider = (() => {\n                    if (result?.activeProvider)\n                        return result.activeProvider;\n                    return sdk.getProvider();\n                })();\n                if (!provider)\n                    throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_5__.ProviderNotFoundError();\n                return provider;\n            }\n            if (!provider) {\n                if (!providerPromise)\n                    providerPromise = initProvider();\n                provider = await providerPromise;\n            }\n            return provider;\n        },\n        async isAuthorized() {\n            try {\n                // MetaMask mobile provider sometimes fails to immediately resolve\n                // JSON-RPC requests on page load\n                const timeout = 200;\n                const accounts = await (0,viem__WEBPACK_IMPORTED_MODULE_6__.withRetry)(() => (0,viem__WEBPACK_IMPORTED_MODULE_7__.withTimeout)(() => this.getAccounts(), { timeout }), {\n                    delay: timeout + 1,\n                    retryCount: 3,\n                });\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const provider = await this.getProvider();\n            const chain = config.chains.find((x) => x.id === chainId);\n            if (!chain)\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new _wagmi_core__WEBPACK_IMPORTED_MODULE_8__.ChainNotConfiguredError());\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: (0,viem__WEBPACK_IMPORTED_MODULE_3__.numberToHex)(chainId) }],\n                });\n                // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n                // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n                // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n                // this callback or an externally emitted `'chainChanged'` event.\n                // https://github.com/MetaMask/metamask-extension/issues/24247\n                await waitForChainIdToSync();\n                await sendAndWaitForChangeEvent(chainId);\n                return chain;\n            }\n            catch (err) {\n                const error = err;\n                if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                    throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                // Indicates chain is not added to provider\n                if (error.code === 4902 ||\n                    // Unwrapping for MetaMask Mobile\n                    // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n                    error\n                        ?.data?.originalError?.code === 4902) {\n                    try {\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [\n                                {\n                                    blockExplorerUrls: (() => {\n                                        const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n                                        if (addEthereumChainParameter?.blockExplorerUrls)\n                                            return addEthereumChainParameter.blockExplorerUrls;\n                                        if (blockExplorer)\n                                            return [\n                                                blockExplorer.url,\n                                                ...Object.values(blockExplorers).map((x) => x.url),\n                                            ];\n                                        return;\n                                    })(),\n                                    chainId: (0,viem__WEBPACK_IMPORTED_MODULE_3__.numberToHex)(chainId),\n                                    chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                                    iconUrls: addEthereumChainParameter?.iconUrls,\n                                    nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                        chain.nativeCurrency,\n                                    rpcUrls: (() => {\n                                        if (addEthereumChainParameter?.rpcUrls?.length)\n                                            return addEthereumChainParameter.rpcUrls;\n                                        return [chain.rpcUrls.default?.http[0] ?? ''];\n                                    })(),\n                                },\n                            ],\n                        });\n                        await waitForChainIdToSync();\n                        await sendAndWaitForChangeEvent(chainId);\n                        return chain;\n                    }\n                    catch (err) {\n                        const error = err;\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError.code)\n                            throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n                        throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n                    }\n                }\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n            }\n            async function waitForChainIdToSync() {\n                // On mobile, there is a race condition between the result of `'wallet_addEthereumChain'` and `'eth_chainId'`.\n                // To avoid this, we wait for `'eth_chainId'` to return the expected chain ID with a retry loop.\n                await (0,viem__WEBPACK_IMPORTED_MODULE_6__.withRetry)(async () => {\n                    const value = (0,viem__WEBPACK_IMPORTED_MODULE_9__.hexToNumber)(\n                    // `'eth_chainId'` is cached by the MetaMask SDK side to avoid unnecessary deeplinks\n                    (await provider.request({ method: 'eth_chainId' })));\n                    // `value` doesn't match expected `chainId`, throw to trigger retry\n                    if (value !== chainId)\n                        throw new Error('User rejected switch after adding network.');\n                    return value;\n                }, {\n                    delay: 50,\n                    retryCount: 20, // android device encryption is slower\n                });\n            }\n            async function sendAndWaitForChangeEvent(chainId) {\n                await new Promise((resolve) => {\n                    const listener = ((data) => {\n                        if ('chainId' in data && data.chainId === chainId) {\n                            config.emitter.off('change', listener);\n                            resolve();\n                        }\n                    });\n                    config.emitter.on('change', listener);\n                    config.emitter.emit('change', { chainId });\n                });\n            }\n        },\n        async onAccountsChanged(accounts) {\n            // Disconnect if there are no accounts\n            if (accounts.length === 0) {\n                // ... and using browser extension\n                if (sdk.isExtensionActive())\n                    this.onDisconnect();\n                // FIXME(upstream): Mobile app sometimes emits invalid `accountsChanged` event with empty accounts array\n                else\n                    return;\n            }\n            // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n            else if (config.emitter.listenerCount('connect')) {\n                const chainId = (await this.getChainId()).toString();\n                this.onConnect({ chainId });\n            }\n            // Regular change event\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onConnect(connectInfo) {\n            const accounts = await this.getAccounts();\n            if (accounts.length === 0)\n                return;\n            const chainId = Number(connectInfo.chainId);\n            config.emitter.emit('connect', { accounts, chainId });\n            const provider = await this.getProvider();\n            if (connect) {\n                provider.removeListener('connect', connect);\n                connect = undefined;\n            }\n            if (!accountsChanged) {\n                accountsChanged = this.onAccountsChanged.bind(this);\n                provider.on('accountsChanged', accountsChanged);\n            }\n            if (!chainChanged) {\n                chainChanged = this.onChainChanged.bind(this);\n                provider.on('chainChanged', chainChanged);\n            }\n            if (!disconnect) {\n                disconnect = this.onDisconnect.bind(this);\n                provider.on('disconnect', disconnect);\n            }\n        },\n        async onDisconnect(error) {\n            const provider = await this.getProvider();\n            // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n            // https://github.com/MetaMask/providers/pull/120\n            if (error && error.code === 1013) {\n                if (provider && !!(await this.getAccounts()).length)\n                    return;\n            }\n            config.emitter.emit('disconnect');\n            // Manage EIP-1193 event listeners\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            if (!connect) {\n                connect = this.onConnect.bind(this);\n                provider.on('connect', connect);\n            }\n        },\n        onDisplayUri(uri) {\n            config.emitter.emit('message', { type: 'display_uri', data: uri });\n        },\n    }));\n}\n//# sourceMappingURL=metaMask.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/metaMask.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/safe.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/safe.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safe: () => (/* binding */ safe)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/connector.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/promise/withTimeout.js\");\n\n\nsafe.type = 'safe';\nfunction safe(parameters = {}) {\n    const { shimDisconnect = false } = parameters;\n    let provider_;\n    let disconnect;\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'safe',\n        name: 'Safe',\n        type: safe.type,\n        async connect() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n            const accounts = await this.getAccounts();\n            const chainId = await this.getChainId();\n            if (!disconnect) {\n                disconnect = this.onDisconnect.bind(this);\n                provider.on('disconnect', disconnect);\n            }\n            // Remove disconnected shim if it exists\n            if (shimDisconnect)\n                await config.storage?.removeItem('safe.disconnected');\n            return { accounts, chainId };\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            // Add shim signalling connector is disconnected\n            if (shimDisconnect)\n                await config.storage?.setItem('safe.disconnected', true);\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n            return (await provider.request({ method: 'eth_accounts' })).map(viem__WEBPACK_IMPORTED_MODULE_2__.getAddress);\n        },\n        async getProvider() {\n            // Only allowed in iframe context\n            const isIframe = typeof window !== 'undefined' && window?.parent !== window;\n            if (!isIframe)\n                return;\n            if (!provider_) {\n                const { default: SDK } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_safe-global_safe-apps-sdk_dist_esm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @safe-global/safe-apps-sdk */ \"(app-pages-browser)/./node_modules/@safe-global/safe-apps-sdk/dist/esm/index.js\"));\n                const sdk = new SDK(parameters);\n                // `getInfo` hangs when not used in Safe App iFrame\n                // https://github.com/safe-global/safe-apps-sdk/issues/263#issuecomment-1029835840\n                const safe = await (0,viem__WEBPACK_IMPORTED_MODULE_3__.withTimeout)(() => sdk.safe.getInfo(), {\n                    timeout: parameters.unstable_getInfoTimeout ?? 10,\n                });\n                if (!safe)\n                    throw new Error('Could not load Safe information');\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const SafeAppProvider = await (async () => {\n                    const Provider = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_safe-global_safe-apps-provider_dist_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! @safe-global/safe-apps-provider */ \"(app-pages-browser)/./node_modules/@safe-global/safe-apps-provider/dist/index.js\", 19));\n                    if (typeof Provider.SafeAppProvider !== 'function' &&\n                        typeof Provider.default.SafeAppProvider === 'function')\n                        return Provider.default.SafeAppProvider;\n                    return Provider.SafeAppProvider;\n                })();\n                provider_ = new SafeAppProvider(safe, sdk);\n            }\n            return provider_;\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n            return Number(provider.chainId);\n        },\n        async isAuthorized() {\n            try {\n                const isDisconnected = shimDisconnect &&\n                    // If shim exists in storage, connector is disconnected\n                    (await config.storage?.getItem('safe.disconnected'));\n                if (isDisconnected)\n                    return false;\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        onAccountsChanged() {\n            // Not relevant for Safe because changing account requires app reload.\n        },\n        onChainChanged() {\n            // Not relevant for Safe because Safe smart contract wallets only exist on single chain.\n        },\n        onDisconnect() {\n            config.emitter.emit('disconnect');\n        },\n    }));\n}\n//# sourceMappingURL=safe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2VzbS9zYWZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNFO0FBQ3ZCO0FBQy9DO0FBQ08sNkJBQTZCO0FBQ3BDLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQSxXQUFXLDREQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4REFBcUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOERBQXFCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4REFBcUI7QUFDL0MsNkNBQTZDLHdCQUF3QixPQUFPLDRDQUFVO0FBQ3RGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZSxRQUFRLDZSQUFvQztBQUNuRjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQVc7QUFDOUM7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywwU0FBeUM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4REFBcUI7QUFDL0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIkY6XFx3ZWJcXFN1cnZpdmFsQ0RQXFxzdXJ2aXZhbC5mdW5cXG5vZGVfbW9kdWxlc1xcQHdhZ21pXFxjb25uZWN0b3JzXFxkaXN0XFxlc21cXHNhZmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXJOb3RGb3VuZEVycm9yLCBjcmVhdGVDb25uZWN0b3IsIH0gZnJvbSAnQHdhZ21pL2NvcmUnO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcywgd2l0aFRpbWVvdXQgfSBmcm9tICd2aWVtJztcbnNhZmUudHlwZSA9ICdzYWZlJztcbmV4cG9ydCBmdW5jdGlvbiBzYWZlKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2hpbURpc2Nvbm5lY3QgPSBmYWxzZSB9ID0gcGFyYW1ldGVycztcbiAgICBsZXQgcHJvdmlkZXJfO1xuICAgIGxldCBkaXNjb25uZWN0O1xuICAgIHJldHVybiBjcmVhdGVDb25uZWN0b3IoKGNvbmZpZykgPT4gKHtcbiAgICAgICAgaWQ6ICdzYWZlJyxcbiAgICAgICAgbmFtZTogJ1NhZmUnLFxuICAgICAgICB0eXBlOiBzYWZlLnR5cGUsXG4gICAgICAgIGFzeW5jIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFcnJvcigpO1xuICAgICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLmdldEFjY291bnRzKCk7XG4gICAgICAgICAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgICAgICAgICBpZiAoIWRpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICBkaXNjb25uZWN0ID0gdGhpcy5vbkRpc2Nvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBwcm92aWRlci5vbignZGlzY29ubmVjdCcsIGRpc2Nvbm5lY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtb3ZlIGRpc2Nvbm5lY3RlZCBzaGltIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgaWYgKHNoaW1EaXNjb25uZWN0KVxuICAgICAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5yZW1vdmVJdGVtKCdzYWZlLmRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHsgYWNjb3VudHMsIGNoYWluSWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJOb3RGb3VuZEVycm9yKCk7XG4gICAgICAgICAgICBpZiAoZGlzY29ubmVjdCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKCdkaXNjb25uZWN0JywgZGlzY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgZGlzY29ubmVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCBzaGltIHNpZ25hbGxpbmcgY29ubmVjdG9yIGlzIGRpc2Nvbm5lY3RlZFxuICAgICAgICAgICAgaWYgKHNoaW1EaXNjb25uZWN0KVxuICAgICAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5zZXRJdGVtKCdzYWZlLmRpc2Nvbm5lY3RlZCcsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBnZXRBY2NvdW50cygpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJOb3RGb3VuZEVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IHByb3ZpZGVyLnJlcXVlc3QoeyBtZXRob2Q6ICdldGhfYWNjb3VudHMnIH0pKS5tYXAoZ2V0QWRkcmVzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGdldFByb3ZpZGVyKCkge1xuICAgICAgICAgICAgLy8gT25seSBhbGxvd2VkIGluIGlmcmFtZSBjb250ZXh0XG4gICAgICAgICAgICBjb25zdCBpc0lmcmFtZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdz8ucGFyZW50ICE9PSB3aW5kb3c7XG4gICAgICAgICAgICBpZiAoIWlzSWZyYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXJfKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkZWZhdWx0OiBTREsgfSA9IGF3YWl0IGltcG9ydCgnQHNhZmUtZ2xvYmFsL3NhZmUtYXBwcy1zZGsnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZGsgPSBuZXcgU0RLKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIC8vIGBnZXRJbmZvYCBoYW5ncyB3aGVuIG5vdCB1c2VkIGluIFNhZmUgQXBwIGlGcmFtZVxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYWZlLWdsb2JhbC9zYWZlLWFwcHMtc2RrL2lzc3Vlcy8yNjMjaXNzdWVjb21tZW50LTEwMjk4MzU4NDBcbiAgICAgICAgICAgICAgICBjb25zdCBzYWZlID0gYXdhaXQgd2l0aFRpbWVvdXQoKCkgPT4gc2RrLnNhZmUuZ2V0SW5mbygpLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHBhcmFtZXRlcnMudW5zdGFibGVfZ2V0SW5mb1RpbWVvdXQgPz8gMTAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzYWZlKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBsb2FkIFNhZmUgaW5mb3JtYXRpb24nKTtcbiAgICAgICAgICAgICAgICAvLyBVbndyYXBwaW5nIGltcG9ydCBmb3IgVml0ZSBjb21wYXRpYmlsaXR5LlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL2lzc3Vlcy85NzAzXG4gICAgICAgICAgICAgICAgY29uc3QgU2FmZUFwcFByb3ZpZGVyID0gYXdhaXQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgUHJvdmlkZXIgPSBhd2FpdCBpbXBvcnQoJ0BzYWZlLWdsb2JhbC9zYWZlLWFwcHMtcHJvdmlkZXInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm92aWRlci5TYWZlQXBwUHJvdmlkZXIgIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBQcm92aWRlci5kZWZhdWx0LlNhZmVBcHBQcm92aWRlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm92aWRlci5kZWZhdWx0LlNhZmVBcHBQcm92aWRlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb3ZpZGVyLlNhZmVBcHBQcm92aWRlcjtcbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyXyA9IG5ldyBTYWZlQXBwUHJvdmlkZXIoc2FmZSwgc2RrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlcl87XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGdldENoYWluSWQoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwcm92aWRlci5jaGFpbklkKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgaXNBdXRob3JpemVkKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Rpc2Nvbm5lY3RlZCA9IHNoaW1EaXNjb25uZWN0ICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHNoaW0gZXhpc3RzIGluIHN0b3JhZ2UsIGNvbm5lY3RvciBpcyBkaXNjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgKGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5nZXRJdGVtKCdzYWZlLmRpc2Nvbm5lY3RlZCcpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNEaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudHMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFhY2NvdW50cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkFjY291bnRzQ2hhbmdlZCgpIHtcbiAgICAgICAgICAgIC8vIE5vdCByZWxldmFudCBmb3IgU2FmZSBiZWNhdXNlIGNoYW5naW5nIGFjY291bnQgcmVxdWlyZXMgYXBwIHJlbG9hZC5cbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFpbkNoYW5nZWQoKSB7XG4gICAgICAgICAgICAvLyBOb3QgcmVsZXZhbnQgZm9yIFNhZmUgYmVjYXVzZSBTYWZlIHNtYXJ0IGNvbnRyYWN0IHdhbGxldHMgb25seSBleGlzdCBvbiBzaW5nbGUgY2hhaW4uXG4gICAgICAgIH0sXG4gICAgICAgIG9uRGlzY29ubmVjdCgpIHtcbiAgICAgICAgICAgIGNvbmZpZy5lbWl0dGVyLmVtaXQoJ2Rpc2Nvbm5lY3QnKTtcbiAgICAgICAgfSxcbiAgICB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYWZlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/safe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = '5.8.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJGOlxcd2ViXFxTdXJ2aXZhbENEUFxcc3Vydml2YWwuZnVuXFxub2RlX21vZHVsZXNcXEB3YWdtaVxcY29ubmVjdG9yc1xcZGlzdFxcZXNtXFx2ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzUuOC4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/walletConnect.js":
/*!******************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/esm/walletConnect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   walletConnect: () => (/* binding */ walletConnect)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/connector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/utils/extractRpcUrls.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wagmi/core */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\nwalletConnect.type = 'walletConnect';\nfunction walletConnect(parameters) {\n    const isNewChainsStale = parameters.isNewChainsStale ?? true;\n    let provider_;\n    let providerPromise;\n    const NAMESPACE = 'eip155';\n    let accountsChanged;\n    let chainChanged;\n    let connect;\n    let displayUri;\n    let sessionDelete;\n    let disconnect;\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'walletConnect',\n        name: 'WalletConnect',\n        type: walletConnect.type,\n        async setup() {\n            const provider = await this.getProvider().catch(() => null);\n            if (!provider)\n                return;\n            if (!connect) {\n                connect = this.onConnect.bind(this);\n                provider.on('connect', connect);\n            }\n            if (!sessionDelete) {\n                sessionDelete = this.onSessionDelete.bind(this);\n                provider.on('session_delete', sessionDelete);\n            }\n        },\n        async connect({ chainId, ...rest } = {}) {\n            try {\n                const provider = await this.getProvider();\n                if (!provider)\n                    throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                if (!displayUri) {\n                    displayUri = this.onDisplayUri;\n                    provider.on('display_uri', displayUri);\n                }\n                let targetChainId = chainId;\n                if (!targetChainId) {\n                    const state = (await config.storage?.getItem('state')) ?? {};\n                    const isChainSupported = config.chains.some((x) => x.id === state.chainId);\n                    if (isChainSupported)\n                        targetChainId = state.chainId;\n                    else\n                        targetChainId = config.chains[0]?.id;\n                }\n                if (!targetChainId)\n                    throw new Error('No chains found on connector.');\n                const isChainsStale = await this.isChainsStale();\n                // If there is an active session with stale chains, disconnect current session.\n                if (provider.session && isChainsStale)\n                    await provider.disconnect();\n                // If there isn't an active session or chains are stale, connect.\n                if (!provider.session || isChainsStale) {\n                    const optionalChains = config.chains\n                        .filter((chain) => chain.id !== targetChainId)\n                        .map((optionalChain) => optionalChain.id);\n                    await provider.connect({\n                        optionalChains: [targetChainId, ...optionalChains],\n                        ...('pairingTopic' in rest\n                            ? { pairingTopic: rest.pairingTopic }\n                            : {}),\n                    });\n                    this.setRequestedChainsIds(config.chains.map((x) => x.id));\n                }\n                // If session exists and chains are authorized, enable provider for required chain\n                const accounts = (await provider.enable()).map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n                const currentChainId = await this.getChainId();\n                if (displayUri) {\n                    provider.removeListener('display_uri', displayUri);\n                    displayUri = undefined;\n                }\n                if (connect) {\n                    provider.removeListener('connect', connect);\n                    connect = undefined;\n                }\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                if (!sessionDelete) {\n                    sessionDelete = this.onSessionDelete.bind(this);\n                    provider.on('session_delete', sessionDelete);\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user rejected|connection request reset)/i.test(error?.message)) {\n                    throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                }\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            try {\n                await provider?.disconnect();\n            }\n            catch (error) {\n                if (!/No matching key/i.test(error.message))\n                    throw error;\n            }\n            finally {\n                if (chainChanged) {\n                    provider?.removeListener('chainChanged', chainChanged);\n                    chainChanged = undefined;\n                }\n                if (disconnect) {\n                    provider?.removeListener('disconnect', disconnect);\n                    disconnect = undefined;\n                }\n                if (!connect) {\n                    connect = this.onConnect.bind(this);\n                    provider?.on('connect', connect);\n                }\n                if (accountsChanged) {\n                    provider?.removeListener('accountsChanged', accountsChanged);\n                    accountsChanged = undefined;\n                }\n                if (sessionDelete) {\n                    provider?.removeListener('session_delete', sessionDelete);\n                    sessionDelete = undefined;\n                }\n                this.setRequestedChainsIds([]);\n            }\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return provider.accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n        },\n        async getProvider({ chainId } = {}) {\n            async function initProvider() {\n                const optionalChains = config.chains.map((x) => x.id);\n                if (!optionalChains.length)\n                    return;\n                const { EthereumProvider } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_ethereum-provider_dist_index_es_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/ethereum-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\"));\n                return await EthereumProvider.init({\n                    ...parameters,\n                    disableProviderPing: true,\n                    optionalChains,\n                    projectId: parameters.projectId,\n                    rpcMap: Object.fromEntries(config.chains.map((chain) => {\n                        const [url] = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_4__.extractRpcUrls)({\n                            chain,\n                            transports: config.transports,\n                        });\n                        return [chain.id, url];\n                    })),\n                    showQrModal: parameters.showQrModal ?? true,\n                });\n            }\n            if (!provider_) {\n                if (!providerPromise)\n                    providerPromise = initProvider();\n                provider_ = await providerPromise;\n                provider_?.events.setMaxListeners(Number.POSITIVE_INFINITY);\n            }\n            if (chainId)\n                await this.switchChain?.({ chainId });\n            return provider_;\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            return provider.chainId;\n        },\n        async isAuthorized() {\n            try {\n                const [accounts, provider] = await Promise.all([\n                    this.getAccounts(),\n                    this.getProvider(),\n                ]);\n                // If an account does not exist on the session, then the connector is unauthorized.\n                if (!accounts.length)\n                    return false;\n                // If the chains are stale on the session, then the connector is unauthorized.\n                const isChainsStale = await this.isChainsStale();\n                if (isChainsStale && provider.session) {\n                    await provider.disconnect().catch(() => { });\n                    return false;\n                }\n                return true;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const provider = await this.getProvider();\n            if (!provider)\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n            const chain = config.chains.find((x) => x.id === chainId);\n            if (!chain)\n                throw new viem__WEBPACK_IMPORTED_MODULE_3__.SwitchChainError(new _wagmi_core__WEBPACK_IMPORTED_MODULE_5__.ChainNotConfiguredError());\n            try {\n                await Promise.all([\n                    new Promise((resolve) => {\n                        const listener = ({ chainId: currentChainId, }) => {\n                            if (currentChainId === chainId) {\n                                config.emitter.off('change', listener);\n                                resolve();\n                            }\n                        };\n                        config.emitter.on('change', listener);\n                    }),\n                    provider.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [{ chainId: (0,viem__WEBPACK_IMPORTED_MODULE_6__.numberToHex)(chainId) }],\n                    }),\n                ]);\n                const requestedChains = await this.getRequestedChainsIds();\n                this.setRequestedChainsIds([...requestedChains, chainId]);\n                return chain;\n            }\n            catch (err) {\n                const error = err;\n                if (/(user rejected)/i.test(error.message))\n                    throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                // Indicates chain is not added to provider\n                try {\n                    let blockExplorerUrls;\n                    if (addEthereumChainParameter?.blockExplorerUrls)\n                        blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                    else\n                        blockExplorerUrls = chain.blockExplorers?.default.url\n                            ? [chain.blockExplorers?.default.url]\n                            : [];\n                    let rpcUrls;\n                    if (addEthereumChainParameter?.rpcUrls?.length)\n                        rpcUrls = addEthereumChainParameter.rpcUrls;\n                    else\n                        rpcUrls = [...chain.rpcUrls.default.http];\n                    const addEthereumChain = {\n                        blockExplorerUrls,\n                        chainId: (0,viem__WEBPACK_IMPORTED_MODULE_6__.numberToHex)(chainId),\n                        chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                        iconUrls: addEthereumChainParameter?.iconUrls,\n                        nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,\n                        rpcUrls,\n                    };\n                    await provider.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [addEthereumChain],\n                    });\n                    const requestedChains = await this.getRequestedChainsIds();\n                    this.setRequestedChainsIds([...requestedChains, chainId]);\n                    return chain;\n                }\n                catch (error) {\n                    throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                }\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onConnect(connectInfo) {\n            const chainId = Number(connectInfo.chainId);\n            const accounts = await this.getAccounts();\n            config.emitter.emit('connect', { accounts, chainId });\n        },\n        async onDisconnect(_error) {\n            this.setRequestedChainsIds([]);\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            if (sessionDelete) {\n                provider.removeListener('session_delete', sessionDelete);\n                sessionDelete = undefined;\n            }\n            if (!connect) {\n                connect = this.onConnect.bind(this);\n                provider.on('connect', connect);\n            }\n        },\n        onDisplayUri(uri) {\n            config.emitter.emit('message', { type: 'display_uri', data: uri });\n        },\n        onSessionDelete() {\n            this.onDisconnect();\n        },\n        getNamespaceChainsIds() {\n            if (!provider_)\n                return [];\n            const chainIds = provider_.session?.namespaces[NAMESPACE]?.accounts?.map((account) => Number.parseInt(account.split(':')[1] || ''));\n            return chainIds ?? [];\n        },\n        async getRequestedChainsIds() {\n            return ((await config.storage?.getItem(this.requestedChainsStorageKey)) ?? []);\n        },\n        /**\n         * Checks if the target chains match the chains that were\n         * initially requested by the connector for the WalletConnect session.\n         * If there is a mismatch, this means that the chains on the connector\n         * are considered stale, and need to be revalidated at a later point (via\n         * connection).\n         *\n         * There may be a scenario where a dapp adds a chain to the\n         * connector later on, however, this chain will not have been approved or rejected\n         * by the wallet. In this case, the chain is considered stale.\n         */\n        async isChainsStale() {\n            if (!isNewChainsStale)\n                return false;\n            const connectorChains = config.chains.map((x) => x.id);\n            const namespaceChains = this.getNamespaceChainsIds();\n            if (namespaceChains.length &&\n                !namespaceChains.some((id) => connectorChains.includes(id)))\n                return false;\n            const requestedChains = await this.getRequestedChainsIds();\n            return !connectorChains.every((id) => requestedChains.includes(id));\n        },\n        async setRequestedChainsIds(chains) {\n            await config.storage?.setItem(this.requestedChainsStorageKey, chains);\n        },\n        get requestedChainsStorageKey() {\n            return `${this.id}.requestedChains`;\n        },\n    }));\n}\n//# sourceMappingURL=walletConnect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/connectors/dist/esm/walletConnect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/mock.js":
/*!**************************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/esm/connectors/mock.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mock: () => (/* binding */ mock)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/request.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem/utils */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/compat.js\");\n/* harmony import */ var _errors_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors/config.js */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var _createConnector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createConnector.js */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n\n\n\n\nmock.type = 'mock';\nfunction mock(parameters) {\n    const transactionCache = new Map();\n    const features = parameters.features ??\n        { defaultConnected: false };\n    let connected = features.defaultConnected;\n    let connectedChainId;\n    return (0,_createConnector_js__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config) => ({\n        id: 'mock',\n        name: 'Mock Connector',\n        type: mock.type,\n        async setup() {\n            connectedChainId = config.chains[0].id;\n        },\n        async connect({ chainId } = {}) {\n            if (features.connectError) {\n                if (typeof features.connectError === 'boolean')\n                    throw new viem__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError(new Error('Failed to connect.'));\n                throw features.connectError;\n            }\n            const provider = await this.getProvider();\n            const accounts = await provider.request({\n                method: 'eth_requestAccounts',\n            });\n            let currentChainId = await this.getChainId();\n            if (chainId && currentChainId !== chainId) {\n                const chain = await this.switchChain({ chainId });\n                currentChainId = chain.id;\n            }\n            connected = true;\n            return {\n                accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x)),\n                chainId: currentChainId,\n            };\n        },\n        async disconnect() {\n            connected = false;\n        },\n        async getAccounts() {\n            if (!connected)\n                throw new _errors_config_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotConnectedError();\n            const provider = await this.getProvider();\n            const accounts = await provider.request({ method: 'eth_accounts' });\n            return accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const hexChainId = await provider.request({ method: 'eth_chainId' });\n            return (0,viem__WEBPACK_IMPORTED_MODULE_4__.fromHex)(hexChainId, 'number');\n        },\n        async isAuthorized() {\n            if (!features.reconnect)\n                return false;\n            if (!connected)\n                return false;\n            const accounts = await this.getAccounts();\n            return !!accounts.length;\n        },\n        async switchChain({ chainId }) {\n            const provider = await this.getProvider();\n            const chain = config.chains.find((x) => x.id === chainId);\n            if (!chain)\n                throw new viem__WEBPACK_IMPORTED_MODULE_1__.SwitchChainError(new _errors_config_js__WEBPACK_IMPORTED_MODULE_3__.ChainNotConfiguredError());\n            await provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(chainId) }],\n            });\n            return chain;\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            connected = false;\n        },\n        async getProvider({ chainId } = {}) {\n            const chain = config.chains.find((x) => x.id === chainId) ?? config.chains[0];\n            const url = chain.rpcUrls.default.http[0];\n            const request = async ({ method, params }) => {\n                // eth methods\n                if (method === 'eth_chainId')\n                    return (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(connectedChainId);\n                if (method === 'eth_requestAccounts')\n                    return parameters.accounts;\n                if (method === 'eth_signTypedData_v4')\n                    if (features.signTypedDataError) {\n                        if (typeof features.signTypedDataError === 'boolean')\n                            throw new viem__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError(new Error('Failed to sign typed data.'));\n                        throw features.signTypedDataError;\n                    }\n                // wallet methods\n                if (method === 'wallet_switchEthereumChain') {\n                    if (features.switchChainError) {\n                        if (typeof features.switchChainError === 'boolean')\n                            throw new viem__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError(new Error('Failed to switch chain.'));\n                        throw features.switchChainError;\n                    }\n                    connectedChainId = (0,viem__WEBPACK_IMPORTED_MODULE_4__.fromHex)(params[0].chainId, 'number');\n                    this.onChainChanged(connectedChainId.toString());\n                    return;\n                }\n                if (method === 'wallet_watchAsset') {\n                    if (features.watchAssetError) {\n                        if (typeof features.watchAssetError === 'boolean')\n                            throw new viem__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError(new Error('Failed to switch chain.'));\n                        throw features.watchAssetError;\n                    }\n                    return connected;\n                }\n                if (method === 'wallet_getCapabilities')\n                    return {\n                        '0x2105': {\n                            paymasterService: {\n                                supported: params[0] ===\n                                    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n                            },\n                            sessionKeys: {\n                                supported: true,\n                            },\n                        },\n                        '0x14A34': {\n                            paymasterService: {\n                                supported: params[0] ===\n                                    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n                            },\n                        },\n                    };\n                if (method === 'wallet_sendCalls') {\n                    const hashes = [];\n                    const calls = params[0].calls;\n                    for (const call of calls) {\n                        const { result, error } = await viem_utils__WEBPACK_IMPORTED_MODULE_6__.rpc.http(url, {\n                            body: {\n                                method: 'eth_sendTransaction',\n                                params: [call],\n                            },\n                        });\n                        if (error)\n                            throw new viem__WEBPACK_IMPORTED_MODULE_7__.RpcRequestError({\n                                body: { method, params },\n                                error,\n                                url,\n                            });\n                        hashes.push(result);\n                    }\n                    const id = (0,viem__WEBPACK_IMPORTED_MODULE_8__.keccak256)((0,viem__WEBPACK_IMPORTED_MODULE_5__.stringToHex)(JSON.stringify(calls)));\n                    transactionCache.set(id, hashes);\n                    return { id };\n                }\n                if (method === 'wallet_getCallsStatus') {\n                    const hashes = transactionCache.get(params[0]);\n                    if (!hashes)\n                        return {\n                            atomic: false,\n                            chainId: '0x1',\n                            id: params[0],\n                            status: 100,\n                            receipts: [],\n                            version: '2.0.0',\n                        };\n                    const receipts = await Promise.all(hashes.map(async (hash) => {\n                        const { result, error } = await viem_utils__WEBPACK_IMPORTED_MODULE_6__.rpc.http(url, {\n                            body: {\n                                method: 'eth_getTransactionReceipt',\n                                params: [hash],\n                                id: 0,\n                            },\n                        });\n                        if (error)\n                            throw new viem__WEBPACK_IMPORTED_MODULE_7__.RpcRequestError({\n                                body: { method, params },\n                                error,\n                                url,\n                            });\n                        if (!result)\n                            return null;\n                        return {\n                            blockHash: result.blockHash,\n                            blockNumber: result.blockNumber,\n                            gasUsed: result.gasUsed,\n                            logs: result.logs,\n                            status: result.status,\n                            transactionHash: result.transactionHash,\n                        };\n                    }));\n                    const receipts_ = receipts.filter((x) => x !== null);\n                    if (receipts_.length === 0)\n                        return {\n                            atomic: false,\n                            chainId: '0x1',\n                            id: params[0],\n                            status: 100,\n                            receipts: [],\n                            version: '2.0.0',\n                        };\n                    return {\n                        atomic: false,\n                        chainId: '0x1',\n                        id: params[0],\n                        status: 200,\n                        receipts: receipts_,\n                        version: '2.0.0',\n                    };\n                }\n                if (method === 'wallet_showCallsStatus')\n                    return;\n                // other methods\n                if (method === 'personal_sign') {\n                    if (features.signMessageError) {\n                        if (typeof features.signMessageError === 'boolean')\n                            throw new viem__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError(new Error('Failed to sign message.'));\n                        throw features.signMessageError;\n                    }\n                    // Change `personal_sign` to `eth_sign` and swap params\n                    method = 'eth_sign';\n                    params = [params[1], params[0]];\n                }\n                const body = { method, params };\n                const { error, result } = await viem_utils__WEBPACK_IMPORTED_MODULE_6__.rpc.http(url, { body });\n                if (error)\n                    throw new viem__WEBPACK_IMPORTED_MODULE_7__.RpcRequestError({ body, error, url });\n                return result;\n            };\n            return (0,viem__WEBPACK_IMPORTED_MODULE_9__.custom)({ request })({ retryCount: 0 });\n        },\n    }));\n}\n//# sourceMappingURL=mock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9jb25uZWN0b3JzL21vY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0o7QUFDckg7QUFDMEQ7QUFDcEM7QUFDdkQ7QUFDTztBQUNQO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFdBQVcsb0VBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx3QkFBd0IsVUFBVSxJQUFJO0FBQ3RDO0FBQ0E7QUFDQSw4QkFBOEIsMERBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHVEQUF1RCxTQUFTO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGdEQUFVO0FBQ3hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMEJBQTBCLHlFQUEwQjtBQUNwRDtBQUNBLHNEQUFzRCx3QkFBd0I7QUFDOUUsdUNBQXVDLGdEQUFVO0FBQ2pELFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0RBQXdELHVCQUF1QjtBQUMvRSxtQkFBbUIsNkNBQU87QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrREFBZ0IsS0FBSyxzRUFBdUI7QUFDdEU7QUFDQTtBQUNBLDJCQUEyQixTQUFTLGlEQUFXLFdBQVc7QUFDMUQsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0RBQVU7QUFDNUQsaUJBQWlCO0FBQ2pCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw0QkFBNEIsVUFBVSxJQUFJO0FBQzFDO0FBQ0E7QUFDQSxxQ0FBcUMsZ0JBQWdCO0FBQ3JEO0FBQ0E7QUFDQSwyQkFBMkIsaURBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQywwREFBd0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDBEQUF3QjtBQUM5RDtBQUNBO0FBQ0EsdUNBQXVDLDZDQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQywwREFBd0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCLFFBQVEsMkNBQUc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBLHNDQUFzQyxpREFBZTtBQUNyRCx3Q0FBd0MsZ0JBQWdCO0FBQ3hEO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLCtCQUErQiwrQ0FBUyxDQUFDLGlEQUFXO0FBQ3BEO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQixRQUFRLDJDQUFHO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBLHNDQUFzQyxpREFBZTtBQUNyRCx3Q0FBd0MsZ0JBQWdCO0FBQ3hEO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMERBQXdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQix3QkFBd0IsZ0JBQWdCLFFBQVEsMkNBQUcsYUFBYSxNQUFNO0FBQ3RFO0FBQ0EsOEJBQThCLGlEQUFlLEdBQUcsa0JBQWtCO0FBQ2xFO0FBQ0E7QUFDQSxtQkFBbUIsNENBQU0sR0FBRyxTQUFTLElBQUksZUFBZTtBQUN4RCxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIkY6XFx3ZWJcXFN1cnZpdmFsQ0RQXFxzdXJ2aXZhbC5mdW5cXG5vZGVfbW9kdWxlc1xcQHdhZ21pXFxjb3JlXFxkaXN0XFxlc21cXGNvbm5lY3RvcnNcXG1vY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnBjUmVxdWVzdEVycm9yLCBTd2l0Y2hDaGFpbkVycm9yLCBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IsIGN1c3RvbSwgZnJvbUhleCwgZ2V0QWRkcmVzcywga2VjY2FrMjU2LCBudW1iZXJUb0hleCwgc3RyaW5nVG9IZXgsIH0gZnJvbSAndmllbSc7XG5pbXBvcnQgeyBycGMgfSBmcm9tICd2aWVtL3V0aWxzJztcbmltcG9ydCB7IENoYWluTm90Q29uZmlndXJlZEVycm9yLCBDb25uZWN0b3JOb3RDb25uZWN0ZWRFcnJvciwgfSBmcm9tICcuLi9lcnJvcnMvY29uZmlnLmpzJztcbmltcG9ydCB7IGNyZWF0ZUNvbm5lY3RvciB9IGZyb20gJy4vY3JlYXRlQ29ubmVjdG9yLmpzJztcbm1vY2sudHlwZSA9ICdtb2NrJztcbmV4cG9ydCBmdW5jdGlvbiBtb2NrKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbkNhY2hlID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGZlYXR1cmVzID0gcGFyYW1ldGVycy5mZWF0dXJlcyA/P1xuICAgICAgICB7IGRlZmF1bHRDb25uZWN0ZWQ6IGZhbHNlIH07XG4gICAgbGV0IGNvbm5lY3RlZCA9IGZlYXR1cmVzLmRlZmF1bHRDb25uZWN0ZWQ7XG4gICAgbGV0IGNvbm5lY3RlZENoYWluSWQ7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbm5lY3RvcigoY29uZmlnKSA9PiAoe1xuICAgICAgICBpZDogJ21vY2snLFxuICAgICAgICBuYW1lOiAnTW9jayBDb25uZWN0b3InLFxuICAgICAgICB0eXBlOiBtb2NrLnR5cGUsXG4gICAgICAgIGFzeW5jIHNldHVwKCkge1xuICAgICAgICAgICAgY29ubmVjdGVkQ2hhaW5JZCA9IGNvbmZpZy5jaGFpbnNbMF0uaWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNvbm5lY3QoeyBjaGFpbklkIH0gPSB7fSkge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzLmNvbm5lY3RFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZXMuY29ubmVjdEVycm9yID09PSAnYm9vbGVhbicpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IobmV3IEVycm9yKCdGYWlsZWQgdG8gY29ubmVjdC4nKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZmVhdHVyZXMuY29ubmVjdEVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9yZXF1ZXN0QWNjb3VudHMnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgY3VycmVudENoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgICAgIGlmIChjaGFpbklkICYmIGN1cnJlbnRDaGFpbklkICE9PSBjaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBhd2FpdCB0aGlzLnN3aXRjaENoYWluKHsgY2hhaW5JZCB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hhaW5JZCA9IGNoYWluLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWNjb3VudHM6IGFjY291bnRzLm1hcCgoeCkgPT4gZ2V0QWRkcmVzcyh4KSksXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogY3VycmVudENoYWluSWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICAgICAgY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGdldEFjY291bnRzKCkge1xuICAgICAgICAgICAgaWYgKCFjb25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3Rvck5vdENvbm5lY3RlZEVycm9yKCk7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7IG1ldGhvZDogJ2V0aF9hY2NvdW50cycgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjb3VudHMubWFwKCh4KSA9PiBnZXRBZGRyZXNzKHgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZ2V0Q2hhaW5JZCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgY29uc3QgaGV4Q2hhaW5JZCA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3QoeyBtZXRob2Q6ICdldGhfY2hhaW5JZCcgfSk7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUhleChoZXhDaGFpbklkLCAnbnVtYmVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGlzQXV0aG9yaXplZCgpIHtcbiAgICAgICAgICAgIGlmICghZmVhdHVyZXMucmVjb25uZWN0KVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghY29ubmVjdGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50cygpO1xuICAgICAgICAgICAgcmV0dXJuICEhYWNjb3VudHMubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzd2l0Y2hDaGFpbih7IGNoYWluSWQgfSkge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgICAgICAgICBjb25zdCBjaGFpbiA9IGNvbmZpZy5jaGFpbnMuZmluZCgoeCkgPT4geC5pZCA9PT0gY2hhaW5JZCk7XG4gICAgICAgICAgICBpZiAoIWNoYWluKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTd2l0Y2hDaGFpbkVycm9yKG5ldyBDaGFpbk5vdENvbmZpZ3VyZWRFcnJvcigpKTtcbiAgICAgICAgICAgIGF3YWl0IHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3dhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IFt7IGNoYWluSWQ6IG51bWJlclRvSGV4KGNoYWluSWQpIH1dLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2hhaW47XG4gICAgICAgIH0sXG4gICAgICAgIG9uQWNjb3VudHNDaGFuZ2VkKGFjY291bnRzKSB7XG4gICAgICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY29uZmlnLmVtaXR0ZXIuZW1pdCgnY2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50czogYWNjb3VudHMubWFwKCh4KSA9PiBnZXRBZGRyZXNzKHgpKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFpbkNoYW5nZWQoY2hhaW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBOdW1iZXIoY2hhaW4pO1xuICAgICAgICAgICAgY29uZmlnLmVtaXR0ZXIuZW1pdCgnY2hhbmdlJywgeyBjaGFpbklkIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBvbkRpc2Nvbm5lY3QoX2Vycm9yKSB7XG4gICAgICAgICAgICBjb25maWcuZW1pdHRlci5lbWl0KCdkaXNjb25uZWN0Jyk7XG4gICAgICAgICAgICBjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZ2V0UHJvdmlkZXIoeyBjaGFpbklkIH0gPSB7fSkge1xuICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBjb25maWcuY2hhaW5zLmZpbmQoKHgpID0+IHguaWQgPT09IGNoYWluSWQpID8/IGNvbmZpZy5jaGFpbnNbMF07XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjaGFpbi5ycGNVcmxzLmRlZmF1bHQuaHR0cFswXTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBhc3luYyAoeyBtZXRob2QsIHBhcmFtcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZXRoIG1ldGhvZHNcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnZXRoX2NoYWluSWQnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyVG9IZXgoY29ubmVjdGVkQ2hhaW5JZCk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ2V0aF9yZXF1ZXN0QWNjb3VudHMnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5hY2NvdW50cztcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnZXRoX3NpZ25UeXBlZERhdGFfdjQnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMuc2lnblR5cGVkRGF0YUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmVzLnNpZ25UeXBlZERhdGFFcnJvciA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IobmV3IEVycm9yKCdGYWlsZWQgdG8gc2lnbiB0eXBlZCBkYXRhLicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZlYXR1cmVzLnNpZ25UeXBlZERhdGFFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdhbGxldCBtZXRob2RzXG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3dhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMuc3dpdGNoQ2hhaW5FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlcy5zd2l0Y2hDaGFpbkVycm9yID09PSAnYm9vbGVhbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcihuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzd2l0Y2ggY2hhaW4uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZmVhdHVyZXMuc3dpdGNoQ2hhaW5FcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWRDaGFpbklkID0gZnJvbUhleChwYXJhbXNbMF0uY2hhaW5JZCwgJ251bWJlcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhaW5DaGFuZ2VkKGNvbm5lY3RlZENoYWluSWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3dhbGxldF93YXRjaEFzc2V0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMud2F0Y2hBc3NldEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmVzLndhdGNoQXNzZXRFcnJvciA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IobmV3IEVycm9yKCdGYWlsZWQgdG8gc3dpdGNoIGNoYWluLicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZlYXR1cmVzLndhdGNoQXNzZXRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnd2FsbGV0X2dldENhcGFiaWxpdGllcycpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnMHgyMTA1Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheW1hc3RlclNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkOiBwYXJhbXNbMF0gPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMHhmMzlGZDZlNTFhYWQ4OEY2RjRjZTZhQjg4MjcyNzljZmZGYjkyMjY2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25LZXlzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcweDE0QTM0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheW1hc3RlclNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkOiBwYXJhbXNbMF0gPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMHhmMzlGZDZlNTFhYWQ4OEY2RjRjZTZhQjg4MjcyNzljZmZGYjkyMjY2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnd2FsbGV0X3NlbmRDYWxscycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxzID0gcGFyYW1zWzBdLmNhbGxzO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGwgb2YgY2FsbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVzdWx0LCBlcnJvciB9ID0gYXdhaXQgcnBjLmh0dHAodXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdldGhfc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbY2FsbF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBScGNSZXF1ZXN0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IG1ldGhvZCwgcGFyYW1zIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNoZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0ga2VjY2FrMjU2KHN0cmluZ1RvSGV4KEpTT04uc3RyaW5naWZ5KGNhbGxzKSkpO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkNhY2hlLnNldChpZCwgaGFzaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgaWQgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3dhbGxldF9nZXRDYWxsc1N0YXR1cycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaGVzID0gdHJhbnNhY3Rpb25DYWNoZS5nZXQocGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0b21pYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogJzB4MScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcmFtc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoaGFzaGVzLm1hcChhc3luYyAoaGFzaCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZXN1bHQsIGVycm9yIH0gPSBhd2FpdCBycGMuaHR0cCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtoYXNoXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBScGNSZXF1ZXN0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IG1ldGhvZCwgcGFyYW1zIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tIYXNoOiByZXN1bHQuYmxvY2tIYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiByZXN1bHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzVXNlZDogcmVzdWx0Lmdhc1VzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nczogcmVzdWx0LmxvZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogcmVzdWx0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjZWlwdHNfID0gcmVjZWlwdHMuZmlsdGVyKCh4KSA9PiB4ICE9PSBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpcHRzXy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0b21pYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogJzB4MScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcmFtc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdG9taWM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogJzB4MScsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcGFyYW1zWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0czogcmVjZWlwdHNfLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3dhbGxldF9zaG93Q2FsbHNTdGF0dXMnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgbWV0aG9kc1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICdwZXJzb25hbF9zaWduJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMuc2lnbk1lc3NhZ2VFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlcy5zaWduTWVzc2FnZUVycm9yID09PSAnYm9vbGVhbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcihuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzaWduIG1lc3NhZ2UuJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZmVhdHVyZXMuc2lnbk1lc3NhZ2VFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgYHBlcnNvbmFsX3NpZ25gIHRvIGBldGhfc2lnbmAgYW5kIHN3YXAgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9ICdldGhfc2lnbic7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IFtwYXJhbXNbMV0sIHBhcmFtc1swXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7IG1ldGhvZCwgcGFyYW1zIH07XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvciwgcmVzdWx0IH0gPSBhd2FpdCBycGMuaHR0cCh1cmwsIHsgYm9keSB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBScGNSZXF1ZXN0RXJyb3IoeyBib2R5LCBlcnJvciwgdXJsIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbSh7IHJlcXVlc3QgfSkoeyByZXRyeUNvdW50OiAwIH0pO1xuICAgICAgICB9LFxuICAgIH0pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vY2suanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/mock.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/utils/extractRpcUrls.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/esm/utils/extractRpcUrls.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractRpcUrls: () => (/* binding */ extractRpcUrls)\n/* harmony export */ });\nfunction extractRpcUrls(parameters) {\n    const { chain } = parameters;\n    const fallbackUrl = chain.rpcUrls.default.http[0];\n    if (!parameters.transports)\n        return [fallbackUrl];\n    const transport = parameters.transports?.[chain.id]?.({ chain });\n    const transports = transport?.value?.transports || [transport];\n    return transports.map(({ value }) => value?.url || fallbackUrl);\n}\n//# sourceMappingURL=extractRpcUrls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy9leHRyYWN0UnBjVXJscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUCxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQSw2QkFBNkIsT0FBTztBQUNwQztBQUNBIiwic291cmNlcyI6WyJGOlxcd2ViXFxTdXJ2aXZhbENEUFxcc3Vydml2YWwuZnVuXFxub2RlX21vZHVsZXNcXEB3YWdtaVxcY29yZVxcZGlzdFxcZXNtXFx1dGlsc1xcZXh0cmFjdFJwY1VybHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RScGNVcmxzKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCB7IGNoYWluIH0gPSBwYXJhbWV0ZXJzO1xuICAgIGNvbnN0IGZhbGxiYWNrVXJsID0gY2hhaW4ucnBjVXJscy5kZWZhdWx0Lmh0dHBbMF07XG4gICAgaWYgKCFwYXJhbWV0ZXJzLnRyYW5zcG9ydHMpXG4gICAgICAgIHJldHVybiBbZmFsbGJhY2tVcmxdO1xuICAgIGNvbnN0IHRyYW5zcG9ydCA9IHBhcmFtZXRlcnMudHJhbnNwb3J0cz8uW2NoYWluLmlkXT8uKHsgY2hhaW4gfSk7XG4gICAgY29uc3QgdHJhbnNwb3J0cyA9IHRyYW5zcG9ydD8udmFsdWU/LnRyYW5zcG9ydHMgfHwgW3RyYW5zcG9ydF07XG4gICAgcmV0dXJuIHRyYW5zcG9ydHMubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlPy51cmwgfHwgZmFsbGJhY2tVcmwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFJwY1VybHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/utils/extractRpcUrls.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/compat.js":
/*!****************************************************!*\
  !*** ./node_modules/viem/_esm/utils/rpc/compat.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSocket: () => (/* binding */ getSocket),\n/* harmony export */   rpc: () => (/* binding */ rpc)\n/* harmony export */ });\n/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/http.js\");\n/* harmony import */ var _webSocket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webSocket.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/webSocket.js\");\n// TODO(v3): This file is here for backwards compatibility, and to prevent breaking changes.\n// These APIs will be removed in v3.\n\n\nfunction webSocket(socketClient, { body, onError, onResponse }) {\n    socketClient.request({\n        body,\n        onError,\n        onResponse,\n    });\n    return socketClient;\n}\nasync function webSocketAsync(socketClient, { body, timeout = 10_000 }) {\n    return socketClient.requestAsync({\n        body,\n        timeout,\n    });\n}\n/**\n * @deprecated use `getSocketClient` instead.\n *\n * ```diff\n * -import { getSocket } from 'viem/utils'\n * +import { getSocketClient } from 'viem/utils'\n *\n * -const socket = await getSocket(url)\n * +const socketClient = await getSocketClient(url)\n * +const socket = socketClient.socket\n * ```\n */\nasync function getSocket(url) {\n    const client = await (0,_webSocket_js__WEBPACK_IMPORTED_MODULE_0__.getWebSocketRpcClient)(url);\n    return Object.assign(client.socket, {\n        requests: client.requests,\n        subscriptions: client.subscriptions,\n    });\n}\nconst rpc = {\n    /**\n     * @deprecated use `getHttpRpcClient` instead.\n     *\n     * ```diff\n     * -import { rpc } from 'viem/utils'\n     * +import { getHttpRpcClient } from 'viem/utils'\n     *\n     * -rpc.http(url, params)\n     * +const httpClient = getHttpRpcClient(url)\n     * +httpClient.request(params)\n     * ```\n     */\n    http(url, params) {\n        return (0,_http_js__WEBPACK_IMPORTED_MODULE_1__.getHttpRpcClient)(url).request(params);\n    },\n    /**\n     * @deprecated use `getWebSocketRpcClient` instead.\n     *\n     * ```diff\n     * -import { rpc } from 'viem/utils'\n     * +import { getWebSocketRpcClient } from 'viem/utils'\n     *\n     * -rpc.webSocket(url, params)\n     * +const webSocketClient = getWebSocketRpcClient(url)\n     * +webSocketClient.request(params)\n     * ```\n     */\n    webSocket,\n    /**\n     * @deprecated use `getWebSocketRpcClient` instead.\n     *\n     * ```diff\n     * -import { rpc } from 'viem/utils'\n     * +import { getWebSocketRpcClient } from 'viem/utils'\n     *\n     * -const response = await rpc.webSocketAsync(url, params)\n     * +const webSocketClient = getWebSocketRpcClient(url)\n     * +const response = await webSocketClient.requestAsync(params)\n     * ```\n     */\n    webSocketAsync,\n};\n/* c8 ignore end */\n//# sourceMappingURL=compat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvcnBjL2NvbXBhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUM2QztBQUNVO0FBQ3ZELG1DQUFtQywyQkFBMkI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDhDQUE4Qyx3QkFBd0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCx5QkFBeUIsb0VBQXFCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QixpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwREFBZ0I7QUFDL0IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkIsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkIsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRjpcXHdlYlxcU3Vydml2YWxDRFBcXHN1cnZpdmFsLmZ1blxcbm9kZV9tb2R1bGVzXFx2aWVtXFxfZXNtXFx1dGlsc1xccnBjXFxjb21wYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyh2Myk6IFRoaXMgZmlsZSBpcyBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgYW5kIHRvIHByZXZlbnQgYnJlYWtpbmcgY2hhbmdlcy5cbi8vIFRoZXNlIEFQSXMgd2lsbCBiZSByZW1vdmVkIGluIHYzLlxuaW1wb3J0IHsgZ2V0SHR0cFJwY0NsaWVudCB9IGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeyBnZXRXZWJTb2NrZXRScGNDbGllbnQgfSBmcm9tICcuL3dlYlNvY2tldC5qcyc7XG5mdW5jdGlvbiB3ZWJTb2NrZXQoc29ja2V0Q2xpZW50LCB7IGJvZHksIG9uRXJyb3IsIG9uUmVzcG9uc2UgfSkge1xuICAgIHNvY2tldENsaWVudC5yZXF1ZXN0KHtcbiAgICAgICAgYm9keSxcbiAgICAgICAgb25FcnJvcixcbiAgICAgICAgb25SZXNwb25zZSxcbiAgICB9KTtcbiAgICByZXR1cm4gc29ja2V0Q2xpZW50O1xufVxuYXN5bmMgZnVuY3Rpb24gd2ViU29ja2V0QXN5bmMoc29ja2V0Q2xpZW50LCB7IGJvZHksIHRpbWVvdXQgPSAxMF8wMDAgfSkge1xuICAgIHJldHVybiBzb2NrZXRDbGllbnQucmVxdWVzdEFzeW5jKHtcbiAgICAgICAgYm9keSxcbiAgICAgICAgdGltZW91dCxcbiAgICB9KTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBnZXRTb2NrZXRDbGllbnRgIGluc3RlYWQuXG4gKlxuICogYGBgZGlmZlxuICogLWltcG9ydCB7IGdldFNvY2tldCB9IGZyb20gJ3ZpZW0vdXRpbHMnXG4gKiAraW1wb3J0IHsgZ2V0U29ja2V0Q2xpZW50IH0gZnJvbSAndmllbS91dGlscydcbiAqXG4gKiAtY29uc3Qgc29ja2V0ID0gYXdhaXQgZ2V0U29ja2V0KHVybClcbiAqICtjb25zdCBzb2NrZXRDbGllbnQgPSBhd2FpdCBnZXRTb2NrZXRDbGllbnQodXJsKVxuICogK2NvbnN0IHNvY2tldCA9IHNvY2tldENsaWVudC5zb2NrZXRcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U29ja2V0KHVybCkge1xuICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IGdldFdlYlNvY2tldFJwY0NsaWVudCh1cmwpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNsaWVudC5zb2NrZXQsIHtcbiAgICAgICAgcmVxdWVzdHM6IGNsaWVudC5yZXF1ZXN0cyxcbiAgICAgICAgc3Vic2NyaXB0aW9uczogY2xpZW50LnN1YnNjcmlwdGlvbnMsXG4gICAgfSk7XG59XG5leHBvcnQgY29uc3QgcnBjID0ge1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZ2V0SHR0cFJwY0NsaWVudGAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIGBgYGRpZmZcbiAgICAgKiAtaW1wb3J0IHsgcnBjIH0gZnJvbSAndmllbS91dGlscydcbiAgICAgKiAraW1wb3J0IHsgZ2V0SHR0cFJwY0NsaWVudCB9IGZyb20gJ3ZpZW0vdXRpbHMnXG4gICAgICpcbiAgICAgKiAtcnBjLmh0dHAodXJsLCBwYXJhbXMpXG4gICAgICogK2NvbnN0IGh0dHBDbGllbnQgPSBnZXRIdHRwUnBjQ2xpZW50KHVybClcbiAgICAgKiAraHR0cENsaWVudC5yZXF1ZXN0KHBhcmFtcylcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBodHRwKHVybCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBnZXRIdHRwUnBjQ2xpZW50KHVybCkucmVxdWVzdChwYXJhbXMpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGBnZXRXZWJTb2NrZXRScGNDbGllbnRgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBgYGBkaWZmXG4gICAgICogLWltcG9ydCB7IHJwYyB9IGZyb20gJ3ZpZW0vdXRpbHMnXG4gICAgICogK2ltcG9ydCB7IGdldFdlYlNvY2tldFJwY0NsaWVudCB9IGZyb20gJ3ZpZW0vdXRpbHMnXG4gICAgICpcbiAgICAgKiAtcnBjLndlYlNvY2tldCh1cmwsIHBhcmFtcylcbiAgICAgKiArY29uc3Qgd2ViU29ja2V0Q2xpZW50ID0gZ2V0V2ViU29ja2V0UnBjQ2xpZW50KHVybClcbiAgICAgKiArd2ViU29ja2V0Q2xpZW50LnJlcXVlc3QocGFyYW1zKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHdlYlNvY2tldCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGdldFdlYlNvY2tldFJwY0NsaWVudGAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIGBgYGRpZmZcbiAgICAgKiAtaW1wb3J0IHsgcnBjIH0gZnJvbSAndmllbS91dGlscydcbiAgICAgKiAraW1wb3J0IHsgZ2V0V2ViU29ja2V0UnBjQ2xpZW50IH0gZnJvbSAndmllbS91dGlscydcbiAgICAgKlxuICAgICAqIC1jb25zdCByZXNwb25zZSA9IGF3YWl0IHJwYy53ZWJTb2NrZXRBc3luYyh1cmwsIHBhcmFtcylcbiAgICAgKiArY29uc3Qgd2ViU29ja2V0Q2xpZW50ID0gZ2V0V2ViU29ja2V0UnBjQ2xpZW50KHVybClcbiAgICAgKiArY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3ZWJTb2NrZXRDbGllbnQucmVxdWVzdEFzeW5jKHBhcmFtcylcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB3ZWJTb2NrZXRBc3luYyxcbn07XG4vKiBjOCBpZ25vcmUgZW5kICovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/compat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/socket.js":
/*!****************************************************!*\
  !*** ./node_modules/viem/_esm/utils/rpc/socket.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSocketRpcClient: () => (/* binding */ getSocketRpcClient),\n/* harmony export */   socketClientCache: () => (/* binding */ socketClientCache)\n/* harmony export */ });\n/* harmony import */ var _errors_request_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/request.js */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/request.js\");\n/* harmony import */ var _promise_createBatchScheduler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../promise/createBatchScheduler.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/promise/createBatchScheduler.js\");\n/* harmony import */ var _promise_withTimeout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../promise/withTimeout.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/promise/withTimeout.js\");\n/* harmony import */ var _id_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./id.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/id.js\");\n\n\n\n\nconst socketClientCache = /*#__PURE__*/ new Map();\nasync function getSocketRpcClient(parameters) {\n    const { getSocket, keepAlive = true, key = 'socket', reconnect = true, url, } = parameters;\n    const { interval: keepAliveInterval = 30_000 } = typeof keepAlive === 'object' ? keepAlive : {};\n    const { attempts = 5, delay = 2_000 } = typeof reconnect === 'object' ? reconnect : {};\n    let socketClient = socketClientCache.get(`${key}:${url}`);\n    // If the socket already exists, return it.\n    if (socketClient)\n        return socketClient;\n    let reconnectCount = 0;\n    const { schedule } = (0,_promise_createBatchScheduler_js__WEBPACK_IMPORTED_MODULE_0__.createBatchScheduler)({\n        id: `${key}:${url}`,\n        fn: async () => {\n            // Set up a cache for incoming \"synchronous\" requests.\n            const requests = new Map();\n            // Set up a cache for subscriptions (eth_subscribe).\n            const subscriptions = new Map();\n            let error;\n            let socket;\n            let keepAliveTimer;\n            // Set up socket implementation.\n            async function setup() {\n                const result = await getSocket({\n                    onClose() {\n                        // Notify all requests and subscriptions of the closure error.\n                        for (const request of requests.values())\n                            request.onError?.(new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.SocketClosedError({ url }));\n                        for (const subscription of subscriptions.values())\n                            subscription.onError?.(new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.SocketClosedError({ url }));\n                        // Clear all requests and subscriptions.\n                        requests.clear();\n                        subscriptions.clear();\n                        // Attempt to reconnect.\n                        if (reconnect && reconnectCount < attempts)\n                            setTimeout(async () => {\n                                reconnectCount++;\n                                await setup().catch(console.error);\n                            }, delay);\n                    },\n                    onError(error_) {\n                        error = error_;\n                        // Notify all requests and subscriptions of the error.\n                        for (const request of requests.values())\n                            request.onError?.(error);\n                        for (const subscription of subscriptions.values())\n                            subscription.onError?.(error);\n                        // Clear all requests and subscriptions.\n                        requests.clear();\n                        subscriptions.clear();\n                        // Make sure socket is definitely closed.\n                        socketClient?.close();\n                        // Attempt to reconnect.\n                        if (reconnect && reconnectCount < attempts)\n                            setTimeout(async () => {\n                                reconnectCount++;\n                                await setup().catch(console.error);\n                            }, delay);\n                    },\n                    onOpen() {\n                        error = undefined;\n                        reconnectCount = 0;\n                    },\n                    onResponse(data) {\n                        const isSubscription = data.method === 'eth_subscription';\n                        const id = isSubscription ? data.params.subscription : data.id;\n                        const cache = isSubscription ? subscriptions : requests;\n                        const callback = cache.get(id);\n                        if (callback)\n                            callback.onResponse(data);\n                        if (!isSubscription)\n                            cache.delete(id);\n                    },\n                });\n                socket = result;\n                if (keepAlive) {\n                    if (keepAliveTimer)\n                        clearInterval(keepAliveTimer);\n                    keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval);\n                }\n                return result;\n            }\n            await setup();\n            error = undefined;\n            // Create a new socket instance.\n            socketClient = {\n                close() {\n                    keepAliveTimer && clearInterval(keepAliveTimer);\n                    socket.close();\n                    socketClientCache.delete(`${key}:${url}`);\n                },\n                get socket() {\n                    return socket;\n                },\n                request({ body, onError, onResponse }) {\n                    if (error && onError)\n                        onError(error);\n                    const id = body.id ?? _id_js__WEBPACK_IMPORTED_MODULE_2__.idCache.take();\n                    const callback = (response) => {\n                        if (typeof response.id === 'number' && id !== response.id)\n                            return;\n                        // If we are subscribing to a topic, we want to set up a listener for incoming\n                        // messages.\n                        if (body.method === 'eth_subscribe' &&\n                            typeof response.result === 'string')\n                            subscriptions.set(response.result, {\n                                onResponse: callback,\n                                onError,\n                            });\n                        // If we are unsubscribing from a topic, we want to remove the listener.\n                        if (body.method === 'eth_unsubscribe')\n                            subscriptions.delete(body.params?.[0]);\n                        onResponse(response);\n                    };\n                    requests.set(id, { onResponse: callback, onError });\n                    try {\n                        socket.request({\n                            body: {\n                                jsonrpc: '2.0',\n                                id,\n                                ...body,\n                            },\n                        });\n                    }\n                    catch (error) {\n                        onError?.(error);\n                    }\n                },\n                requestAsync({ body, timeout = 10_000 }) {\n                    return (0,_promise_withTimeout_js__WEBPACK_IMPORTED_MODULE_3__.withTimeout)(() => new Promise((onResponse, onError) => this.request({\n                        body,\n                        onError,\n                        onResponse,\n                    })), {\n                        errorInstance: new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.TimeoutError({ body, url }),\n                        timeout,\n                    });\n                },\n                requests,\n                subscriptions,\n                url,\n            };\n            socketClientCache.set(`${key}:${url}`, socketClient);\n            return [socketClient];\n        },\n    });\n    const [_, [socketClient_]] = await schedule();\n    return socketClient_;\n}\n//# sourceMappingURL=socket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvcnBjL3NvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMEU7QUFDQztBQUNuQjtBQUN0QjtBQUMzQjtBQUNBO0FBQ1AsWUFBWSxzRUFBc0U7QUFDbEYsWUFBWSx1Q0FBdUM7QUFDbkQsWUFBWSw4QkFBOEI7QUFDMUMsZ0RBQWdELElBQUksR0FBRyxJQUFJO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXLEVBQUUsc0ZBQW9CO0FBQzdDLGVBQWUsSUFBSSxHQUFHLElBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxpRUFBaUIsR0FBRyxLQUFLO0FBQzNFO0FBQ0EsdURBQXVELGlFQUFpQixHQUFHLEtBQUs7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELElBQUksR0FBRyxJQUFJO0FBQzNELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDBCQUEwQiwyQkFBMkI7QUFDckQ7QUFDQTtBQUNBLDBDQUEwQywyQ0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLCtCQUErQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLCtCQUErQix3QkFBd0I7QUFDdkQsMkJBQTJCLG9FQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiwyQ0FBMkMsNERBQVksR0FBRyxXQUFXO0FBQ3JFO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxJQUFJLEdBQUcsSUFBSTtBQUNoRDtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkY6XFx3ZWJcXFN1cnZpdmFsQ0RQXFxzdXJ2aXZhbC5mdW5cXG5vZGVfbW9kdWxlc1xcdmllbVxcX2VzbVxcdXRpbHNcXHJwY1xcc29ja2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvY2tldENsb3NlZEVycm9yLCBUaW1lb3V0RXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvcmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVCYXRjaFNjaGVkdWxlciwgfSBmcm9tICcuLi9wcm9taXNlL2NyZWF0ZUJhdGNoU2NoZWR1bGVyLmpzJztcbmltcG9ydCB7IHdpdGhUaW1lb3V0IH0gZnJvbSAnLi4vcHJvbWlzZS93aXRoVGltZW91dC5qcyc7XG5pbXBvcnQgeyBpZENhY2hlIH0gZnJvbSAnLi9pZC5qcyc7XG5leHBvcnQgY29uc3Qgc29ja2V0Q2xpZW50Q2FjaGUgPSAvKiNfX1BVUkVfXyovIG5ldyBNYXAoKTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTb2NrZXRScGNDbGllbnQocGFyYW1ldGVycykge1xuICAgIGNvbnN0IHsgZ2V0U29ja2V0LCBrZWVwQWxpdmUgPSB0cnVlLCBrZXkgPSAnc29ja2V0JywgcmVjb25uZWN0ID0gdHJ1ZSwgdXJsLCB9ID0gcGFyYW1ldGVycztcbiAgICBjb25zdCB7IGludGVydmFsOiBrZWVwQWxpdmVJbnRlcnZhbCA9IDMwXzAwMCB9ID0gdHlwZW9mIGtlZXBBbGl2ZSA9PT0gJ29iamVjdCcgPyBrZWVwQWxpdmUgOiB7fTtcbiAgICBjb25zdCB7IGF0dGVtcHRzID0gNSwgZGVsYXkgPSAyXzAwMCB9ID0gdHlwZW9mIHJlY29ubmVjdCA9PT0gJ29iamVjdCcgPyByZWNvbm5lY3QgOiB7fTtcbiAgICBsZXQgc29ja2V0Q2xpZW50ID0gc29ja2V0Q2xpZW50Q2FjaGUuZ2V0KGAke2tleX06JHt1cmx9YCk7XG4gICAgLy8gSWYgdGhlIHNvY2tldCBhbHJlYWR5IGV4aXN0cywgcmV0dXJuIGl0LlxuICAgIGlmIChzb2NrZXRDbGllbnQpXG4gICAgICAgIHJldHVybiBzb2NrZXRDbGllbnQ7XG4gICAgbGV0IHJlY29ubmVjdENvdW50ID0gMDtcbiAgICBjb25zdCB7IHNjaGVkdWxlIH0gPSBjcmVhdGVCYXRjaFNjaGVkdWxlcih7XG4gICAgICAgIGlkOiBgJHtrZXl9OiR7dXJsfWAsXG4gICAgICAgIGZuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBTZXQgdXAgYSBjYWNoZSBmb3IgaW5jb21pbmcgXCJzeW5jaHJvbm91c1wiIHJlcXVlc3RzLlxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdHMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAvLyBTZXQgdXAgYSBjYWNoZSBmb3Igc3Vic2NyaXB0aW9ucyAoZXRoX3N1YnNjcmliZSkuXG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICAgICAgbGV0IHNvY2tldDtcbiAgICAgICAgICAgIGxldCBrZWVwQWxpdmVUaW1lcjtcbiAgICAgICAgICAgIC8vIFNldCB1cCBzb2NrZXQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRTb2NrZXQoe1xuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFsbCByZXF1ZXN0cyBhbmQgc3Vic2NyaXB0aW9ucyBvZiB0aGUgY2xvc3VyZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdCBvZiByZXF1ZXN0cy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uRXJyb3I/LihuZXcgU29ja2V0Q2xvc2VkRXJyb3IoeyB1cmwgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2Ygc3Vic2NyaXB0aW9ucy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ub25FcnJvcj8uKG5ldyBTb2NrZXRDbG9zZWRFcnJvcih7IHVybCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBhbGwgcmVxdWVzdHMgYW5kIHN1YnNjcmlwdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbm5lY3QuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb25uZWN0ICYmIHJlY29ubmVjdENvdW50IDwgYXR0ZW1wdHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHVwKCkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvcl87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYWxsIHJlcXVlc3RzIGFuZCBzdWJzY3JpcHRpb25zIG9mIHRoZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdCBvZiByZXF1ZXN0cy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uRXJyb3I/LihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiBzdWJzY3JpcHRpb25zLnZhbHVlcygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5vbkVycm9yPy4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgYWxsIHJlcXVlc3RzIGFuZCBzdWJzY3JpcHRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBzb2NrZXQgaXMgZGVmaW5pdGVseSBjbG9zZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXRDbGllbnQ/LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIHJlY29ubmVjdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3QgJiYgcmVjb25uZWN0Q291bnQgPCBhdHRlbXB0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2V0dXAoKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uT3BlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblJlc3BvbnNlKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzU3Vic2NyaXB0aW9uID0gZGF0YS5tZXRob2QgPT09ICdldGhfc3Vic2NyaXB0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gaXNTdWJzY3JpcHRpb24gPyBkYXRhLnBhcmFtcy5zdWJzY3JpcHRpb24gOiBkYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FjaGUgPSBpc1N1YnNjcmlwdGlvbiA/IHN1YnNjcmlwdGlvbnMgOiByZXF1ZXN0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FjaGUuZ2V0KGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5vblJlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1N1YnNjcmlwdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5kZWxldGUoaWQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNvY2tldCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoa2VlcEFsaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwQWxpdmVUaW1lcilcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoa2VlcEFsaXZlVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVUaW1lciA9IHNldEludGVydmFsKCgpID0+IHNvY2tldC5waW5nPy4oKSwga2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgc2V0dXAoKTtcbiAgICAgICAgICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHNvY2tldCBpbnN0YW5jZS5cbiAgICAgICAgICAgIHNvY2tldENsaWVudCA9IHtcbiAgICAgICAgICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlVGltZXIgJiYgY2xlYXJJbnRlcnZhbChrZWVwQWxpdmVUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXRDbGllbnRDYWNoZS5kZWxldGUoYCR7a2V5fToke3VybH1gKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldCBzb2NrZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHsgYm9keSwgb25FcnJvciwgb25SZXNwb25zZSB9KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiBvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYm9keS5pZCA/PyBpZENhY2hlLnRha2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuaWQgPT09ICdudW1iZXInICYmIGlkICE9PSByZXNwb25zZS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgc3Vic2NyaWJpbmcgdG8gYSB0b3BpYywgd2Ugd2FudCB0byBzZXQgdXAgYSBsaXN0ZW5lciBmb3IgaW5jb21pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkubWV0aG9kID09PSAnZXRoX3N1YnNjcmliZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzcG9uc2UucmVzdWx0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnNldChyZXNwb25zZS5yZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZXNwb25zZTogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgdW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWMsIHdlIHdhbnQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5Lm1ldGhvZCA9PT0gJ2V0aF91bnN1YnNjcmliZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5kZWxldGUoYm9keS5wYXJhbXM/LlswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHMuc2V0KGlkLCB7IG9uUmVzcG9uc2U6IGNhbGxiYWNrLCBvbkVycm9yIH0pO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5ib2R5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I/LihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RBc3luYyh7IGJvZHksIHRpbWVvdXQgPSAxMF8wMDAgfSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2l0aFRpbWVvdXQoKCkgPT4gbmV3IFByb21pc2UoKG9uUmVzcG9uc2UsIG9uRXJyb3IpID0+IHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JJbnN0YW5jZTogbmV3IFRpbWVvdXRFcnJvcih7IGJvZHksIHVybCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdHMsXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyxcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc29ja2V0Q2xpZW50Q2FjaGUuc2V0KGAke2tleX06JHt1cmx9YCwgc29ja2V0Q2xpZW50KTtcbiAgICAgICAgICAgIHJldHVybiBbc29ja2V0Q2xpZW50XTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBbXywgW3NvY2tldENsaWVudF9dXSA9IGF3YWl0IHNjaGVkdWxlKCk7XG4gICAgcmV0dXJuIHNvY2tldENsaWVudF87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2NrZXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/socket.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/webSocket.js":
/*!*******************************************************!*\
  !*** ./node_modules/viem/_esm/utils/rpc/webSocket.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebSocketRpcClient: () => (/* binding */ getWebSocketRpcClient)\n/* harmony export */ });\n/* harmony import */ var _errors_request_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/request.js */ \"(app-pages-browser)/./node_modules/viem/_esm/errors/request.js\");\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socket.js */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/socket.js\");\n\n\nasync function getWebSocketRpcClient(url, options = {}) {\n    const { keepAlive, reconnect } = options;\n    return (0,_socket_js__WEBPACK_IMPORTED_MODULE_0__.getSocketRpcClient)({\n        async getSocket({ onClose, onError, onOpen, onResponse }) {\n            const WebSocket = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_isows__esm_native_js\").then(__webpack_require__.bind(__webpack_require__, /*! isows */ \"(app-pages-browser)/./node_modules/isows/_esm/native.js\")).then((module) => module.WebSocket);\n            const socket = new WebSocket(url);\n            function onClose_() {\n                socket.removeEventListener('close', onClose_);\n                socket.removeEventListener('message', onMessage);\n                socket.removeEventListener('error', onError);\n                socket.removeEventListener('open', onOpen);\n                onClose();\n            }\n            function onMessage({ data }) {\n                try {\n                    const _data = JSON.parse(data);\n                    onResponse(_data);\n                }\n                catch (error) {\n                    onError(error);\n                }\n            }\n            // Setup event listeners for RPC & subscription responses.\n            socket.addEventListener('close', onClose_);\n            socket.addEventListener('message', onMessage);\n            socket.addEventListener('error', onError);\n            socket.addEventListener('open', onOpen);\n            // Wait for the socket to open.\n            if (socket.readyState === WebSocket.CONNECTING) {\n                await new Promise((resolve, reject) => {\n                    if (!socket)\n                        return;\n                    socket.onopen = resolve;\n                    socket.onerror = reject;\n                });\n            }\n            const { close: close_ } = socket;\n            return Object.assign(socket, {\n                close() {\n                    close_.bind(socket)();\n                    onClose_();\n                },\n                ping() {\n                    try {\n                        if (socket.readyState === socket.CLOSED ||\n                            socket.readyState === socket.CLOSING)\n                            throw new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketRequestError({\n                                url: socket.url,\n                                cause: new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.SocketClosedError({ url: socket.url }),\n                            });\n                        const body = {\n                            jsonrpc: '2.0',\n                            method: 'net_version',\n                            params: [],\n                        };\n                        socket.send(JSON.stringify(body));\n                    }\n                    catch (error) {\n                        onError(error);\n                    }\n                },\n                request({ body }) {\n                    if (socket.readyState === socket.CLOSED ||\n                        socket.readyState === socket.CLOSING)\n                        throw new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketRequestError({\n                            body,\n                            url: socket.url,\n                            cause: new _errors_request_js__WEBPACK_IMPORTED_MODULE_1__.SocketClosedError({ url: socket.url }),\n                        });\n                    return socket.send(JSON.stringify(body));\n                },\n            });\n        },\n        keepAlive,\n        reconnect,\n        url,\n    });\n}\n//# sourceMappingURL=webSocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvcnBjL3dlYlNvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Y7QUFDbEM7QUFDM0Msc0RBQXNEO0FBQzdELFlBQVksdUJBQXVCO0FBQ25DLFdBQVcsOERBQWtCO0FBQzdCLDBCQUEwQixzQ0FBc0M7QUFDaEUsb0NBQW9DLHlOQUFlO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsTUFBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxxRUFBcUI7QUFDM0Q7QUFDQSwyQ0FBMkMsaUVBQWlCLEdBQUcsaUJBQWlCO0FBQ2hGLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiwwQkFBMEIsTUFBTTtBQUNoQztBQUNBO0FBQ0Esa0NBQWtDLHFFQUFxQjtBQUN2RDtBQUNBO0FBQ0EsdUNBQXVDLGlFQUFpQixHQUFHLGlCQUFpQjtBQUM1RSx5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiRjpcXHdlYlxcU3Vydml2YWxDRFBcXHN1cnZpdmFsLmZ1blxcbm9kZV9tb2R1bGVzXFx2aWVtXFxfZXNtXFx1dGlsc1xccnBjXFx3ZWJTb2NrZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU29ja2V0Q2xvc2VkRXJyb3IsIFdlYlNvY2tldFJlcXVlc3RFcnJvciwgfSBmcm9tICcuLi8uLi9lcnJvcnMvcmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBnZXRTb2NrZXRScGNDbGllbnQsIH0gZnJvbSAnLi9zb2NrZXQuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdlYlNvY2tldFJwY0NsaWVudCh1cmwsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsga2VlcEFsaXZlLCByZWNvbm5lY3QgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIGdldFNvY2tldFJwY0NsaWVudCh7XG4gICAgICAgIGFzeW5jIGdldFNvY2tldCh7IG9uQ2xvc2UsIG9uRXJyb3IsIG9uT3Blbiwgb25SZXNwb25zZSB9KSB7XG4gICAgICAgICAgICBjb25zdCBXZWJTb2NrZXQgPSBhd2FpdCBpbXBvcnQoJ2lzb3dzJykudGhlbigobW9kdWxlKSA9PiBtb2R1bGUuV2ViU29ja2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uQ2xvc2VfKCkge1xuICAgICAgICAgICAgICAgIHNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbG9zZScsIG9uQ2xvc2VfKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29wZW4nLCBvbk9wZW4pO1xuICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uTWVzc2FnZSh7IGRhdGEgfSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9kYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgb25SZXNwb25zZShfZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXR1cCBldmVudCBsaXN0ZW5lcnMgZm9yIFJQQyAmIHN1YnNjcmlwdGlvbiByZXNwb25zZXMuXG4gICAgICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBvbkNsb3NlXyk7XG4gICAgICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgb25PcGVuKTtcbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSBzb2NrZXQgdG8gb3Blbi5cbiAgICAgICAgICAgIGlmIChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNPTk5FQ1RJTkcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc29ja2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXQub25vcGVuID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGNsb3NlOiBjbG9zZV8gfSA9IHNvY2tldDtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHNvY2tldCwge1xuICAgICAgICAgICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZV8uYmluZChzb2NrZXQpKCk7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2VfKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBzb2NrZXQuQ0xPU0VEIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LnJlYWR5U3RhdGUgPT09IHNvY2tldC5DTE9TSU5HKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBXZWJTb2NrZXRSZXF1ZXN0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvY2tldC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdXNlOiBuZXcgU29ja2V0Q2xvc2VkRXJyb3IoeyB1cmw6IHNvY2tldC51cmwgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ25ldF92ZXJzaW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHsgYm9keSB9KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gc29ja2V0LkNMT1NFRCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LnJlYWR5U3RhdGUgPT09IHNvY2tldC5DTE9TSU5HKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFdlYlNvY2tldFJlcXVlc3RFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvY2tldC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F1c2U6IG5ldyBTb2NrZXRDbG9zZWRFcnJvcih7IHVybDogc29ja2V0LnVybCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAga2VlcEFsaXZlLFxuICAgICAgICByZWNvbm5lY3QsXG4gICAgICAgIHVybCxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYlNvY2tldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/viem/_esm/utils/rpc/webSocket.js\n"));

/***/ })

}]);