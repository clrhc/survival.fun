/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@coinbase";
exports.ids = ["vendor-chunks/@coinbase"];
exports.modules = {

/***/ "(rsc)/./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/getVercelAiTools.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/getVercelAiTools.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Main exports for the CDP Vercel AI SDK package\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getVercelAITools = getVercelAITools;\nconst ai_1 = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.js\");\n/**\n * Get Vercel AI SDK tools from an AgentKit instance\n *\n * @param agentKit - The AgentKit instance\n * @returns An array of Vercel AI SDK tools\n */\nfunction getVercelAITools(agentKit) {\n    const actions = agentKit.getActions();\n    return actions.reduce((acc, action) => {\n        acc[action.name] = (0, ai_1.tool)({\n            description: action.description,\n            parameters: action.schema,\n            execute: async (args) => {\n                const result = await action.invoke(args);\n                return result;\n            },\n        });\n        return acc;\n    }, {});\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0LXZlcmNlbC1haS1zZGsvZGlzdC9nZXRWZXJjZWxBaVRvb2xzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixhQUFhLG1CQUFPLENBQUMsaURBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLEtBQUssSUFBSTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC12ZXJjZWwtYWktc2RrL2Rpc3QvZ2V0VmVyY2VsQWlUb29scy5qcz81NGE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBNYWluIGV4cG9ydHMgZm9yIHRoZSBDRFAgVmVyY2VsIEFJIFNESyBwYWNrYWdlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VmVyY2VsQUlUb29scyA9IGdldFZlcmNlbEFJVG9vbHM7XG5jb25zdCBhaV8xID0gcmVxdWlyZShcImFpXCIpO1xuLyoqXG4gKiBHZXQgVmVyY2VsIEFJIFNESyB0b29scyBmcm9tIGFuIEFnZW50S2l0IGluc3RhbmNlXG4gKlxuICogQHBhcmFtIGFnZW50S2l0IC0gVGhlIEFnZW50S2l0IGluc3RhbmNlXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBWZXJjZWwgQUkgU0RLIHRvb2xzXG4gKi9cbmZ1bmN0aW9uIGdldFZlcmNlbEFJVG9vbHMoYWdlbnRLaXQpIHtcbiAgICBjb25zdCBhY3Rpb25zID0gYWdlbnRLaXQuZ2V0QWN0aW9ucygpO1xuICAgIHJldHVybiBhY3Rpb25zLnJlZHVjZSgoYWNjLCBhY3Rpb24pID0+IHtcbiAgICAgICAgYWNjW2FjdGlvbi5uYW1lXSA9ICgwLCBhaV8xLnRvb2wpKHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBhY3Rpb24uc2NoZW1hLFxuICAgICAgICAgICAgZXhlY3V0ZTogYXN5bmMgKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhY3Rpb24uaW52b2tlKGFyZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/getVercelAiTools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./getVercelAiTools */ \"(rsc)/./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/getVercelAiTools.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0LXZlcmNlbC1haS1zZGsvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMEdBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC12ZXJjZWwtYWktc2RrL2Rpc3QvaW5kZXguanM/YzU3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dldFZlcmNlbEFpVG9vbHNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit-vercel-ai-sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/acrossActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/across/acrossActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AcrossActionProvider_privateKey;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.acrossActionProvider = exports.AcrossActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst network_1 = __webpack_require__(/*! ../../network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/schemas.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/utils.js\");\nconst accounts_1 = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_cjs/accounts/index.js\");\nconst constants_1 = __webpack_require__(/*! ../erc20/constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\");\n/**\n * AcrossActionProvider provides actions for cross-chain bridging via Across Protocol.\n */\nclass AcrossActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the AcrossActionProvider.\n     *\n     * @param config - The configuration options for the AcrossActionProvider.\n     */\n    constructor(config) {\n        super(\"across\", []);\n        _AcrossActionProvider_privateKey.set(this, void 0);\n        /**\n         * Checks if the Across action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Across action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => {\n            // Across only supports EVM-compatible chains\n            return network.protocolFamily === \"evm\";\n        };\n        __classPrivateFieldSet(this, _AcrossActionProvider_privateKey, config.privateKey, \"f\");\n        const account = (0, accounts_1.privateKeyToAccount)(__classPrivateFieldGet(this, _AcrossActionProvider_privateKey, \"f\"));\n        if (!account)\n            throw new Error(\"Invalid private key\");\n    }\n    /**\n     * Bridges a token from one chain to another using Across Protocol.\n     *\n     * @param walletProvider - The wallet provider to use for the transaction.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the bridge details.\n     */\n    async bridgeToken(walletProvider, args) {\n        try {\n            // Use dynamic import to get the Across SDK\n            const acrossModule = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@noble\"), __webpack_require__.e(\"vendor-chunks/ox\"), __webpack_require__.e(\"vendor-chunks/abitype\"), __webpack_require__.e(\"vendor-chunks/@across-protocol\")]).then(__webpack_require__.bind(__webpack_require__, /*! @across-protocol/app-sdk */ \"(rsc)/./node_modules/@across-protocol/app-sdk/dist/index.js\"));\n            const createAcrossClient = acrossModule.createAcrossClient;\n            // Get recipient address if provided, otherwise use sender\n            const address = walletProvider.getAddress();\n            const recipient = (args.recipient || address);\n            // Get origin chain\n            const originChain = (0, network_1.getChain)(walletProvider.getNetwork().chainId);\n            if (!originChain) {\n                throw new Error(`Unsupported origin chain: ${walletProvider.getNetwork()}`);\n            }\n            // Get destination chain\n            const destinationNetworkId = network_1.CHAIN_ID_TO_NETWORK_ID[Number(args.destinationChainId)];\n            const destinationChain = network_1.NETWORK_ID_TO_VIEM_CHAIN[destinationNetworkId];\n            if (!destinationChain) {\n                throw new Error(`Unsupported destination chain: ${args.destinationChainId}`);\n            }\n            // Sanity checks\n            if (originChain.id === destinationChain.id) {\n                throw new Error(\"Origin and destination chains cannot be the same\");\n            }\n            const useTestnet = (0, utils_1.isAcrossSupportedTestnet)(originChain.id);\n            if (useTestnet !== (0, utils_1.isAcrossSupportedTestnet)(destinationChain.id)) {\n                throw new Error(`Cross-chain transfers between ${originChain.name} and ${destinationChain.name} are not supported.\n           Origin and destination chains must either be both testnets or both mainnets.`);\n            }\n            // Create wallet client\n            const account = (0, accounts_1.privateKeyToAccount)(__classPrivateFieldGet(this, _AcrossActionProvider_privateKey, \"f\"));\n            if (account.address !== walletProvider.getAddress()) {\n                throw new Error(\"Private key does not match wallet provider address\");\n            }\n            const walletClient = (0, viem_1.createWalletClient)({\n                account,\n                chain: originChain,\n                transport: (0, viem_1.http)(),\n            });\n            // Create Across client\n            const acrossClient = createAcrossClient({\n                chains: [originChain, destinationChain],\n                useTestnet,\n            });\n            // Get chain details to find token information\n            const chainDetails = await acrossClient.getSupportedChains({});\n            const originChainDetails = chainDetails.find(chain => chain.chainId === originChain.id);\n            if (!originChainDetails) {\n                throw new Error(`Origin chain ${originChain.id} not supported by Across Protocol`);\n            }\n            // Find token by symbol on the origin chain\n            const inputTokens = originChainDetails.inputTokens;\n            if (!inputTokens || inputTokens.length === 0) {\n                throw new Error(`No input tokens available on chain ${originChain.id}`);\n            }\n            const tokenInfo = inputTokens.find(token => token.symbol.toUpperCase() === args.inputTokenSymbol.toUpperCase());\n            if (!tokenInfo) {\n                throw new Error(`Token ${args.inputTokenSymbol} not found on chain ${originChain.id}. Available tokens: ${inputTokens.map(t => t.symbol).join(\", \")}`);\n            }\n            // Get token address and decimals to parse the amount\n            const inputToken = tokenInfo.address;\n            const decimals = tokenInfo.decimals;\n            const inputAmount = (0, viem_1.parseUnits)(args.amount, decimals);\n            // Check balance\n            const isNative = args.inputTokenSymbol.toUpperCase() === \"ETH\";\n            if (isNative) {\n                // Check native ETH balance\n                const ethBalance = await walletProvider.getBalance();\n                if (ethBalance < inputAmount) {\n                    throw new Error(`Insufficient balance. Requested to bridge ${(0, viem_1.formatUnits)(inputAmount, decimals)} ${args.inputTokenSymbol} but balance is only ${(0, viem_1.formatUnits)(ethBalance, decimals)} ${args.inputTokenSymbol}`);\n                }\n            }\n            else {\n                // Check ERC20 token balance\n                const tokenBalance = (await walletProvider.readContract({\n                    address: inputToken,\n                    abi: constants_1.abi,\n                    functionName: \"balanceOf\",\n                    args: [address],\n                }));\n                if (tokenBalance < inputAmount) {\n                    throw new Error(`Insufficient balance. Requested to bridge ${(0, viem_1.formatUnits)(inputAmount, decimals)} ${args.inputTokenSymbol} but balance is only ${(0, viem_1.formatUnits)(tokenBalance, decimals)} ${args.inputTokenSymbol}`);\n                }\n            }\n            // Get available routes\n            const routeInfo = await acrossClient.getAvailableRoutes({\n                originChainId: originChain.id,\n                destinationChainId: destinationChain.id,\n                originToken: inputToken,\n            });\n            // Select the appropriate route for native ETH or ERC20 token\n            const route = routeInfo.find(route => route.isNative === isNative);\n            if (!route) {\n                throw new Error(`No routes available from chain ${originChain.name} to chain ${destinationChain.name} for token ${args.inputTokenSymbol}`);\n            }\n            // Get quote\n            const quote = await acrossClient.getQuote({\n                route,\n                inputAmount,\n                recipient,\n            });\n            // Convert units to readable format\n            const formattedInfo = {\n                minDeposit: (0, viem_1.formatUnits)(quote.limits.minDeposit, decimals),\n                maxDeposit: (0, viem_1.formatUnits)(quote.limits.maxDeposit, decimals),\n                inputAmount: (0, viem_1.formatUnits)(quote.deposit.inputAmount, decimals),\n                outputAmount: (0, viem_1.formatUnits)(quote.deposit.outputAmount, decimals),\n            };\n            // Check if input amount is within valid deposit range\n            if (quote.deposit.inputAmount < quote.limits.minDeposit) {\n                throw new Error(`Input amount ${formattedInfo.inputAmount} ${args.inputTokenSymbol} is below the minimum deposit of ${formattedInfo.minDeposit} ${args.inputTokenSymbol}`);\n            }\n            if (quote.deposit.inputAmount > quote.limits.maxDeposit) {\n                throw new Error(`Input amount ${formattedInfo.inputAmount} ${args.inputTokenSymbol} exceeds the maximum deposit of ${formattedInfo.maxDeposit} ${args.inputTokenSymbol}`);\n            }\n            // Check if output amount is within acceptable slippage limits\n            const actualSlippagePercentage = ((Number(formattedInfo.inputAmount) - Number(formattedInfo.outputAmount)) /\n                Number(formattedInfo.inputAmount)) *\n                100;\n            if (actualSlippagePercentage > args.maxSplippage) {\n                throw new Error(`Output amount has high slippage of ${actualSlippagePercentage.toFixed(2)}%, which exceeds the maximum allowed slippage of ${args.maxSplippage}%. ` +\n                    `Input: ${formattedInfo.inputAmount} ${args.inputTokenSymbol}, Output: ${formattedInfo.outputAmount} ${args.inputTokenSymbol}`);\n            }\n            //Approve ERC20 token if needed\n            let approvalTxHash;\n            if (!isNative) {\n                approvalTxHash = await walletProvider.sendTransaction({\n                    to: inputToken,\n                    data: (0, viem_1.encodeFunctionData)({\n                        abi: constants_1.abi,\n                        functionName: \"approve\",\n                        args: [quote.deposit.spokePoolAddress, quote.deposit.inputAmount],\n                    }),\n                });\n                await walletProvider.waitForTransactionReceipt(approvalTxHash);\n            }\n            // Simulate the deposit transaction\n            const { request } = await acrossClient.simulateDepositTx({\n                walletClient: walletClient,\n                deposit: quote.deposit,\n            });\n            // Execute the deposit transaction\n            const transactionHash = await walletClient.writeContract(request);\n            // Wait for tx to be mined\n            const { depositId } = await acrossClient.waitForDepositTx({\n                transactionHash,\n                originChainId: originChain.id,\n            });\n            return `\nSuccessfully deposited tokens:\n- From: Chain ${originChain.id} (${originChain.name})\n- To: Chain ${destinationChain.id} (${destinationChain.name})\n- Token: ${args.inputTokenSymbol} (${inputToken})\n- Input Amount: ${formattedInfo.inputAmount} ${args.inputTokenSymbol}\n- Output Amount: ${formattedInfo.outputAmount} ${args.inputTokenSymbol}\n- Recipient: ${recipient}\n${!isNative ? `- Transaction Hash for approval: ${approvalTxHash}\\n` : \"\"}\n- Transaction Hash for deposit: ${transactionHash}\n- Deposit ID: ${depositId}\n        `;\n        }\n        catch (error) {\n            return `Error with Across SDK: ${error}`;\n        }\n    }\n    /**\n     * Checks the status of a bridge deposit via Across Protocol.\n     *\n     * @param walletProvider - The wallet provider to use for the transaction.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the deposit status details.\n     */\n    async checkDepositStatus(walletProvider, args) {\n        const originChainId = Number(args.originChainId) || Number(walletProvider.getNetwork().chainId);\n        if ((0, utils_1.isAcrossSupportedTestnet)(originChainId)) {\n            throw new Error(\"Checking deposit status on testnets is currently not supported by the Across API\");\n        }\n        try {\n            const response = await fetch(`https://app.across.to/api/deposit/status?originChainId=${originChainId}&depositId=${args.depositId}`, {\n                method: \"GET\",\n            });\n            if (!response.ok) {\n                throw new Error(`Across API request failed with status ${response.status}`);\n            }\n            const apiData = await response.json();\n            // Get chain names\n            const originChainName = (0, network_1.getChain)(String(apiData.originChainId))?.name || \"Unknown Chain\";\n            const destinationChainName = (0, network_1.getChain)(String(apiData.destinationChainId))?.name || \"Unknown Chain\";\n            // Create structured response\n            const structuredResponse = {\n                status: apiData.status || \"unknown\",\n                depositTxInfo: apiData.depositTxHash\n                    ? {\n                        txHash: apiData.depositTxHash,\n                        chainId: apiData.originChainId,\n                        chainName: originChainName,\n                    }\n                    : null,\n                fillTxInfo: apiData.fillTx\n                    ? {\n                        txHash: apiData.fillTx,\n                        chainId: apiData.destinationChainId,\n                        chainName: destinationChainName,\n                    }\n                    : null,\n                depositRefundTxInfo: apiData.depositRefundTxHash\n                    ? {\n                        txHash: apiData.depositRefundTxHash,\n                        chainId: apiData.originChainId,\n                        chainName: originChainName,\n                    }\n                    : null,\n            };\n            return JSON.stringify(structuredResponse, null, 2);\n        }\n        catch (error) {\n            return `Error checking deposit status: ${error}`;\n        }\n    }\n}\nexports.AcrossActionProvider = AcrossActionProvider;\n_AcrossActionProvider_privateKey = new WeakMap();\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"bridge_token\",\n        description: `\n    This tool will bridge tokens from the current chain to another chain using the Across Protocol.\n\n    It takes the following inputs:\n    - destinationChainId: The chain ID of the destination chain (e.g. 8453 for base-mainnet)\n    - inputTokenSymbol: The symbol of the token to bridge (e.g. 'ETH', 'USDC')\n    - amount: The amount of tokens to bridge in whole units (e.g. 1.5 WETH, 10 USDC)\n    - recipient: (Optional) The recipient address on the destination chain (defaults to sender)\n    - maxSplippage: (Optional) The maximum slippage percentage (defaults to 1.5%)\n\n    Important notes:\n    - Origin chain is the currently connected chain of the wallet provider \n    - Supports cross-chain transfers between EVM-compatible chains for both mainnets and test networks\n    - Testnet deposits are not refunded if not filled on destination chain\n    - Ensure sufficient balance of the input token before bridging\n    - Returns deposit ID that can be used to check the status of the deposit\n    `,\n        schema: schemas_1.BridgeTokenSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AcrossActionProvider.prototype, \"bridgeToken\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"check_deposit_status\",\n        description: `\n    This tool will check the status of a cross-chain bridge deposit on the Across Protocol.\n    \n    It takes the following inputs:\n    - originChainId: The chain ID of the origin chain (defaults to the current chain)\n    - depositId: The ID of the deposit to check (returned by the bridge deposit transaction)\n    `,\n        schema: schemas_1.CheckDepositStatusSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AcrossActionProvider.prototype, \"checkDepositStatus\", null);\nconst acrossActionProvider = (config) => new AcrossActionProvider(config);\nexports.acrossActionProvider = acrossActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/acrossActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/across/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./acrossActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/acrossActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Jvc3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2Fjcm9zcy9pbmRleC5qcz8xZWFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWNyb3NzQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/across/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CheckDepositStatusSchema = exports.BridgeTokenSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for bridge token action.\n */\nexports.BridgeTokenSchema = zod_1.z\n    .object({\n    destinationChainId: zod_1.z\n        .string()\n        .describe(\"The chain ID of the destination chain (e.g. 11155111 for ethereum-sepolia)\"),\n    inputTokenSymbol: zod_1.z\n        .string()\n        .describe(\"The symbol of the token to bridge (e.g., 'ETH', 'WETH', 'USDC')\")\n        .default(\"ETH\"),\n    amount: zod_1.z\n        .string()\n        .describe(\"The amount of tokens to bridge in whole units (e.g. 1.5 WETH, 10 USDC)\"),\n    recipient: zod_1.z\n        .string()\n        .optional()\n        .describe(\"The recipient address on the destination chain (defaults to sender)\"),\n    maxSplippage: zod_1.z\n        .number()\n        .optional()\n        .describe(\"The maximum slippage percentage (e.g. 10 for 10%)\")\n        .default(1.5),\n})\n    .strip()\n    .describe(\"Instructions for bridging tokens across chains using Across Protocol\");\n/**\n * Input schema for check deposit status action.\n */\nexports.CheckDepositStatusSchema = zod_1.z\n    .object({\n    originChainId: zod_1.z\n        .string()\n        .optional()\n        .describe(\"The chain ID of the origin chain (defaults to the current chain)\"),\n    depositId: zod_1.z\n        .string()\n        .describe(\"The ID of the deposit to check (returned by the bridge deposit transaction)\"),\n})\n    .strip()\n    .describe(\"Instructions for checking the status of a deposit on Across Protocol\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Jvc3Mvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyx5QkFBeUI7QUFDNUQsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYWNyb3NzL3NjaGVtYXMuanM/ZWNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hlY2tEZXBvc2l0U3RhdHVzU2NoZW1hID0gZXhwb3J0cy5CcmlkZ2VUb2tlblNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBicmlkZ2UgdG9rZW4gYWN0aW9uLlxuICovXG5leHBvcnRzLkJyaWRnZVRva2VuU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGRlc3RpbmF0aW9uQ2hhaW5JZDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGNoYWluIElEIG9mIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiAoZS5nLiAxMTE1NTExMSBmb3IgZXRoZXJldW0tc2Vwb2xpYSlcIiksXG4gICAgaW5wdXRUb2tlblN5bWJvbDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIHN5bWJvbCBvZiB0aGUgdG9rZW4gdG8gYnJpZGdlIChlLmcuLCAnRVRIJywgJ1dFVEgnLCAnVVNEQycpXCIpXG4gICAgICAgIC5kZWZhdWx0KFwiRVRIXCIpLFxuICAgIGFtb3VudDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYnJpZGdlIGluIHdob2xlIHVuaXRzIChlLmcuIDEuNSBXRVRILCAxMCBVU0RDKVwiKSxcbiAgICByZWNpcGllbnQ6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSByZWNpcGllbnQgYWRkcmVzcyBvbiB0aGUgZGVzdGluYXRpb24gY2hhaW4gKGRlZmF1bHRzIHRvIHNlbmRlcilcIiksXG4gICAgbWF4U3BsaXBwYWdlOiB6b2RfMS56XG4gICAgICAgIC5udW1iZXIoKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgbWF4aW11bSBzbGlwcGFnZSBwZXJjZW50YWdlIChlLmcuIDEwIGZvciAxMCUpXCIpXG4gICAgICAgIC5kZWZhdWx0KDEuNSksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciBicmlkZ2luZyB0b2tlbnMgYWNyb3NzIGNoYWlucyB1c2luZyBBY3Jvc3MgUHJvdG9jb2xcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgY2hlY2sgZGVwb3NpdCBzdGF0dXMgYWN0aW9uLlxuICovXG5leHBvcnRzLkNoZWNrRGVwb3NpdFN0YXR1c1NjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBvcmlnaW5DaGFpbklkOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgY2hhaW4gSUQgb2YgdGhlIG9yaWdpbiBjaGFpbiAoZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgY2hhaW4pXCIpLFxuICAgIGRlcG9zaXRJZDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIElEIG9mIHRoZSBkZXBvc2l0IHRvIGNoZWNrIChyZXR1cm5lZCBieSB0aGUgYnJpZGdlIGRlcG9zaXQgdHJhbnNhY3Rpb24pXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgY2hlY2tpbmcgdGhlIHN0YXR1cyBvZiBhIGRlcG9zaXQgb24gQWNyb3NzIFByb3RvY29sXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/across/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isAcrossSupportedTestnet = isAcrossSupportedTestnet;\n/**\n * Checks if a chain ID corresponds to a testnet network supported by Across\n *\n * @param chainId - The blockchain network chain ID\n * @returns true if the chain ID corresponds to a testnet network supported by Across, false otherwise\n */\nfunction isAcrossSupportedTestnet(chainId) {\n    // List of testnet chain IDs\n    const testnetChainIds = [\n        11155111, // Sepolia\n        84532, // Base Sepolia\n        421614, // Arbitrum Sepolia\n        11155420, // Optimism Sepolia\n        919, // Mode Sepolia\n        80002, // Polygon Amoy\n        168587773, // Blast Sepolia\n        4202, // Lisk Sepolia\n        37111, // Lens Sepolia\n        1301, // Unichain Sepolia\n    ];\n    return testnetChainIds.includes(chainId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Jvc3MvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYWNyb3NzL3V0aWxzLmpzP2M3YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQWNyb3NzU3VwcG9ydGVkVGVzdG5ldCA9IGlzQWNyb3NzU3VwcG9ydGVkVGVzdG5ldDtcbi8qKlxuICogQ2hlY2tzIGlmIGEgY2hhaW4gSUQgY29ycmVzcG9uZHMgdG8gYSB0ZXN0bmV0IG5ldHdvcmsgc3VwcG9ydGVkIGJ5IEFjcm9zc1xuICpcbiAqIEBwYXJhbSBjaGFpbklkIC0gVGhlIGJsb2NrY2hhaW4gbmV0d29yayBjaGFpbiBJRFxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgY2hhaW4gSUQgY29ycmVzcG9uZHMgdG8gYSB0ZXN0bmV0IG5ldHdvcmsgc3VwcG9ydGVkIGJ5IEFjcm9zcywgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGlzQWNyb3NzU3VwcG9ydGVkVGVzdG5ldChjaGFpbklkKSB7XG4gICAgLy8gTGlzdCBvZiB0ZXN0bmV0IGNoYWluIElEc1xuICAgIGNvbnN0IHRlc3RuZXRDaGFpbklkcyA9IFtcbiAgICAgICAgMTExNTUxMTEsIC8vIFNlcG9saWFcbiAgICAgICAgODQ1MzIsIC8vIEJhc2UgU2Vwb2xpYVxuICAgICAgICA0MjE2MTQsIC8vIEFyYml0cnVtIFNlcG9saWFcbiAgICAgICAgMTExNTU0MjAsIC8vIE9wdGltaXNtIFNlcG9saWFcbiAgICAgICAgOTE5LCAvLyBNb2RlIFNlcG9saWFcbiAgICAgICAgODAwMDIsIC8vIFBvbHlnb24gQW1veVxuICAgICAgICAxNjg1ODc3NzMsIC8vIEJsYXN0IFNlcG9saWFcbiAgICAgICAgNDIwMiwgLy8gTGlzayBTZXBvbGlhXG4gICAgICAgIDM3MTExLCAvLyBMZW5zIFNlcG9saWFcbiAgICAgICAgMTMwMSwgLy8gVW5pY2hhaW4gU2Vwb2xpYVxuICAgIF07XG4gICAgcmV0dXJuIHRlc3RuZXRDaGFpbklkcy5pbmNsdWRlcyhjaGFpbklkKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ACTION_DECORATOR_KEY = void 0;\nexports.CreateAction = CreateAction;\nconst wallet_providers_1 = __webpack_require__(/*! ../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst analytics_1 = __webpack_require__(/*! ../analytics */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/index.js\");\n__webpack_require__(/*! reflect-metadata */ \"(rsc)/./node_modules/reflect-metadata/Reflect.js\");\n/**\n * Metadata key for the action decorator\n */\nexports.ACTION_DECORATOR_KEY = Symbol(\"agentkit:action\");\n/**\n * Decorator to embed metadata on class methods to indicate they are actions accessible to the agent\n *\n * @param params - The parameters for the action decorator\n * @returns A decorator function\n *\n * @example\n * ```typescript\n * class MyActionProvider extends ActionProvider {\n *   @CreateAction({ name: \"my_action\", description: \"My action\", schema: myActionSchema })\n *   public myAction(args: z.infer<typeof myActionSchema>) {\n *     // ...\n *   }\n * }\n * ```\n */\nfunction CreateAction(params) {\n    return (target, propertyKey, descriptor) => {\n        const prefixedActionName = `${target.constructor.name}_${params.name}`;\n        const originalMethod = descriptor.value;\n        const { isWalletProvider } = validateActionMethodArguments(target, propertyKey);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        descriptor.value = function (...args) {\n            let walletMetrics = {};\n            if (isWalletProvider) {\n                walletMetrics = {\n                    wallet_provider: args[0].getName(),\n                    wallet_address: args[0].getAddress(),\n                    network_id: args[0].getNetwork().networkId,\n                    chain_id: args[0].getNetwork().chainId,\n                    protocol_family: args[0].getNetwork().protocolFamily,\n                };\n            }\n            (0, analytics_1.sendAnalyticsEvent)({\n                name: \"agent_action_invocation\",\n                action: \"invoke_action\",\n                component: \"agent_action\",\n                action_name: prefixedActionName,\n                class_name: target.constructor.name,\n                method_name: propertyKey,\n                ...walletMetrics,\n            });\n            return originalMethod.apply(this, args);\n        };\n        const existingMetadata = Reflect.getMetadata(exports.ACTION_DECORATOR_KEY, target.constructor) || new Map();\n        const metaData = {\n            name: prefixedActionName,\n            description: params.description,\n            schema: params.schema,\n            invoke: descriptor.value,\n            walletProvider: isWalletProvider,\n        };\n        existingMetadata.set(propertyKey, metaData);\n        Reflect.defineMetadata(exports.ACTION_DECORATOR_KEY, existingMetadata, target.constructor);\n        return target;\n    };\n}\n/**\n * Validates the arguments of an action method\n *\n * @param target - The target object\n * @param propertyKey - The property key\n * @returns An object containing the wallet provider flag\n */\nfunction validateActionMethodArguments(target, propertyKey) {\n    const className = target instanceof Object ? target.constructor.name : undefined;\n    const params = Reflect.getMetadata(\"design:paramtypes\", target, propertyKey);\n    if (params == null) {\n        throw new Error(`Failed to get parameters for action method ${propertyKey} on class ${className}`);\n    }\n    if (params.length > 2) {\n        throw new Error(`Action method ${propertyKey} on class ${className} has more than 2 parameters`);\n    }\n    const walletProviderParam = params.find(param => {\n        if (!param || !param.prototype) {\n            return false;\n        }\n        if (param === wallet_providers_1.WalletProvider)\n            return true;\n        return param.prototype instanceof wallet_providers_1.WalletProvider;\n    });\n    return {\n        isWalletProvider: !!walletProviderParam,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Rpb25EZWNvcmF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLG9CQUFvQjtBQUNwQiwyQkFBMkIsbUJBQU8sQ0FBQyxtR0FBcUI7QUFDeEQsb0JBQW9CLG1CQUFPLENBQUMscUZBQWM7QUFDMUMsbUJBQU8sQ0FBQywwRUFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxRUFBcUU7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx3QkFBd0IsR0FBRyxZQUFZO0FBQzdFO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsYUFBYSxXQUFXLFVBQVU7QUFDeEc7QUFDQTtBQUNBLHlDQUF5QyxhQUFhLFdBQVcsV0FBVztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYWN0aW9uRGVjb3JhdG9yLmpzPzUyY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFDVElPTl9ERUNPUkFUT1JfS0VZID0gdm9pZCAwO1xuZXhwb3J0cy5DcmVhdGVBY3Rpb24gPSBDcmVhdGVBY3Rpb247XG5jb25zdCB3YWxsZXRfcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vd2FsbGV0LXByb3ZpZGVyc1wiKTtcbmNvbnN0IGFuYWx5dGljc18xID0gcmVxdWlyZShcIi4uL2FuYWx5dGljc1wiKTtcbnJlcXVpcmUoXCJyZWZsZWN0LW1ldGFkYXRhXCIpO1xuLyoqXG4gKiBNZXRhZGF0YSBrZXkgZm9yIHRoZSBhY3Rpb24gZGVjb3JhdG9yXG4gKi9cbmV4cG9ydHMuQUNUSU9OX0RFQ09SQVRPUl9LRVkgPSBTeW1ib2woXCJhZ2VudGtpdDphY3Rpb25cIik7XG4vKipcbiAqIERlY29yYXRvciB0byBlbWJlZCBtZXRhZGF0YSBvbiBjbGFzcyBtZXRob2RzIHRvIGluZGljYXRlIHRoZXkgYXJlIGFjdGlvbnMgYWNjZXNzaWJsZSB0byB0aGUgYWdlbnRcbiAqXG4gKiBAcGFyYW0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBhY3Rpb24gZGVjb3JhdG9yXG4gKiBAcmV0dXJucyBBIGRlY29yYXRvciBmdW5jdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjbGFzcyBNeUFjdGlvblByb3ZpZGVyIGV4dGVuZHMgQWN0aW9uUHJvdmlkZXIge1xuICogICBAQ3JlYXRlQWN0aW9uKHsgbmFtZTogXCJteV9hY3Rpb25cIiwgZGVzY3JpcHRpb246IFwiTXkgYWN0aW9uXCIsIHNjaGVtYTogbXlBY3Rpb25TY2hlbWEgfSlcbiAqICAgcHVibGljIG15QWN0aW9uKGFyZ3M6IHouaW5mZXI8dHlwZW9mIG15QWN0aW9uU2NoZW1hPikge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gQ3JlYXRlQWN0aW9uKHBhcmFtcykge1xuICAgIHJldHVybiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikgPT4ge1xuICAgICAgICBjb25zdCBwcmVmaXhlZEFjdGlvbk5hbWUgPSBgJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX1fJHtwYXJhbXMubmFtZX1gO1xuICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGNvbnN0IHsgaXNXYWxsZXRQcm92aWRlciB9ID0gdmFsaWRhdGVBY3Rpb25NZXRob2RBcmd1bWVudHModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgbGV0IHdhbGxldE1ldHJpY3MgPSB7fTtcbiAgICAgICAgICAgIGlmIChpc1dhbGxldFByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgd2FsbGV0TWV0cmljcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2FsbGV0X3Byb3ZpZGVyOiBhcmdzWzBdLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgd2FsbGV0X2FkZHJlc3M6IGFyZ3NbMF0uZ2V0QWRkcmVzcygpLFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrX2lkOiBhcmdzWzBdLmdldE5ldHdvcmsoKS5uZXR3b3JrSWQsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluX2lkOiBhcmdzWzBdLmdldE5ldHdvcmsoKS5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbF9mYW1pbHk6IGFyZ3NbMF0uZ2V0TmV0d29yaygpLnByb3RvY29sRmFtaWx5LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgYW5hbHl0aWNzXzEuc2VuZEFuYWx5dGljc0V2ZW50KSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJhZ2VudF9hY3Rpb25faW52b2NhdGlvblwiLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpbnZva2VfYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBcImFnZW50X2FjdGlvblwiLFxuICAgICAgICAgICAgICAgIGFjdGlvbl9uYW1lOiBwcmVmaXhlZEFjdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgY2xhc3NfbmFtZTogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgbWV0aG9kX25hbWU6IHByb3BlcnR5S2V5LFxuICAgICAgICAgICAgICAgIC4uLndhbGxldE1ldHJpY3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdNZXRhZGF0YSA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoZXhwb3J0cy5BQ1RJT05fREVDT1JBVE9SX0tFWSwgdGFyZ2V0LmNvbnN0cnVjdG9yKSB8fCBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IG1ldGFEYXRhID0ge1xuICAgICAgICAgICAgbmFtZTogcHJlZml4ZWRBY3Rpb25OYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHBhcmFtcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHNjaGVtYTogcGFyYW1zLnNjaGVtYSxcbiAgICAgICAgICAgIGludm9rZTogZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAgICAgIHdhbGxldFByb3ZpZGVyOiBpc1dhbGxldFByb3ZpZGVyLFxuICAgICAgICB9O1xuICAgICAgICBleGlzdGluZ01ldGFkYXRhLnNldChwcm9wZXJ0eUtleSwgbWV0YURhdGEpO1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGV4cG9ydHMuQUNUSU9OX0RFQ09SQVRPUl9LRVksIGV4aXN0aW5nTWV0YWRhdGEsIHRhcmdldC5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbn1cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBhcmd1bWVudHMgb2YgYW4gYWN0aW9uIG1ldGhvZFxuICpcbiAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIHByb3BlcnR5S2V5IC0gVGhlIHByb3BlcnR5IGtleVxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHdhbGxldCBwcm92aWRlciBmbGFnXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQWN0aW9uTWV0aG9kQXJndW1lbnRzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0YXJnZXQgaW5zdGFuY2VvZiBPYmplY3QgPyB0YXJnZXQuY29uc3RydWN0b3IubmFtZSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwYXJhbXMgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCBwYXJhbWV0ZXJzIGZvciBhY3Rpb24gbWV0aG9kICR7cHJvcGVydHlLZXl9IG9uIGNsYXNzICR7Y2xhc3NOYW1lfWApO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBY3Rpb24gbWV0aG9kICR7cHJvcGVydHlLZXl9IG9uIGNsYXNzICR7Y2xhc3NOYW1lfSBoYXMgbW9yZSB0aGFuIDIgcGFyYW1ldGVyc2ApO1xuICAgIH1cbiAgICBjb25zdCB3YWxsZXRQcm92aWRlclBhcmFtID0gcGFyYW1zLmZpbmQocGFyYW0gPT4ge1xuICAgICAgICBpZiAoIXBhcmFtIHx8ICFwYXJhbS5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW0gPT09IHdhbGxldF9wcm92aWRlcnNfMS5XYWxsZXRQcm92aWRlcilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gcGFyYW0ucHJvdG90eXBlIGluc3RhbmNlb2Ygd2FsbGV0X3Byb3ZpZGVyc18xLldhbGxldFByb3ZpZGVyO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzV2FsbGV0UHJvdmlkZXI6ICEhd2FsbGV0UHJvdmlkZXJQYXJhbSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ActionProvider = void 0;\nconst actionDecorator_1 = __webpack_require__(/*! ./actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\n/**\n * ActionProvider is the abstract base class for all action providers.\n *\n * @abstract\n */\nclass ActionProvider {\n    /**\n     * The constructor for the action provider.\n     *\n     * @param name - The name of the action provider.\n     * @param actionProviders - The action providers to combine.\n     */\n    constructor(name, \n    // Update parameter type to match property type\n    actionProviders) {\n        this.name = name;\n        this.actionProviders = actionProviders;\n    }\n    /**\n     * Gets the actions of the action provider bound to the given wallet provider.\n     *\n     * @param walletProvider - The wallet provider.\n     * @returns The actions of the action provider.\n     */\n    getActions(walletProvider) {\n        const actions = [];\n        const actionProviders = [this, ...this.actionProviders];\n        for (const actionProvider of actionProviders) {\n            const actionsMetadataMap = Reflect.getMetadata(actionDecorator_1.ACTION_DECORATOR_KEY, actionProvider.constructor);\n            if (!actionsMetadataMap) {\n                if (!(actionProvider instanceof ActionProvider)) {\n                    console.warn(`Warning: ${actionProvider} is not an instance of ActionProvider.`);\n                }\n                else {\n                    console.warn(`Warning: ${actionProvider} has no actions.`);\n                }\n                continue;\n            }\n            for (const actionMetadata of actionsMetadataMap.values()) {\n                actions.push({\n                    name: actionMetadata.name,\n                    description: actionMetadata.description,\n                    schema: actionMetadata.schema,\n                    invoke: schemaArgs => {\n                        const args = [];\n                        if (actionMetadata.walletProvider) {\n                            args[0] = walletProvider;\n                        }\n                        args.push(schemaArgs);\n                        return actionMetadata.invoke.apply(actionProvider, args);\n                    },\n                });\n            }\n        }\n        return actions;\n    }\n}\nexports.ActionProvider = ActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Rpb25Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsMEJBQTBCLG1CQUFPLENBQUMsMkdBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBO0FBQ0EsNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hY3Rpb25Qcm92aWRlci5qcz8zNzFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BY3Rpb25Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGFjdGlvbkRlY29yYXRvcl8xID0gcmVxdWlyZShcIi4vYWN0aW9uRGVjb3JhdG9yXCIpO1xuLyoqXG4gKiBBY3Rpb25Qcm92aWRlciBpcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIGFjdGlvbiBwcm92aWRlcnMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIEFjdGlvblByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBhY3Rpb24gcHJvdmlkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhY3Rpb24gcHJvdmlkZXIuXG4gICAgICogQHBhcmFtIGFjdGlvblByb3ZpZGVycyAtIFRoZSBhY3Rpb24gcHJvdmlkZXJzIHRvIGNvbWJpbmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgXG4gICAgLy8gVXBkYXRlIHBhcmFtZXRlciB0eXBlIHRvIG1hdGNoIHByb3BlcnR5IHR5cGVcbiAgICBhY3Rpb25Qcm92aWRlcnMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5hY3Rpb25Qcm92aWRlcnMgPSBhY3Rpb25Qcm92aWRlcnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFjdGlvbnMgb2YgdGhlIGFjdGlvbiBwcm92aWRlciBib3VuZCB0byB0aGUgZ2l2ZW4gd2FsbGV0IHByb3ZpZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHdhbGxldFByb3ZpZGVyIC0gVGhlIHdhbGxldCBwcm92aWRlci5cbiAgICAgKiBAcmV0dXJucyBUaGUgYWN0aW9ucyBvZiB0aGUgYWN0aW9uIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGdldEFjdGlvbnMod2FsbGV0UHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBhY3Rpb25Qcm92aWRlcnMgPSBbdGhpcywgLi4udGhpcy5hY3Rpb25Qcm92aWRlcnNdO1xuICAgICAgICBmb3IgKGNvbnN0IGFjdGlvblByb3ZpZGVyIG9mIGFjdGlvblByb3ZpZGVycykge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uc01ldGFkYXRhTWFwID0gUmVmbGVjdC5nZXRNZXRhZGF0YShhY3Rpb25EZWNvcmF0b3JfMS5BQ1RJT05fREVDT1JBVE9SX0tFWSwgYWN0aW9uUHJvdmlkZXIuY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgaWYgKCFhY3Rpb25zTWV0YWRhdGFNYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhY3Rpb25Qcm92aWRlciBpbnN0YW5jZW9mIEFjdGlvblByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFdhcm5pbmc6ICR7YWN0aW9uUHJvdmlkZXJ9IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBBY3Rpb25Qcm92aWRlci5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgV2FybmluZzogJHthY3Rpb25Qcm92aWRlcn0gaGFzIG5vIGFjdGlvbnMuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBhY3Rpb25NZXRhZGF0YSBvZiBhY3Rpb25zTWV0YWRhdGFNYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBhY3Rpb25NZXRhZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYWN0aW9uTWV0YWRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYTogYWN0aW9uTWV0YWRhdGEuc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICBpbnZva2U6IHNjaGVtYUFyZ3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbk1ldGFkYXRhLndhbGxldFByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1swXSA9IHdhbGxldFByb3ZpZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHNjaGVtYUFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbk1ldGFkYXRhLmludm9rZS5hcHBseShhY3Rpb25Qcm92aWRlciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0cy5BY3Rpb25Qcm92aWRlciA9IEFjdGlvblByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/alchemyTokenPricesActionProvider.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/alchemyTokenPricesActionProvider.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.alchemyTokenPricesActionProvider = exports.AlchemyTokenPricesActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/schemas.js\");\n/**\n * AlchemyTokenPricesActionProvider is an action provider for fetching token prices via the Alchemy Prices API.\n * This provider enables querying current and historical token prices using symbols or addresses.\n *\n */\nclass AlchemyTokenPricesActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Creates a new instance of AlchemyTokenPricesActionProvider\n     *\n     * @param config - Configuration options including the API key\n     */\n    constructor(config = {}) {\n        super(\"alchemyTokenPrices\", []);\n        /**\n         * Checks if the Alchemy Prices action provider supports the given network.\n         * Since the API works with multiple networks, this always returns true.\n         *\n         * @returns Always returns true.\n         */\n        this.supportsNetwork = () => {\n            return true;\n        };\n        config.apiKey || (config.apiKey = process.env.ALCHEMY_API_KEY);\n        if (!config.apiKey) {\n            throw new Error(\"ALCHEMY_API_KEY is not configured.\");\n        }\n        this.apiKey = config.apiKey;\n        this.baseUrl = \"https://api.g.alchemy.com/prices/v1\";\n    }\n    /**\n     * Fetch current token prices for one or more token symbols.\n     *\n     * @param args - The arguments containing an array of token symbols.\n     * @returns A JSON string with the token prices or an error message.\n     */\n    async tokenPricesBySymbol(args) {\n        try {\n            // Build query parameters: for each symbol add a separate query parameter\n            const params = new URLSearchParams();\n            for (const symbol of args.symbols) {\n                params.append(\"symbols\", symbol);\n            }\n            const url = `${this.baseUrl}/${this.apiKey}/tokens/by-symbol?${params.toString()}`;\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return `Successfully fetched token prices by symbol:\\n${JSON.stringify(data, null, 2)}`;\n        }\n        catch (error) {\n            return `Error fetching token prices by symbol: ${error}`;\n        }\n    }\n    /**\n     * Fetch current token prices for one or more tokens identified by network and address pairs.\n     *\n     * @param args - The arguments containing an array of token network/address pairs.\n     * @returns A JSON string with the token prices or an error message.\n     */\n    async tokenPricesByAddress(args) {\n        try {\n            const url = `${this.baseUrl}/${this.apiKey}/tokens/by-address`;\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(args),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return `Successfully fetched token prices by address:\\n${JSON.stringify(data, null, 2)}`;\n        }\n        catch (error) {\n            return `Error fetching token prices by address: ${error}`;\n        }\n    }\n}\nexports.AlchemyTokenPricesActionProvider = AlchemyTokenPricesActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"token_prices_by_symbol\",\n        description: `\nThis tool will fetch current prices for one or more tokens using their symbols via the Alchemy Prices API.\n\nA successful response will return a JSON payload similar to:\n{\n  \"data\": [\n    {\n      \"symbol\": \"ETH\",\n      \"prices\": [\n        {\n          \"currency\": \"usd\",\n          \"value\": \"2873.490923459\",\n          \"lastUpdatedAt\": \"2025-02-03T23:46:40Z\"\n        }\n      ]\n    }\n  ]\n}\n\nA failure response will return an error message with details.\n    `,\n        schema: schemas_1.AlchemyTokenPricesBySymbolSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AlchemyTokenPricesActionProvider.prototype, \"tokenPricesBySymbol\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"token_prices_by_address\",\n        description: `\nThis tool will fetch current prices for tokens using network and address pairs via the Alchemy Prices API.\n\nA successful response will return a JSON payload similar to:\n{\n  \"data\": [\n    {\n      \"network\": \"eth-mainnet\",\n      \"address\": \"0xYourTokenAddress\",\n      \"prices\": [\n        {\n          \"currency\": \"usd\",\n          \"value\": \"1234.56\",\n          \"lastUpdatedAt\": \"2025-02-03T23:46:40Z\"\n        }\n      ]\n    }\n  ]\n}\n\nA failure response will return an error message with details.\n    `,\n        schema: schemas_1.AlchemyTokenPricesByAddressSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AlchemyTokenPricesActionProvider.prototype, \"tokenPricesByAddress\", null);\n/**\n * Factory function to create a new AlchemyTokenPricesActionProvider instance.\n *\n * @param config - The configuration options for the provider.\n * @returns A new instance of AlchemyTokenPricesActionProvider.\n */\nconst alchemyTokenPricesActionProvider = (config) => new AlchemyTokenPricesActionProvider(config);\nexports.alchemyTokenPricesActionProvider = alchemyTokenPricesActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/alchemyTokenPricesActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./alchemyTokenPricesActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/alchemyTokenPricesActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGNoZW15L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxxSkFBb0M7QUFDekQsYUFBYSxtQkFBTyxDQUFDLG1HQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYWxjaGVteS9pbmRleC5qcz8yODY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWxjaGVteVRva2VuUHJpY2VzQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYXNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlchemyTokenPricesByAddressSchema = exports.AlchemyTokenPricesBySymbolSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for fetching token prices by symbol.\n *\n * The API expects a list of token symbols.\n */\nexports.AlchemyTokenPricesBySymbolSchema = zod_1.z\n    .object({\n    symbols: zod_1.z\n        .array(zod_1.z.string())\n        .min(1, \"At least one token symbol is required. Example: ETH, BTC, SOL, etc.\")\n        .max(25, \"A maximum of 25 token symbols can be provided.\"),\n})\n    .describe(\"Input schema for fetching token prices by symbol from Alchemy\");\n/**\n * Input schema for fetching token prices by address.\n *\n * The API expects an object with an array of addresses, where each address contains\n * a network identifier and a token contract address.\n */\nexports.AlchemyTokenPricesByAddressSchema = zod_1.z\n    .object({\n    addresses: zod_1.z\n        .array(zod_1.z.object({\n        network: zod_1.z.string().describe(\"Network identifier (e.g., eth-mainnet, base-mainnet etc.)\"),\n        address: zod_1.z.string().describe(\"Token contract address\"),\n    }))\n        .min(1, \"At least one address is required.\")\n        .max(25, \"A maximum of 25 addresses can be provided.\"),\n})\n    .describe(\"Input schema for fetching token prices by address from Alchemy\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGNoZW15L3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUNBQXlDLEdBQUcsd0NBQXdDO0FBQ3BGLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYWxjaGVteS9zY2hlbWFzLmpzPzIzMTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFsY2hlbXlUb2tlblByaWNlc0J5QWRkcmVzc1NjaGVtYSA9IGV4cG9ydHMuQWxjaGVteVRva2VuUHJpY2VzQnlTeW1ib2xTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgZmV0Y2hpbmcgdG9rZW4gcHJpY2VzIGJ5IHN5bWJvbC5cbiAqXG4gKiBUaGUgQVBJIGV4cGVjdHMgYSBsaXN0IG9mIHRva2VuIHN5bWJvbHMuXG4gKi9cbmV4cG9ydHMuQWxjaGVteVRva2VuUHJpY2VzQnlTeW1ib2xTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgc3ltYm9sczogem9kXzEuelxuICAgICAgICAuYXJyYXkoem9kXzEuei5zdHJpbmcoKSlcbiAgICAgICAgLm1pbigxLCBcIkF0IGxlYXN0IG9uZSB0b2tlbiBzeW1ib2wgaXMgcmVxdWlyZWQuIEV4YW1wbGU6IEVUSCwgQlRDLCBTT0wsIGV0Yy5cIilcbiAgICAgICAgLm1heCgyNSwgXCJBIG1heGltdW0gb2YgMjUgdG9rZW4gc3ltYm9scyBjYW4gYmUgcHJvdmlkZWQuXCIpLFxufSlcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIGZldGNoaW5nIHRva2VuIHByaWNlcyBieSBzeW1ib2wgZnJvbSBBbGNoZW15XCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGZldGNoaW5nIHRva2VuIHByaWNlcyBieSBhZGRyZXNzLlxuICpcbiAqIFRoZSBBUEkgZXhwZWN0cyBhbiBvYmplY3Qgd2l0aCBhbiBhcnJheSBvZiBhZGRyZXNzZXMsIHdoZXJlIGVhY2ggYWRkcmVzcyBjb250YWluc1xuICogYSBuZXR3b3JrIGlkZW50aWZpZXIgYW5kIGEgdG9rZW4gY29udHJhY3QgYWRkcmVzcy5cbiAqL1xuZXhwb3J0cy5BbGNoZW15VG9rZW5QcmljZXNCeUFkZHJlc3NTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYWRkcmVzc2VzOiB6b2RfMS56XG4gICAgICAgIC5hcnJheSh6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIG5ldHdvcms6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJOZXR3b3JrIGlkZW50aWZpZXIgKGUuZy4sIGV0aC1tYWlubmV0LCBiYXNlLW1haW5uZXQgZXRjLilcIiksXG4gICAgICAgIGFkZHJlc3M6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUb2tlbiBjb250cmFjdCBhZGRyZXNzXCIpLFxuICAgIH0pKVxuICAgICAgICAubWluKDEsIFwiQXQgbGVhc3Qgb25lIGFkZHJlc3MgaXMgcmVxdWlyZWQuXCIpXG4gICAgICAgIC5tYXgoMjUsIFwiQSBtYXhpbXVtIG9mIDI1IGFkZHJlc3NlcyBjYW4gYmUgcHJvdmlkZWQuXCIpLFxufSlcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIGZldGNoaW5nIHRva2VuIHByaWNlcyBieSBhZGRyZXNzIGZyb20gQWxjaGVteVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/alloraActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/allora/alloraActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.alloraActionProvider = exports.AlloraActionProvider = void 0;\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst allora_sdk_1 = __webpack_require__(/*! @alloralabs/allora-sdk */ \"(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/schemas.js\");\n/**\n * Action provider for interacting with Allora Network\n */\nclass AlloraActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Creates an instance of AlloraActionProvider\n     *\n     * @param config - Configuration for the Allora API client including API key and optional chain slug\n     */\n    constructor(config = {}) {\n        super(\"allora\", []);\n        // This is a public, development only key and should be used for testing purposes only.\n        // It might be changed or revoked in the future. It is also subject to limits and usage policies.\n        const DEFAULT_API_KEY = \"UP-4151d0cc489a44a7aa5cd7ef\";\n        config.apiKey = config.apiKey || DEFAULT_API_KEY;\n        config.chainSlug = config.chainSlug || allora_sdk_1.ChainSlug.TESTNET;\n        this.client = new allora_sdk_1.AlloraAPIClient(config);\n    }\n    /**\n     * Gets all available topics from Allora Network\n     *\n     * @param _ - Empty object as no parameters are required\n     * @returns A string containing the list of topics in JSON format\n     */\n    async getAllTopics(_) {\n        try {\n            const topics = await this.client.getAllTopics();\n            const topicsJson = JSON.stringify(topics);\n            return `The available topics at Allora Network are:\\n ${topicsJson}`;\n        }\n        catch (error) {\n            return `Error getting all topics: ${error}`;\n        }\n    }\n    /**\n     * Gets inference data for a specific topic from Allora Network\n     *\n     * @param args - Object containing the topic ID to get inference for\n     * @returns A string containing the inference data in JSON format\n     */\n    async getInferenceByTopicId(args) {\n        try {\n            const inference = await this.client.getInferenceByTopicID(args.topicId);\n            const inferenceJson = JSON.stringify(inference.inference_data);\n            return `The inference for topic ${args.topicId} is:\\n ${inferenceJson}`;\n        }\n        catch (error) {\n            return `Error getting inference for topic ${args.topicId}: ${error}`;\n        }\n    }\n    /**\n     * Gets price inference for a token/timeframe pair from Allora Network\n     *\n     * @param args - Object containing the asset symbol and timeframe\n     * @returns A string containing the price inference data in JSON format\n     */\n    async getPriceInference(args) {\n        try {\n            const inference = await this.client.getPriceInference(args.asset, args.timeframe);\n            const response = {\n                price: inference.inference_data.network_inference_normalized,\n                timestamp: inference.inference_data.timestamp,\n                asset: args.asset,\n                timeframe: args.timeframe,\n            };\n            const inferenceJson = JSON.stringify(response);\n            return `The price inference for ${args.asset} (${args.timeframe}) is:\\n${inferenceJson}`;\n        }\n        catch (error) {\n            return `Error getting price inference for ${args.asset} (${args.timeframe}): ${error}`;\n        }\n    }\n    /**\n     * Checks if the provider supports a given network\n     *\n     * @returns Always returns true as Allora service is network-agnostic\n     */\n    supportsNetwork() {\n        return true; // Allora service is network-agnostic\n    }\n}\nexports.AlloraActionProvider = AlloraActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_all_topics\",\n        description: `\nThis tool will get all available inference topics from Allora Network.\n\nA successful response will return a list of available topics in JSON format. Example:\n[\n    {\n        \"topic_id\": 1,\n        \"topic_name\": \"Bitcoin 8h\",\n        \"description\": \"Bitcoin price prediction for the next 8 hours\",\n        \"epoch_length\": 100,\n        \"ground_truth_lag\": 10,\n        \"loss_method\": \"method1\",\n        \"worker_submission_window\": 50,\n        \"worker_count\": 5,\n        \"reputer_count\": 3,\n        \"total_staked_allo\": 1000,\n        \"total_emissions_allo\": 500,\n        \"is_active\": true,\n        \"updated_at\": \"2023-01-01T00:00:00Z\"\n    }\n]\n\nKey fields:\n- topic_id: Unique identifier, use with get_inference_by_topic_id action\n- topic_name: Name of the topic\n- description: Short description of the topic's purpose\n- is_active: If true, topic is active and accepting submissions\n- updated_at: Timestamp of last update\n\nA failure response will return an error message with details.\n`,\n        schema: schemas_1.GetAllTopicsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AlloraActionProvider.prototype, \"getAllTopics\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_inference_by_topic_id\",\n        description: `\nThis tool will get inference for a specific topic from Allora Network.\nIt requires a topic ID as input, which can be obtained from the get_all_topics action.\n\nA successful response will return a message with the inference data in JSON format. Example:\n    {\n        \"network_inference\": \"0.5\",\n        \"network_inference_normalized\": \"0.5\",\n        \"confidence_interval_percentiles\": [\"0.1\", \"0.5\", \"0.9\"],\n        \"confidence_interval_percentiles_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n        \"confidence_interval_values\": [\"0.1\", \"0.5\", \"0.9\"],\n        \"confidence_interval_values_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n        \"topic_id\": \"1\",\n        \"timestamp\": 1718198400,\n        \"extra_data\": \"extra_data\"\n    }\nThe network_inference field is the inference for the topic.\nThe network_inference_normalized field is the normalized inference for the topic.\n\nA failure response will return an error message with details.\n`,\n        schema: schemas_1.GetInferenceByTopicIdSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AlloraActionProvider.prototype, \"getInferenceByTopicId\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_price_inference\",\n        description: `\nThis tool will get price inference for a specific token and timeframe from Allora Network.\nIt requires an asset symbol (e.g., 'BTC', 'ETH') and a timeframe (e.g., '8h', '24h') as input.\n\nA successful response will return a message with the price inference. Example:\n    The price inference for BTC (8h) is:\n    {\n        \"price\": \"100000\",\n        \"timestamp\": 1718198400,\n        \"asset\": \"BTC\",\n        \"timeframe\": \"8h\"\n    }\n\nA failure response will return an error message with details.\n`,\n        schema: schemas_1.GetPriceInferenceSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], AlloraActionProvider.prototype, \"getPriceInference\", null);\nconst alloraActionProvider = (config = {}) => new AlloraActionProvider(config);\nexports.alloraActionProvider = alloraActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/alloraActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/allora/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./alloraActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/alloraActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGxvcmEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsa0dBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGxvcmEvaW5kZXguanM/OGJhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FsbG9yYUFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/allora/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetPriceInferenceSchema = exports.GetInferenceByTopicIdSchema = exports.GetAllTopicsSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for getting all topics from Allora Network\n */\nexports.GetAllTopicsSchema = zod_1.z\n    .object({})\n    .strip()\n    .describe(\"Instructions for getting all topics from Allora Network\");\n/**\n * Input schema for getting inference data by topic ID from Allora Network\n */\nexports.GetInferenceByTopicIdSchema = zod_1.z\n    .object({\n    topicId: zod_1.z.number().describe(\"The ID of the topic to get inference data for\"),\n})\n    .strip()\n    .describe(\"Instructions for getting inference data from Allora Network by topic ID\");\n/**\n * Input schema for getting price inference for a token/timeframe pair\n */\nexports.GetPriceInferenceSchema = zod_1.z\n    .object({\n    asset: zod_1.z.string().describe(\"The token to get price inference for (e.g., 'BTC', 'ETH')\"),\n    timeframe: zod_1.z.string().describe(\"The timeframe for the prediction (e.g., '8h', '24h')\"),\n})\n    .strip()\n    .describe(\"Instructions for getting price inference for a token/timeframe pair\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGxvcmEvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0IsR0FBRyxtQ0FBbUMsR0FBRywwQkFBMEI7QUFDbEcsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9hbGxvcmEvc2NoZW1hcy5qcz9hYmNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZXRQcmljZUluZmVyZW5jZVNjaGVtYSA9IGV4cG9ydHMuR2V0SW5mZXJlbmNlQnlUb3BpY0lkU2NoZW1hID0gZXhwb3J0cy5HZXRBbGxUb3BpY3NTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgZ2V0dGluZyBhbGwgdG9waWNzIGZyb20gQWxsb3JhIE5ldHdvcmtcbiAqL1xuZXhwb3J0cy5HZXRBbGxUb3BpY3NTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7fSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgZ2V0dGluZyBhbGwgdG9waWNzIGZyb20gQWxsb3JhIE5ldHdvcmtcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgZ2V0dGluZyBpbmZlcmVuY2UgZGF0YSBieSB0b3BpYyBJRCBmcm9tIEFsbG9yYSBOZXR3b3JrXG4gKi9cbmV4cG9ydHMuR2V0SW5mZXJlbmNlQnlUb3BpY0lkU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHRvcGljSWQ6IHpvZF8xLnoubnVtYmVyKCkuZGVzY3JpYmUoXCJUaGUgSUQgb2YgdGhlIHRvcGljIHRvIGdldCBpbmZlcmVuY2UgZGF0YSBmb3JcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciBnZXR0aW5nIGluZmVyZW5jZSBkYXRhIGZyb20gQWxsb3JhIE5ldHdvcmsgYnkgdG9waWMgSURcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgZ2V0dGluZyBwcmljZSBpbmZlcmVuY2UgZm9yIGEgdG9rZW4vdGltZWZyYW1lIHBhaXJcbiAqL1xuZXhwb3J0cy5HZXRQcmljZUluZmVyZW5jZVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBhc3NldDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSB0b2tlbiB0byBnZXQgcHJpY2UgaW5mZXJlbmNlIGZvciAoZS5nLiwgJ0JUQycsICdFVEgnKVwiKSxcbiAgICB0aW1lZnJhbWU6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgdGltZWZyYW1lIGZvciB0aGUgcHJlZGljdGlvbiAoZS5nLiwgJzhoJywgJzI0aCcpXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgZ2V0dGluZyBwcmljZSBpbmZlcmVuY2UgZm9yIGEgdG9rZW4vdGltZWZyYW1lIHBhaXJcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/basenameActionProvider.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/basename/basenameActionProvider.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.basenameActionProvider = exports.BasenameActionProvider = void 0;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/constants.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/schemas.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\n/**\n * Action provider for registering Basenames.\n */\nclass BasenameActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructs a new BasenameActionProvider.\n     */\n    constructor() {\n        super(\"basename\", []);\n        /**\n         * Checks if the Basename action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Basename action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.networkId === \"base-mainnet\" || network.networkId === \"base-sepolia\";\n    }\n    /**\n     * Registers a Basename.\n     *\n     * @param wallet - The wallet to use for the registration.\n     * @param args - The arguments for the registration.\n     * @returns A string indicating the success or failure of the registration.\n     */\n    async register(wallet, args) {\n        const address = wallet.getAddress();\n        const isMainnet = wallet.getNetwork().networkId === \"base-mainnet\";\n        const suffix = isMainnet ? \".base.eth\" : \".basetest.eth\";\n        if (!args.basename.endsWith(suffix)) {\n            args.basename += suffix;\n        }\n        const l2ResolverAddress = isMainnet ? constants_1.L2_RESOLVER_ADDRESS_MAINNET : constants_1.L2_RESOLVER_ADDRESS_TESTNET;\n        const addressData = (0, viem_1.encodeFunctionData)({\n            abi: constants_1.L2_RESOLVER_ABI,\n            functionName: \"setAddr\",\n            args: [(0, viem_1.namehash)(args.basename), address],\n        });\n        const nameData = (0, viem_1.encodeFunctionData)({\n            abi: constants_1.L2_RESOLVER_ABI,\n            functionName: \"setName\",\n            args: [(0, viem_1.namehash)(args.basename), args.basename],\n        });\n        try {\n            const contractAddress = isMainnet\n                ? constants_1.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_MAINNET\n                : constants_1.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_TESTNET;\n            const hash = await wallet.sendTransaction({\n                to: contractAddress,\n                data: (0, viem_1.encodeFunctionData)({\n                    abi: constants_1.REGISTRAR_ABI,\n                    functionName: \"register\",\n                    args: [\n                        {\n                            name: args.basename.replace(suffix, \"\"),\n                            owner: address,\n                            duration: constants_1.REGISTRATION_DURATION,\n                            resolver: l2ResolverAddress,\n                            data: [addressData, nameData],\n                            reverseRecord: true,\n                        },\n                    ],\n                }),\n                value: (0, viem_1.parseEther)(args.amount),\n            });\n            await wallet.waitForTransactionReceipt(hash);\n            return `Successfully registered basename ${args.basename} for address ${address}`;\n        }\n        catch (error) {\n            return `Error registering basename: Error: ${error}`;\n        }\n    }\n}\nexports.BasenameActionProvider = BasenameActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"register_basename\",\n        description: `\nThis tool will register a Basename for the agent. The agent should have a wallet associated to register a Basename.\nWhen your network ID is 'base-mainnet' (also sometimes known simply as 'base'), the name must end with .base.eth, and when your network ID is 'base-sepolia', it must ends with .basetest.eth.\nDo not suggest any alternatives and never try to register a Basename with another postfix. The prefix of the name must be unique so if the registration of the\nBasename fails, you should prompt to try again with a more unique name.\n`,\n        schema: schemas_1.RegisterBasenameSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], BasenameActionProvider.prototype, \"register\", null);\nconst basenameActionProvider = () => new BasenameActionProvider();\nexports.basenameActionProvider = basenameActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/basenameActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/constants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/basename/constants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.REGISTRAR_ABI = exports.L2_RESOLVER_ABI = exports.REGISTRATION_DURATION = exports.L2_RESOLVER_ADDRESS_TESTNET = exports.L2_RESOLVER_ADDRESS_MAINNET = exports.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_TESTNET = exports.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_MAINNET = void 0;\n// Contract addresses\nexports.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_MAINNET = \"0x4cCb0BB02FCABA27e82a56646E81d8c5bC4119a5\";\nexports.BASENAMES_REGISTRAR_CONTROLLER_ADDRESS_TESTNET = \"0x49aE3cC2e3AA768B1e5654f5D3C6002144A59581\";\nexports.L2_RESOLVER_ADDRESS_MAINNET = \"0xC6d566A56A1aFf6508b41f6c90ff131615583BCD\";\nexports.L2_RESOLVER_ADDRESS_TESTNET = \"0x6533C94869D28fAA8dF77cc63f9e2b2D6Cf77eBA\";\n// Default registration duration (1 year in seconds)\nexports.REGISTRATION_DURATION = 31557600n;\n// Relevant ABI for L2 Resolver Contract.\nexports.L2_RESOLVER_ABI = [\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"a\", type: \"address\" },\n        ],\n        name: \"setAddr\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n            { internalType: \"string\", name: \"newName\", type: \"string\" },\n        ],\n        name: \"setName\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n// Relevant ABI for Basenames Registrar Controller Contract.\nexports.REGISTRAR_ABI = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"string\",\n                        name: \"name\",\n                        type: \"string\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"owner\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"duration\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"resolver\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes[]\",\n                        name: \"data\",\n                        type: \"bytes[]\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"reverseRecord\",\n                        type: \"bool\",\n                    },\n                ],\n                internalType: \"struct RegistrarController.RegisterRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"register\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9iYXNlbmFtZS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsdUJBQXVCLEdBQUcsNkJBQTZCLEdBQUcsbUNBQW1DLEdBQUcsbUNBQW1DLEdBQUcsc0RBQXNELEdBQUcsc0RBQXNEO0FBQzdRO0FBQ0Esc0RBQXNEO0FBQ3RELHNEQUFzRDtBQUN0RCxtQ0FBbUM7QUFDbkMsbUNBQW1DO0FBQ25DO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxjQUFjLHdEQUF3RDtBQUN0RSxjQUFjLHFEQUFxRDtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLHdEQUF3RDtBQUN0RSxjQUFjLHlEQUF5RDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYmFzZW5hbWUvY29uc3RhbnRzLmpzP2FhYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJFR0lTVFJBUl9BQkkgPSBleHBvcnRzLkwyX1JFU09MVkVSX0FCSSA9IGV4cG9ydHMuUkVHSVNUUkFUSU9OX0RVUkFUSU9OID0gZXhwb3J0cy5MMl9SRVNPTFZFUl9BRERSRVNTX1RFU1RORVQgPSBleHBvcnRzLkwyX1JFU09MVkVSX0FERFJFU1NfTUFJTk5FVCA9IGV4cG9ydHMuQkFTRU5BTUVTX1JFR0lTVFJBUl9DT05UUk9MTEVSX0FERFJFU1NfVEVTVE5FVCA9IGV4cG9ydHMuQkFTRU5BTUVTX1JFR0lTVFJBUl9DT05UUk9MTEVSX0FERFJFU1NfTUFJTk5FVCA9IHZvaWQgMDtcbi8vIENvbnRyYWN0IGFkZHJlc3Nlc1xuZXhwb3J0cy5CQVNFTkFNRVNfUkVHSVNUUkFSX0NPTlRST0xMRVJfQUREUkVTU19NQUlOTkVUID0gXCIweDRjQ2IwQkIwMkZDQUJBMjdlODJhNTY2NDZFODFkOGM1YkM0MTE5YTVcIjtcbmV4cG9ydHMuQkFTRU5BTUVTX1JFR0lTVFJBUl9DT05UUk9MTEVSX0FERFJFU1NfVEVTVE5FVCA9IFwiMHg0OWFFM2NDMmUzQUE3NjhCMWU1NjU0ZjVEM0M2MDAyMTQ0QTU5NTgxXCI7XG5leHBvcnRzLkwyX1JFU09MVkVSX0FERFJFU1NfTUFJTk5FVCA9IFwiMHhDNmQ1NjZBNTZBMWFGZjY1MDhiNDFmNmM5MGZmMTMxNjE1NTgzQkNEXCI7XG5leHBvcnRzLkwyX1JFU09MVkVSX0FERFJFU1NfVEVTVE5FVCA9IFwiMHg2NTMzQzk0ODY5RDI4ZkFBOGRGNzdjYzYzZjllMmIyRDZDZjc3ZUJBXCI7XG4vLyBEZWZhdWx0IHJlZ2lzdHJhdGlvbiBkdXJhdGlvbiAoMSB5ZWFyIGluIHNlY29uZHMpXG5leHBvcnRzLlJFR0lTVFJBVElPTl9EVVJBVElPTiA9IDMxNTU3NjAwbjtcbi8vIFJlbGV2YW50IEFCSSBmb3IgTDIgUmVzb2x2ZXIgQ29udHJhY3QuXG5leHBvcnRzLkwyX1JFU09MVkVSX0FCSSA9IFtcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLCBuYW1lOiBcIm5vZGVcIiwgdHlwZTogXCJieXRlczMyXCIgfSxcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJhXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwic2V0QWRkclwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIiwgbmFtZTogXCJub2RlXCIsIHR5cGU6IFwiYnl0ZXMzMlwiIH0sXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJzdHJpbmdcIiwgbmFtZTogXCJuZXdOYW1lXCIsIHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJzZXROYW1lXCIsXG4gICAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbl07XG4vLyBSZWxldmFudCBBQkkgZm9yIEJhc2VuYW1lcyBSZWdpc3RyYXIgQ29udHJvbGxlciBDb250cmFjdC5cbmV4cG9ydHMuUkVHSVNUUkFSX0FCSSA9IFtcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvd25lclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImR1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVzb2x2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNbXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzW11cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmV2ZXJzZVJlY29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJlZ2lzdHJhckNvbnRyb2xsZXIuUmVnaXN0ZXJSZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJyZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJyZWdpc3RlclwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/basename/index.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./basenameActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/basenameActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9iYXNlbmFtZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsa0lBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyxvR0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2Jhc2VuYW1lL2luZGV4LmpzPzM5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYXNlbmFtZUFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/schemas.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/basename/schemas.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RegisterBasenameSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for registering a Basename.\n */\nexports.RegisterBasenameSchema = zod_1.z\n    .object({\n    basename: zod_1.z.string().describe(\"The Basename to assign to the agent\"),\n    amount: zod_1.z.string().default(\"0.002\").describe(\"The amount of ETH to pay for registration\"),\n})\n    .strip()\n    .describe(\"Instructions for registering a Basename\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9iYXNlbmFtZS9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvYmFzZW5hbWUvc2NoZW1hcy5qcz81YzM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWdpc3RlckJhc2VuYW1lU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHJlZ2lzdGVyaW5nIGEgQmFzZW5hbWUuXG4gKi9cbmV4cG9ydHMuUmVnaXN0ZXJCYXNlbmFtZVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBiYXNlbmFtZTogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBCYXNlbmFtZSB0byBhc3NpZ24gdG8gdGhlIGFnZW50XCIpLFxuICAgIGFtb3VudDogem9kXzEuei5zdHJpbmcoKS5kZWZhdWx0KFwiMC4wMDJcIikuZGVzY3JpYmUoXCJUaGUgYW1vdW50IG9mIEVUSCB0byBwYXkgZm9yIHJlZ2lzdHJhdGlvblwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnN0cnVjdGlvbnMgZm9yIHJlZ2lzdGVyaW5nIGEgQmFzZW5hbWVcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpApiActionProvider.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpApiActionProvider.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cdpApiActionProvider = exports.CdpApiActionProvider = void 0;\nconst package_json_1 = __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@coinbase/agentkit/package.json\");\nconst coinbase_sdk_1 = __webpack_require__(/*! @coinbase/coinbase-sdk */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js\");\n/**\n * CdpApiActionProvider is an action provider for CDP API.\n *\n * This provider is used for any action that uses the CDP API, but does not require a CDP Wallet.\n */\nclass CdpApiActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the CdpApiActionProvider class.\n     *\n     * @param config - The configuration options for the CdpApiActionProvider.\n     */\n    constructor(config = {}) {\n        super(\"cdp_api\", []);\n        /**\n         * Checks if the Cdp action provider supports the given network.\n         *\n         * NOTE: Network scoping is done at the action implementation level\n         *\n         * @param _ - The network to check.\n         * @returns True if the Cdp action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (_) => true;\n        if (config.apiKeyName && config.apiKeyPrivateKey) {\n            coinbase_sdk_1.Coinbase.configure({\n                apiKeyName: config.apiKeyName,\n                privateKey: config.apiKeyPrivateKey?.replace(/\\\\n/g, \"\\n\"),\n                source: \"agentkit\",\n                sourceVersion: package_json_1.version,\n            });\n        }\n        else {\n            coinbase_sdk_1.Coinbase.configureFromJson({ source: \"agentkit\", sourceVersion: package_json_1.version });\n        }\n    }\n    /**\n     * Check the reputation of an address.\n     *\n     * @param args - The input arguments for the action\n     * @returns A string containing reputation data or error message\n     */\n    async addressReputation(args) {\n        if (args.network.includes(\"solana\")) {\n            return \"Address reputation is only supported on Ethereum networks.\";\n        }\n        try {\n            const address = new coinbase_sdk_1.ExternalAddress(args.network, args.address);\n            const reputation = await address.reputation();\n            return reputation.toString();\n        }\n        catch (error) {\n            return `Error checking address reputation: ${error}`;\n        }\n    }\n    /**\n     * Requests test tokens from the faucet for the default address in the wallet.\n     *\n     * @param walletProvider - The wallet provider to request funds from.\n     * @param args - The input arguments for the action.\n     * @returns A confirmation message with transaction details.\n     */\n    async faucet(walletProvider, args) {\n        const network = walletProvider.getNetwork();\n        if (network.networkId !== \"base-sepolia\" && network.networkId !== \"solana-devnet\") {\n            return `Faucet is only allowed on 'base-sepolia' or 'solana-devnet'.`;\n        }\n        try {\n            const address = new coinbase_sdk_1.ExternalAddress(walletProvider.getNetwork().networkId, walletProvider.getAddress());\n            const faucetTx = await address.faucet(args.assetId || undefined);\n            const result = await faucetTx.wait({ timeoutSeconds: 60 });\n            return `Received ${args.assetId || \"ETH\"} from the faucet. Transaction: ${result.getTransactionLink()}`;\n        }\n        catch (error) {\n            return `Error requesting faucet funds: ${error}`;\n        }\n    }\n}\nexports.CdpApiActionProvider = CdpApiActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"address_reputation\",\n        description: `\nThis tool checks the reputation of an address on a given network. It takes:\n\n- network: The network to check the address on (e.g. \"base-mainnet\")\n- address: The Ethereum address to check\n`,\n        schema: schemas_1.AddressReputationSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpApiActionProvider.prototype, \"addressReputation\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"request_faucet_funds\",\n        description: `This tool will request test tokens from the faucet for the default address in the wallet. It takes the wallet and asset ID as input.\nFaucet is only allowed on 'base-sepolia' or 'solana-devnet'.\nIf fauceting on 'base-sepolia', user can only provide asset ID 'eth' or 'usdc', if no asset ID is provided, the faucet will default to 'eth'.\nIf fauceting on 'solana-devnet', user can only provide asset ID 'sol', if no asset ID is provided, the faucet will default to 'sol'.\nYou are not allowed to faucet with any other network or asset ID. If you are on another network, suggest that the user sends you some ETH\nfrom another wallet and provide the user with your wallet details.`,\n        schema: schemas_1.RequestFaucetFundsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.WalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpApiActionProvider.prototype, \"faucet\", null);\nconst cdpApiActionProvider = (config = {}) => new CdpApiActionProvider(config);\nexports.cdpApiActionProvider = cdpApiActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpApiActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpWalletActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpWalletActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cdpWalletActionProvider = exports.CdpWalletActionProvider = void 0;\nconst coinbase_sdk_1 = __webpack_require__(/*! @coinbase/coinbase-sdk */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst package_json_1 = __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@coinbase/agentkit/package.json\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/constants.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js\");\n/**\n * CdpWalletActionProvider is an action provider for Cdp.\n *\n * This provider is used for any action that requires a CDP Wallet.\n */\nclass CdpWalletActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the CdpWalletActionProvider class.\n     *\n     * @param config - The configuration options for the CdpWalletActionProvider.\n     */\n    constructor(config = {}) {\n        super(\"cdp_wallet\", []);\n        /**\n         * Checks if the Cdp action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Cdp action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\";\n        if (config.apiKeyName && config.apiKeyPrivateKey) {\n            coinbase_sdk_1.Coinbase.configure({\n                apiKeyName: config.apiKeyName,\n                privateKey: config.apiKeyPrivateKey?.replace(/\\\\n/g, \"\\n\"),\n                source: \"agentkit\",\n                sourceVersion: package_json_1.version,\n            });\n        }\n        else {\n            coinbase_sdk_1.Coinbase.configureFromJson({ source: \"agentkit\", sourceVersion: package_json_1.version });\n        }\n    }\n    /**\n     * Deploys a contract.\n     *\n     * @param walletProvider - The wallet provider to deploy the contract from\n     * @param args - The input arguments for the action\n     * @returns A message containing the deployed contract address and details\n     */\n    async deployContract(walletProvider, args) {\n        try {\n            const solidityVersion = constants_1.SolidityVersions[args.solidityVersion];\n            const contract = await walletProvider.deployContract({\n                solidityVersion: solidityVersion,\n                solidityInputJson: args.solidityInputJson,\n                contractName: args.contractName,\n                constructorArgs: args.constructorArgs ?? {},\n            });\n            const result = await contract.wait();\n            return `Deployed contract ${args.contractName} at address ${result.getContractAddress()}. Transaction link: ${result\n                .getTransaction()\n                .getTransactionLink()}`;\n        }\n        catch (error) {\n            return `Error deploying contract: ${error}`;\n        }\n    }\n    /**\n     * Deploys an NFT (ERC-721) token collection onchain from the wallet.\n     *\n     * @param walletProvider - The wallet provider to deploy the NFT from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the NFT token deployment details.\n     */\n    async deployNFT(walletProvider, args) {\n        try {\n            const nftContract = await walletProvider.deployNFT({\n                name: args.name,\n                symbol: args.symbol,\n                baseURI: args.baseURI,\n            });\n            const result = await nftContract.wait();\n            const transaction = result.getTransaction();\n            const networkId = walletProvider.getNetwork().networkId;\n            const contractAddress = result.getContractAddress();\n            return [\n                `Deployed NFT Collection ${args.name}:`,\n                `- to address ${contractAddress}`,\n                `- on network ${networkId}.`,\n                `Transaction hash: ${transaction.getTransactionHash()}`,\n                `Transaction link: ${transaction.getTransactionLink()}`,\n            ].join(\"\\n\");\n        }\n        catch (error) {\n            return `Error deploying NFT: ${error}`;\n        }\n    }\n    /**\n     * Deploys a token.\n     *\n     * @param walletProvider - The wallet provider to deploy the token.\n     * @param args - The arguments for the token deployment.\n     * @returns The deployed token.\n     */\n    async deployToken(walletProvider, args) {\n        try {\n            const tokenContract = await walletProvider.deployToken({\n                name: args.name,\n                symbol: args.symbol,\n                totalSupply: args.totalSupply,\n            });\n            const result = await tokenContract.wait();\n            return `Deployed ERC20 token contract ${args.name} (${args.symbol}) with total supply of ${args.totalSupply} tokens at address ${result.getContractAddress()}. Transaction link: ${result\n                .getTransaction()\n                .getTransactionLink()}`;\n        }\n        catch (error) {\n            return `Error deploying token: ${error}`;\n        }\n    }\n    /**\n     * Trades a specified amount of a from asset to a to asset for the wallet.\n     *\n     * @param walletProvider - The wallet provider to trade the asset from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the trade details.\n     */\n    async trade(walletProvider, args) {\n        try {\n            const tradeResult = await walletProvider.createTrade({\n                amount: args.amount,\n                fromAssetId: args.fromAssetId,\n                toAssetId: args.toAssetId,\n            });\n            const result = await tradeResult.wait();\n            return `Traded ${args.amount} of ${args.fromAssetId} for ${result.getToAmount()} of ${args.toAssetId}.\\nTransaction hash for the trade: ${result\n                .getTransaction()\n                .getTransactionHash()}\\nTransaction link for the trade: ${result\n                .getTransaction()\n                .getTransactionLink()}`;\n        }\n        catch (error) {\n            return `Error trading assets: ${error}`;\n        }\n    }\n}\nexports.CdpWalletActionProvider = CdpWalletActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"deploy_contract\",\n        description: `\nDeploys smart contract with required args: solidity version (string), solidity input json (string), contract name (string), and optional constructor args (Dict[str, Any])\n\nInput json structure:\n{\"language\":\"Solidity\",\"settings\":{\"remappings\":[],\"outputSelection\":{\"*\":{\"*\":[\"abi\",\"evm.bytecode\"]}}},\"sources\":{}}\n\nYou must set the outputSelection to {\"*\":{\"*\":[\"abi\",\"evm.bytecode\"]}} in the settings. The solidity version must be >= 0.8.0 and <= 0.8.28.\n\nSources should contain one or more contracts with the following structure:\n{\"contract_name.sol\":{\"content\":\"contract code\"}}\n\nThe contract code should be escaped. Contracts cannot import from external contracts but can import from one another.\n\nConstructor args are required if the contract has a constructor. They are a key-value\nmap where the key is the arg name and the value is the arg value. Encode uint/int/bytes/string/address values as strings, boolean values as true/false. For arrays/tuples, encode based on contained type.`,\n        schema: schemas_1.DeployContractSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.CdpWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpWalletActionProvider.prototype, \"deployContract\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"deploy_nft\",\n        description: `This tool will deploy an NFT (ERC-721) contract onchain from the wallet. \n  It takes the name of the NFT collection, the symbol of the NFT collection, and the base URI for the token metadata as inputs.`,\n        schema: schemas_1.DeployNftSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.CdpWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpWalletActionProvider.prototype, \"deployNFT\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"deploy_token\",\n        description: `This tool will deploy an ERC20 token smart contract. It takes the token name, symbol, and total supply as input. \nThe token will be deployed using the wallet's default address as the owner and initial token holder.`,\n        schema: schemas_1.DeployTokenSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.CdpWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpWalletActionProvider.prototype, \"deployToken\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"trade\",\n        description: `This tool will trade a specified amount of a 'from asset' to a 'to asset' for the wallet.\nIt takes the following inputs:\n- The amount of the 'from asset' to trade\n- The from asset ID to trade \n- The asset ID to receive from the trade\n\nImportant notes:\n- Trades are only supported on mainnet networks (ie, 'base-mainnet', 'base', 'ethereum-mainnet', 'ethereum', etc.)\n- Never allow trades on any non-mainnet network (ie, 'base-sepolia', 'ethereum-sepolia', etc.)\n- When selling a native asset (e.g. 'eth' on base-mainnet), ensure there is sufficient balance to pay for the trade AND the gas cost of this trade`,\n        schema: schemas_1.TradeSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.CdpWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CdpWalletActionProvider.prototype, \"trade\", null);\nconst cdpWalletActionProvider = (config = {}) => new CdpWalletActionProvider(config);\nexports.cdpWalletActionProvider = cdpWalletActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpWalletActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/constants.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/cdp/constants.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SolidityVersions = void 0;\nexports.SolidityVersions = {\n    \"0.8.28\": \"0.8.28+commit.7893614a\",\n    \"0.8.27\": \"0.8.27+commit.40a35a09\",\n    \"0.8.26\": \"0.8.26+commit.8a97fa7a\",\n    \"0.8.25\": \"0.8.25+commit.b61c2a91\",\n    \"0.8.24\": \"0.8.24+commit.e11b9ed9\",\n    \"0.8.23\": \"0.8.23+commit.f704f362\",\n    \"0.8.22\": \"0.8.22+commit.4fc1097e\",\n    \"0.8.21\": \"0.8.21+commit.d9974bed\",\n    \"0.8.20\": \"0.8.20+commit.a1b79de6\",\n    \"0.8.19\": \"0.8.19+commit.7dd6d404\",\n    \"0.8.18\": \"0.8.18+commit.87f61d96\",\n    \"0.8.17\": \"0.8.17+commit.8df45f5f\",\n    \"0.8.16\": \"0.8.16+commit.07a7930e\",\n    \"0.8.15\": \"0.8.15+commit.e14f2714\",\n    \"0.8.14\": \"0.8.14+commit.80d49f37\",\n    \"0.8.13\": \"0.8.13+commit.abaa5c0e\",\n    \"0.8.12\": \"0.8.12+commit.f00d7308\",\n    \"0.8.11\": \"0.8.11+commit.d7f03943\",\n    \"0.8.10\": \"0.8.10+commit.fc410830\",\n    \"0.8.9\": \"0.8.9+commit.e5eed63a\",\n    \"0.8.8\": \"0.8.8+commit.dddeac2f\",\n    \"0.8.7\": \"0.8.7+commit.e28d00a7\",\n    \"0.8.6\": \"0.8.6+commit.11564f7e\",\n    \"0.8.5\": \"0.8.5+commit.a4f2e591\",\n    \"0.8.4\": \"0.8.4+commit.c7e474f2\",\n    \"0.8.3\": \"0.8.3+commit.8d00100c\",\n    \"0.8.2\": \"0.8.2+commit.661d1103\",\n    \"0.8.1\": \"0.8.1+commit.df193b15\",\n    \"0.8.0\": \"0.8.0+commit.c7dfd78e\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jZHAvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvY2RwL2NvbnN0YW50cy5qcz80NTVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Tb2xpZGl0eVZlcnNpb25zID0gdm9pZCAwO1xuZXhwb3J0cy5Tb2xpZGl0eVZlcnNpb25zID0ge1xuICAgIFwiMC44LjI4XCI6IFwiMC44LjI4K2NvbW1pdC43ODkzNjE0YVwiLFxuICAgIFwiMC44LjI3XCI6IFwiMC44LjI3K2NvbW1pdC40MGEzNWEwOVwiLFxuICAgIFwiMC44LjI2XCI6IFwiMC44LjI2K2NvbW1pdC44YTk3ZmE3YVwiLFxuICAgIFwiMC44LjI1XCI6IFwiMC44LjI1K2NvbW1pdC5iNjFjMmE5MVwiLFxuICAgIFwiMC44LjI0XCI6IFwiMC44LjI0K2NvbW1pdC5lMTFiOWVkOVwiLFxuICAgIFwiMC44LjIzXCI6IFwiMC44LjIzK2NvbW1pdC5mNzA0ZjM2MlwiLFxuICAgIFwiMC44LjIyXCI6IFwiMC44LjIyK2NvbW1pdC40ZmMxMDk3ZVwiLFxuICAgIFwiMC44LjIxXCI6IFwiMC44LjIxK2NvbW1pdC5kOTk3NGJlZFwiLFxuICAgIFwiMC44LjIwXCI6IFwiMC44LjIwK2NvbW1pdC5hMWI3OWRlNlwiLFxuICAgIFwiMC44LjE5XCI6IFwiMC44LjE5K2NvbW1pdC43ZGQ2ZDQwNFwiLFxuICAgIFwiMC44LjE4XCI6IFwiMC44LjE4K2NvbW1pdC44N2Y2MWQ5NlwiLFxuICAgIFwiMC44LjE3XCI6IFwiMC44LjE3K2NvbW1pdC44ZGY0NWY1ZlwiLFxuICAgIFwiMC44LjE2XCI6IFwiMC44LjE2K2NvbW1pdC4wN2E3OTMwZVwiLFxuICAgIFwiMC44LjE1XCI6IFwiMC44LjE1K2NvbW1pdC5lMTRmMjcxNFwiLFxuICAgIFwiMC44LjE0XCI6IFwiMC44LjE0K2NvbW1pdC44MGQ0OWYzN1wiLFxuICAgIFwiMC44LjEzXCI6IFwiMC44LjEzK2NvbW1pdC5hYmFhNWMwZVwiLFxuICAgIFwiMC44LjEyXCI6IFwiMC44LjEyK2NvbW1pdC5mMDBkNzMwOFwiLFxuICAgIFwiMC44LjExXCI6IFwiMC44LjExK2NvbW1pdC5kN2YwMzk0M1wiLFxuICAgIFwiMC44LjEwXCI6IFwiMC44LjEwK2NvbW1pdC5mYzQxMDgzMFwiLFxuICAgIFwiMC44LjlcIjogXCIwLjguOStjb21taXQuZTVlZWQ2M2FcIixcbiAgICBcIjAuOC44XCI6IFwiMC44LjgrY29tbWl0LmRkZGVhYzJmXCIsXG4gICAgXCIwLjguN1wiOiBcIjAuOC43K2NvbW1pdC5lMjhkMDBhN1wiLFxuICAgIFwiMC44LjZcIjogXCIwLjguNitjb21taXQuMTE1NjRmN2VcIixcbiAgICBcIjAuOC41XCI6IFwiMC44LjUrY29tbWl0LmE0ZjJlNTkxXCIsXG4gICAgXCIwLjguNFwiOiBcIjAuOC40K2NvbW1pdC5jN2U0NzRmMlwiLFxuICAgIFwiMC44LjNcIjogXCIwLjguMytjb21taXQuOGQwMDEwMGNcIixcbiAgICBcIjAuOC4yXCI6IFwiMC44LjIrY29tbWl0LjY2MWQxMTAzXCIsXG4gICAgXCIwLjguMVwiOiBcIjAuOC4xK2NvbW1pdC5kZjE5M2IxNVwiLFxuICAgIFwiMC44LjBcIjogXCIwLjguMCtjb21taXQuYzdkZmQ3OGVcIixcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/cdp/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cdpApiActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpApiActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cdpWalletActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/cdpWalletActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jZHAvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLCtGQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyx5SEFBd0I7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLCtIQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2NkcC9pbmRleC5qcz8zMTBlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2RwQXBpQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NkcFdhbGxldEFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TradeSchema = exports.RequestFaucetFundsSchema = exports.DeployTokenSchema = exports.DeployNftSchema = exports.DeployContractSchema = exports.AddressReputationSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/constants.js\");\n/**\n * Input schema for address reputation check.\n */\nexports.AddressReputationSchema = zod_1.z\n    .object({\n    address: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The Ethereum address to check\"),\n    network: zod_1.z.string().describe(\"The network to check the address on\"),\n})\n    .strip()\n    .describe(\"Input schema for address reputation check\");\n/**\n * Input schema for deploy contract action.\n */\nexports.DeployContractSchema = zod_1.z\n    .object({\n    solidityVersion: zod_1.z\n        .enum(Object.keys(constants_1.SolidityVersions))\n        .describe(\"The solidity compiler version\"),\n    solidityInputJson: zod_1.z.string().describe(\"The input json for the solidity compiler\"),\n    contractName: zod_1.z.string().describe(\"The name of the contract class to be deployed\"),\n    constructorArgs: zod_1.z\n        .record(zod_1.z.string(), zod_1.z.any())\n        .describe(\"The constructor arguments for the contract\")\n        .optional(),\n})\n    .strip()\n    .describe(\"Instructions for deploying an arbitrary contract\");\n/**\n * Input schema for deploy NFT action\n */\nexports.DeployNftSchema = zod_1.z\n    .object({\n    name: zod_1.z.string().describe(\"The name of the NFT collection\"),\n    symbol: zod_1.z.string().describe(\"The symbol of the NFT collection\"),\n    baseURI: zod_1.z.string().describe(\"The base URI for the token metadata\"),\n})\n    .strip()\n    .describe(\"Instructions for deploying an NFT collection\");\n/**\n * Input schema for deploy token action.\n */\nexports.DeployTokenSchema = zod_1.z\n    .object({\n    name: zod_1.z.string().describe(\"The name of the token\"),\n    symbol: zod_1.z.string().describe(\"The token symbol\"),\n    totalSupply: zod_1.z.custom().describe(\"The total supply of tokens to mint\"),\n})\n    .strip()\n    .describe(\"Instructions for deploying a token\");\n/**\n * Input schema for request faucet funds action.\n */\nexports.RequestFaucetFundsSchema = zod_1.z\n    .object({\n    assetId: zod_1.z.string().optional().describe(\"The optional asset ID to request from faucet\"),\n})\n    .strip()\n    .describe(\"Instructions for requesting faucet funds\");\n/**\n * Input schema for trade action.\n */\nexports.TradeSchema = zod_1.z\n    .object({\n    amount: zod_1.z.custom().describe(\"The amount of the from asset to trade\"),\n    fromAssetId: zod_1.z.string().describe(\"The from asset ID to trade\"),\n    toAssetId: zod_1.z.string().describe(\"The to asset ID to receive from the trade\"),\n})\n    .strip()\n    .describe(\"Instructions for trading assets\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jZHAvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxnQ0FBZ0MsR0FBRyx5QkFBeUIsR0FBRyx1QkFBdUIsR0FBRyw0QkFBNEIsR0FBRywrQkFBK0I7QUFDN0ssY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCLG9CQUFvQixtQkFBTyxDQUFDLG1HQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jZHAvc2NoZW1hcy5qcz9jYWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFkZVNjaGVtYSA9IGV4cG9ydHMuUmVxdWVzdEZhdWNldEZ1bmRzU2NoZW1hID0gZXhwb3J0cy5EZXBsb3lUb2tlblNjaGVtYSA9IGV4cG9ydHMuRGVwbG95TmZ0U2NoZW1hID0gZXhwb3J0cy5EZXBsb3lDb250cmFjdFNjaGVtYSA9IGV4cG9ydHMuQWRkcmVzc1JlcHV0YXRpb25TY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBhZGRyZXNzIHJlcHV0YXRpb24gY2hlY2suXG4gKi9cbmV4cG9ydHMuQWRkcmVzc1JlcHV0YXRpb25TY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eMHhbYS1mQS1GMC05XXs0MH0kLywgXCJJbnZhbGlkIEV0aGVyZXVtIGFkZHJlc3MgZm9ybWF0XCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBFdGhlcmV1bSBhZGRyZXNzIHRvIGNoZWNrXCIpLFxuICAgIG5ldHdvcms6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgbmV0d29yayB0byBjaGVjayB0aGUgYWRkcmVzcyBvblwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIGFkZHJlc3MgcmVwdXRhdGlvbiBjaGVja1wiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBkZXBsb3kgY29udHJhY3QgYWN0aW9uLlxuICovXG5leHBvcnRzLkRlcGxveUNvbnRyYWN0U2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHNvbGlkaXR5VmVyc2lvbjogem9kXzEuelxuICAgICAgICAuZW51bShPYmplY3Qua2V5cyhjb25zdGFudHNfMS5Tb2xpZGl0eVZlcnNpb25zKSlcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIHNvbGlkaXR5IGNvbXBpbGVyIHZlcnNpb25cIiksXG4gICAgc29saWRpdHlJbnB1dEpzb246IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgaW5wdXQganNvbiBmb3IgdGhlIHNvbGlkaXR5IGNvbXBpbGVyXCIpLFxuICAgIGNvbnRyYWN0TmFtZTogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBuYW1lIG9mIHRoZSBjb250cmFjdCBjbGFzcyB0byBiZSBkZXBsb3llZFwiKSxcbiAgICBjb25zdHJ1Y3RvckFyZ3M6IHpvZF8xLnpcbiAgICAgICAgLnJlY29yZCh6b2RfMS56LnN0cmluZygpLCB6b2RfMS56LmFueSgpKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgY29uc3RydWN0b3IgYXJndW1lbnRzIGZvciB0aGUgY29udHJhY3RcIilcbiAgICAgICAgLm9wdGlvbmFsKCksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciBkZXBsb3lpbmcgYW4gYXJiaXRyYXJ5IGNvbnRyYWN0XCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGRlcGxveSBORlQgYWN0aW9uXG4gKi9cbmV4cG9ydHMuRGVwbG95TmZ0U2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIG5hbWU6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgbmFtZSBvZiB0aGUgTkZUIGNvbGxlY3Rpb25cIiksXG4gICAgc3ltYm9sOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIHN5bWJvbCBvZiB0aGUgTkZUIGNvbGxlY3Rpb25cIiksXG4gICAgYmFzZVVSSTogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBiYXNlIFVSSSBmb3IgdGhlIHRva2VuIG1ldGFkYXRhXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgZGVwbG95aW5nIGFuIE5GVCBjb2xsZWN0aW9uXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGRlcGxveSB0b2tlbiBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuRGVwbG95VG9rZW5TY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgbmFtZTogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBuYW1lIG9mIHRoZSB0b2tlblwiKSxcbiAgICBzeW1ib2w6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgdG9rZW4gc3ltYm9sXCIpLFxuICAgIHRvdGFsU3VwcGx5OiB6b2RfMS56LmN1c3RvbSgpLmRlc2NyaWJlKFwiVGhlIHRvdGFsIHN1cHBseSBvZiB0b2tlbnMgdG8gbWludFwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnN0cnVjdGlvbnMgZm9yIGRlcGxveWluZyBhIHRva2VuXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHJlcXVlc3QgZmF1Y2V0IGZ1bmRzIGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5SZXF1ZXN0RmF1Y2V0RnVuZHNTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYXNzZXRJZDogem9kXzEuei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiVGhlIG9wdGlvbmFsIGFzc2V0IElEIHRvIHJlcXVlc3QgZnJvbSBmYXVjZXRcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciByZXF1ZXN0aW5nIGZhdWNldCBmdW5kc1wiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciB0cmFkZSBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuVHJhZGVTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYW1vdW50OiB6b2RfMS56LmN1c3RvbSgpLmRlc2NyaWJlKFwiVGhlIGFtb3VudCBvZiB0aGUgZnJvbSBhc3NldCB0byB0cmFkZVwiKSxcbiAgICBmcm9tQXNzZXRJZDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBmcm9tIGFzc2V0IElEIHRvIHRyYWRlXCIpLFxuICAgIHRvQXNzZXRJZDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSB0byBhc3NldCBJRCB0byByZWNlaXZlIGZyb20gdGhlIHRyYWRlXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgdHJhZGluZyBhc3NldHNcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/compoundActionProvider.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/compound/compoundActionProvider.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compoundActionProvider = exports.CompoundActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/schemas.js\");\nconst utils_2 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/utils.js\");\n/**\n * CompoundActionProvider is an action provider for Compound protocol interactions.\n */\nclass CompoundActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructs a new CompoundActionProvider instance.\n     */\n    constructor() {\n        super(\"compound\", []);\n        /**\n         * Checks if the Compound action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the network is supported, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\" &&\n            (network.networkId === \"base-mainnet\" || network.networkId === \"base-sepolia\");\n    }\n    /**\n     * Supplies collateral assets to Compound.\n     *\n     * @param wallet - The wallet instance to perform the transaction.\n     * @param args - The input arguments including assetId and amount.\n     * @returns A message indicating success or an error message.\n     */\n    async supply(wallet, args) {\n        try {\n            const network = wallet.getNetwork();\n            const cometAddress = (0, utils_2.getCometAddress)(network);\n            const tokenAddress = (0, utils_2.getAssetAddress)(network, args.assetId);\n            if (!tokenAddress) {\n                throw new Error(`Token address undefined for assetId ${args.assetId}`);\n            }\n            const decimals = await (0, utils_2.getTokenDecimals)(wallet, tokenAddress);\n            const amountAtomic = (0, viem_1.parseUnits)(args.amount, decimals);\n            // Check wallet balance before proceeding\n            const walletBalance = await (0, utils_2.getTokenBalance)(wallet, tokenAddress);\n            if (walletBalance < amountAtomic) {\n                const humanBalance = (0, viem_1.formatUnits)(walletBalance, decimals);\n                return `Error: Insufficient balance. You have ${humanBalance}, but trying to supply ${args.amount}`;\n            }\n            // Get current health ratio for reference\n            const currentHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            // Approve Compound to spend tokens\n            const approvalResult = await (0, utils_1.approve)(wallet, tokenAddress, cometAddress, amountAtomic);\n            if (approvalResult.startsWith(\"Error\")) {\n                return `Error approving token: ${approvalResult}`;\n            }\n            // Supply tokens to Compound\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.COMET_ABI,\n                functionName: \"supply\",\n                args: [tokenAddress, amountAtomic],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: cometAddress,\n                data,\n            });\n            await wallet.waitForTransactionReceipt(txHash);\n            // Get new health ratio and token symbol\n            const newHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const tokenSymbol = await (0, utils_2.getTokenSymbol)(wallet, tokenAddress);\n            // Only add the health ratio message if at least one of the values is not Infinity\n            const healthMessage = currentHealth.eq(Infinity) && newHealth.eq(Infinity)\n                ? \"\"\n                : `\\nHealth ratio changed from ${currentHealth.toFixed(2)} to ${newHealth.toFixed(2)}`;\n            return `Supplied ${args.amount} ${tokenSymbol} to Compound.\\nTransaction hash: ${txHash}${healthMessage}`;\n        }\n        catch (error) {\n            return `Error supplying to Compound: ${error instanceof Error\n                ? error.message\n                : error && typeof error === \"object\" && \"message\" in error\n                    ? `Error: ${error.message}`\n                    : error}`;\n        }\n    }\n    /**\n     * Withdraws collateral assets from Compound.\n     *\n     * @param wallet - The wallet instance to perform the transaction.\n     * @param args - The input arguments including assetId and amount.\n     * @returns A message indicating success or an error message.\n     */\n    async withdraw(wallet, args) {\n        try {\n            const cometAddress = (0, utils_2.getCometAddress)(wallet.getNetwork());\n            const tokenAddress = (0, utils_2.getAssetAddress)(wallet.getNetwork(), args.assetId);\n            const decimals = await (0, utils_2.getTokenDecimals)(wallet, tokenAddress);\n            const amountAtomic = (0, viem_1.parseUnits)(args.amount, decimals);\n            // Check that there is enough collateral supplied to withdraw\n            const collateralBalance = await (0, utils_2.getCollateralBalance)(wallet, cometAddress, tokenAddress);\n            if (amountAtomic > collateralBalance) {\n                const humanBalance = (0, viem_1.formatUnits)(collateralBalance, decimals);\n                return `Error: Insufficient balance. Trying to withdraw ${args.amount}, but only have ${humanBalance} supplied`;\n            }\n            // Check if position would be healthy after withdrawal\n            const projectedHealthRatio = await (0, utils_2.getHealthRatioAfterWithdraw)(wallet, cometAddress, tokenAddress, amountAtomic);\n            if (projectedHealthRatio.lessThan(1)) {\n                return `Error: Withdrawing ${args.amount} would result in an unhealthy position. Health ratio would be ${projectedHealthRatio.toFixed(2)}`;\n            }\n            // Withdraw from Compound\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.COMET_ABI,\n                functionName: \"withdraw\",\n                args: [tokenAddress, amountAtomic],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: cometAddress,\n                data,\n            });\n            await wallet.waitForTransactionReceipt(txHash);\n            // Get current and new health ratios and token symbol\n            const currentHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const newHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const tokenSymbol = await (0, utils_2.getTokenSymbol)(wallet, tokenAddress);\n            return (`Withdrawn ${args.amount} ${tokenSymbol} from Compound.\\n` +\n                `Transaction hash: ${txHash}\\n` +\n                `Health ratio changed from ${currentHealth.toFixed(2)} to ${newHealth.toFixed(2)}`);\n        }\n        catch (error) {\n            return `Error withdrawing from Compound: ${error instanceof Error ? error : error && typeof error === \"object\" && \"message\" in error ? `Error: ${error.message}` : error}`;\n        }\n    }\n    /**\n     * Borrows base assets from Compound.\n     *\n     * @param wallet - The wallet instance to perform the transaction.\n     * @param args - The input arguments including assetId and amount.\n     * @returns A message indicating success or an error message.\n     */\n    async borrow(wallet, args) {\n        try {\n            const cometAddress = (0, utils_2.getCometAddress)(wallet.getNetwork());\n            const baseTokenAddress = await (0, utils_2.getBaseTokenAddress)(wallet, cometAddress);\n            const decimals = await (0, utils_2.getTokenDecimals)(wallet, baseTokenAddress);\n            // Convert human-readable amount to atomic units\n            const amountAtomic = (0, viem_1.parseUnits)(args.amount, decimals);\n            // Get current health ratio for reference\n            const currentHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const currentHealthStr = currentHealth.eq(Infinity) ? \"Inf.%\" : currentHealth.toFixed(2);\n            // Check if position would be healthy after borrow\n            const projectedHealthRatio = await (0, utils_2.getHealthRatioAfterBorrow)(wallet, cometAddress, amountAtomic);\n            if (projectedHealthRatio.lessThan(1)) {\n                return `Error: Borrowing ${args.amount} USDC would result in an unhealthy position. Health ratio would be ${projectedHealthRatio.toFixed(2)}`;\n            }\n            // Use the withdraw method to borrow from Compound\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.COMET_ABI,\n                functionName: \"withdraw\",\n                args: [baseTokenAddress, amountAtomic],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: cometAddress,\n                data,\n            });\n            await wallet.waitForTransactionReceipt(txHash);\n            // Get new health ratio\n            const newHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const newHealthStr = newHealth.eq(Infinity) ? \"Inf.%\" : newHealth.toFixed(2);\n            return (`Borrowed ${args.amount} USDC from Compound.\\n` +\n                `Transaction hash: ${txHash}\\n` +\n                `Health ratio changed from ${currentHealthStr} to ${newHealthStr}`);\n        }\n        catch (error) {\n            return `Error borrowing from Compound: ${error instanceof Error ? error : error && typeof error === \"object\" && \"message\" in error ? `Error: ${error.message}` : error}`;\n        }\n    }\n    /**\n     * Repays borrowed assets to Compound.\n     *\n     * @param wallet - The wallet instance to perform the transaction.\n     * @param args - The input arguments including assetId and amount.\n     * @returns A message indicating success or an error message.\n     */\n    async repay(wallet, args) {\n        try {\n            const cometAddress = (0, utils_2.getCometAddress)(wallet.getNetwork());\n            const tokenAddress = (0, utils_2.getAssetAddress)(wallet.getNetwork(), args.assetId);\n            const tokenDecimals = await (0, utils_2.getTokenDecimals)(wallet, tokenAddress);\n            const amountAtomic = (0, viem_1.parseUnits)(args.amount, tokenDecimals);\n            const tokenBalance = await (0, utils_2.getTokenBalance)(wallet, tokenAddress);\n            if (tokenBalance < amountAtomic) {\n                const humanBalance = (0, viem_1.formatUnits)(tokenBalance, tokenDecimals);\n                return `Error: Insufficient balance. You have ${humanBalance}, but trying to repay ${args.amount}`;\n            }\n            // Get current health ratio for reference\n            const currentHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            // Approve Compound to spend tokens\n            const approvalResult = await (0, utils_1.approve)(wallet, tokenAddress, cometAddress, amountAtomic);\n            if (approvalResult.startsWith(\"Error\")) {\n                return `Error approving token: ${approvalResult}`;\n            }\n            // Repay debt by supplying tokens to Compound\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.COMET_ABI,\n                functionName: \"supply\",\n                args: [tokenAddress, amountAtomic],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: cometAddress,\n                data,\n            });\n            await wallet.waitForTransactionReceipt(txHash);\n            // Get new health ratio and token symbol\n            const newHealth = await (0, utils_2.getHealthRatio)(wallet, cometAddress);\n            const tokenSymbol = await (0, utils_2.getTokenSymbol)(wallet, tokenAddress);\n            return (`Repaid ${args.amount} ${tokenSymbol} to Compound.\\n` +\n                `Transaction hash: ${txHash}\\n` +\n                `Health ratio improved from ${currentHealth.toFixed(2)} to ${newHealth.toFixed(2)}`);\n        }\n        catch (error) {\n            return `Error repaying to Compound: ${error instanceof Error ? error : error && typeof error === \"object\" && \"message\" in error ? `Error: ${error.message}` : error}`;\n        }\n    }\n    /**\n     * Retrieves portfolio details from Compound.\n     *\n     * @param wallet - The wallet instance to fetch portfolio details.\n     * @param _ - No input is required for this action.\n     * @returns A Markdown formatted string with portfolio details or an error message.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getPortfolio(wallet, _) {\n        try {\n            const cometAddress = (0, utils_2.getCometAddress)(wallet.getNetwork());\n            return await (0, utils_2.getPortfolioDetailsMarkdown)(wallet, cometAddress);\n        }\n        catch (error) {\n            return `Error getting portfolio details: ${error && typeof error === \"object\" && \"message\" in error ? error.message : error}`;\n        }\n    }\n}\nexports.CompoundActionProvider = CompoundActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"supply\",\n        description: `\nThis tool allows supplying collateral assets to Compound.\nIt takes:\n- assetId: The asset to supply, one of 'weth', 'cbeth', 'cbbtc', 'wsteth', or 'usdc'\n- amount: The amount of tokens to supply in human-readable format\nExamples:\n- 1 WETH\n- 0.1 WETH\n- 0.01 WETH\nImportant notes:\n- Use the exact amount provided\n- The token must be an approved collateral asset for the Compound market\n    `,\n        schema: schemas_1.CompoundSupplySchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CompoundActionProvider.prototype, \"supply\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"withdraw\",\n        description: `\nThis tool allows withdrawing collateral assets from Compound.\nIt takes:\n- assetId: The asset to withdraw, one of 'weth', 'cbeth', 'cbbtc', 'wsteth', or 'usdc'\n- amount: The amount of tokens to withdraw in human-readable format\nExamples:\n- 1 WETH\n- 0.1 WETH\n- 0.01 WETH\nImportant notes:\n- Use the exact amount provided\n- The token must be a collateral asset you have supplied to the Compound market\n    `,\n        schema: schemas_1.CompoundWithdrawSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CompoundActionProvider.prototype, \"withdraw\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"borrow\",\n        description: `\nThis tool allows borrowing base assets from Compound.\nIt takes:\n- assetId: The asset to borrow, either 'weth' or 'usdc'\n- amount: The amount of base tokens to borrow in human-readable format\nExamples:\n- 1000 USDC\n- 0.5 WETH\nImportant notes:\n- Use the exact amount provided\n- Ensure you have sufficient collateral to borrow\n    `,\n        schema: schemas_1.CompoundBorrowSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CompoundActionProvider.prototype, \"borrow\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"repay\",\n        description: `\nThis tool allows repaying borrowed assets to Compound.\nIt takes:\n- assetId: The asset to repay, either 'weth' or 'usdc'\n- amount: The amount of tokens to repay in human-readable format\nExamples:\n- 1000 USDC\n- 0.5 WETH\nImportant notes:\n- Use the exact amount provided\n- Ensure you have sufficient balance of the asset to repay\n    `,\n        schema: schemas_1.CompoundRepaySchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CompoundActionProvider.prototype, \"repay\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_portfolio\",\n        description: `\nThis tool allows getting portfolio details from Compound.\nReturns portfolio details including:\n- Collateral balances and USD values\n- Borrowed amounts and USD values\nFormatted in Markdown for readability.\n    `,\n        schema: schemas_1.CompoundPortfolioSchema,\n    })\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], CompoundActionProvider.prototype, \"getPortfolio\", null);\n/**\n * Factory function to create a new instance of CompoundActionProvider.\n *\n * @returns A new CompoundActionProvider instance.\n */\nconst compoundActionProvider = () => new CompoundActionProvider();\nexports.compoundActionProvider = compoundActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/compoundActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PRICE_FEED_ABI = exports.COMET_ABI = exports.ERC20_ABI = exports.ASSET_ADDRESSES = exports.COMET_ADDRESSES = exports.SUPPORTED_NETWORKS = void 0;\nconst constants_1 = __webpack_require__(/*! ../erc20/constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\");\nObject.defineProperty(exports, \"ERC20_ABI\", ({ enumerable: true, get: function () { return constants_1.abi; } }));\nexports.SUPPORTED_NETWORKS = [\"base-mainnet\", \"base-sepolia\"];\nexports.COMET_ADDRESSES = {\n    \"base-mainnet\": \"0xb125E6687d4313864e53df431d5425969c15Eb2F\",\n    \"base-sepolia\": \"0x571621Ce60Cebb0c1D442B5afb38B1663C6Bf017\",\n};\nexports.ASSET_ADDRESSES = {\n    \"base-mainnet\": {\n        weth: \"0x4200000000000000000000000000000000000006\",\n        cbeth: \"0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22\",\n        cbbtc: \"0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf\",\n        wsteth: \"0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452\",\n        usdc: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    },\n    \"base-sepolia\": {\n        weth: \"0x4200000000000000000000000000000000000006\",\n        usdc: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n        wsteth: \"0x774eD9EDB0C5202dF9A86183804b5D9E99dC6CA3\",\n    },\n};\nexports.COMET_ABI = [\n    {\n        inputs: [\n            { internalType: \"address\", name: \"asset\", type: \"address\" },\n            { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"supply\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"asset\", type: \"address\" },\n            { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"priceFeed\", type: \"address\" }],\n        name: \"getPrice\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"borrowBalanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"numAssets\",\n        outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint8\", name: \"i\", type: \"uint8\" }],\n        name: \"getAssetInfo\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint8\", name: \"offset\", type: \"uint8\" },\n                    { internalType: \"address\", name: \"asset\", type: \"address\" },\n                    { internalType: \"address\", name: \"priceFeed\", type: \"address\" },\n                    { internalType: \"uint64\", name: \"scale\", type: \"uint64\" },\n                    { internalType: \"uint64\", name: \"borrowCollateralFactor\", type: \"uint64\" },\n                    { internalType: \"uint64\", name: \"liquidateCollateralFactor\", type: \"uint64\" },\n                    { internalType: \"uint64\", name: \"liquidationFactor\", type: \"uint64\" },\n                    { internalType: \"uint128\", name: \"supplyCap\", type: \"uint128\" },\n                ],\n                internalType: \"struct CometCore.AssetInfo\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"baseToken\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"baseTokenPriceFeed\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n            { internalType: \"address\", name: \"asset\", type: \"address\" },\n        ],\n        name: \"collateralBalanceOf\",\n        outputs: [{ internalType: \"uint128\", name: \"balance\", type: \"uint128\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nexports.PRICE_FEED_ABI = [\n    {\n        inputs: [],\n        name: \"latestRoundData\",\n        outputs: [\n            { name: \"roundId\", type: \"uint80\" },\n            { name: \"answer\", type: \"int256\" },\n            { name: \"startedAt\", type: \"uint256\" },\n            { name: \"updatedAt\", type: \"uint256\" },\n            { name: \"answeredInRound\", type: \"uint80\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/compound/index.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./compoundActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/compoundActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jb21wb3VuZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsa0lBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvY29tcG91bmQvaW5kZXguanM/MDQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbXBvdW5kQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/schemas.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/compound/schemas.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompoundPortfolioSchema = exports.CompoundRepaySchema = exports.CompoundBorrowSchema = exports.CompoundWithdrawSchema = exports.CompoundSupplySchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for Compound supply action.\n */\nexports.CompoundSupplySchema = zod_1.z\n    .object({\n    assetId: zod_1.z.enum([\"weth\", \"cbeth\", \"cbbtc\", \"wsteth\", \"usdc\"]).describe(\"The asset to supply\"),\n    amount: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The amount of tokens to supply in human-readable format\"),\n})\n    .describe(\"Input schema for Compound supply action\");\n/**\n * Input schema for Compound withdraw action.\n */\nexports.CompoundWithdrawSchema = zod_1.z\n    .object({\n    assetId: zod_1.z.enum([\"weth\", \"cbeth\", \"cbbtc\", \"wsteth\", \"usdc\"]).describe(\"The asset to withdraw\"),\n    amount: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The amount of tokens to withdraw in human-readable format\"),\n})\n    .describe(\"Input schema for Compound withdraw action\");\n/**\n * Input schema for Compound borrow action.\n */\nexports.CompoundBorrowSchema = zod_1.z\n    .object({\n    assetId: zod_1.z.enum([\"weth\", \"usdc\"]).describe(\"The asset to borrow\"),\n    amount: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The amount of base tokens to borrow in human-readable format\"),\n})\n    .describe(\"Input schema for Compound borrow action\");\n/**\n * Input schema for Compound repay action.\n */\nexports.CompoundRepaySchema = zod_1.z\n    .object({\n    assetId: zod_1.z.enum([\"weth\", \"usdc\"]).describe(\"The asset to repay\"),\n    amount: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The amount of tokens to repay in human-readable format\"),\n})\n    .describe(\"Input schema for Compound repay action\");\n/**\n * Input schema for Compound get portfolio action.\n */\nexports.CompoundPortfolioSchema = zod_1.z\n    .object({})\n    .describe(\"Input schema for Compound get portfolio action\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jb21wb3VuZC9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQixHQUFHLDJCQUEyQixHQUFHLDRCQUE0QixHQUFHLDhCQUE4QixHQUFHLDRCQUE0QjtBQUM1SixjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jb21wb3VuZC9zY2hlbWFzLmpzPzdmODMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBvdW5kUG9ydGZvbGlvU2NoZW1hID0gZXhwb3J0cy5Db21wb3VuZFJlcGF5U2NoZW1hID0gZXhwb3J0cy5Db21wb3VuZEJvcnJvd1NjaGVtYSA9IGV4cG9ydHMuQ29tcG91bmRXaXRoZHJhd1NjaGVtYSA9IGV4cG9ydHMuQ29tcG91bmRTdXBwbHlTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgQ29tcG91bmQgc3VwcGx5IGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5Db21wb3VuZFN1cHBseVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBhc3NldElkOiB6b2RfMS56LmVudW0oW1wid2V0aFwiLCBcImNiZXRoXCIsIFwiY2JidGNcIiwgXCJ3c3RldGhcIiwgXCJ1c2RjXCJdKS5kZXNjcmliZShcIlRoZSBhc3NldCB0byBzdXBwbHlcIiksXG4gICAgYW1vdW50OiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL15cXGQrKFxcLlxcZCspPyQvLCBcIk11c3QgYmUgYSB2YWxpZCBpbnRlZ2VyIG9yIGRlY2ltYWwgdmFsdWVcIilcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gc3VwcGx5IGluIGh1bWFuLXJlYWRhYmxlIGZvcm1hdFwiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBDb21wb3VuZCBzdXBwbHkgYWN0aW9uXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIENvbXBvdW5kIHdpdGhkcmF3IGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5Db21wb3VuZFdpdGhkcmF3U2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGFzc2V0SWQ6IHpvZF8xLnouZW51bShbXCJ3ZXRoXCIsIFwiY2JldGhcIiwgXCJjYmJ0Y1wiLCBcIndzdGV0aFwiLCBcInVzZGNcIl0pLmRlc2NyaWJlKFwiVGhlIGFzc2V0IHRvIHdpdGhkcmF3XCIpLFxuICAgIGFtb3VudDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIHdpdGhkcmF3IGluIGh1bWFuLXJlYWRhYmxlIGZvcm1hdFwiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBDb21wb3VuZCB3aXRoZHJhdyBhY3Rpb25cIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgQ29tcG91bmQgYm9ycm93IGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5Db21wb3VuZEJvcnJvd1NjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBhc3NldElkOiB6b2RfMS56LmVudW0oW1wid2V0aFwiLCBcInVzZGNcIl0pLmRlc2NyaWJlKFwiVGhlIGFzc2V0IHRvIGJvcnJvd1wiKSxcbiAgICBhbW91bnQ6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXlxcZCsoXFwuXFxkKyk/JC8sIFwiTXVzdCBiZSBhIHZhbGlkIGludGVnZXIgb3IgZGVjaW1hbCB2YWx1ZVwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYW1vdW50IG9mIGJhc2UgdG9rZW5zIHRvIGJvcnJvdyBpbiBodW1hbi1yZWFkYWJsZSBmb3JtYXRcIiksXG59KVxuICAgIC5kZXNjcmliZShcIklucHV0IHNjaGVtYSBmb3IgQ29tcG91bmQgYm9ycm93IGFjdGlvblwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBDb21wb3VuZCByZXBheSBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuQ29tcG91bmRSZXBheVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBhc3NldElkOiB6b2RfMS56LmVudW0oW1wid2V0aFwiLCBcInVzZGNcIl0pLmRlc2NyaWJlKFwiVGhlIGFzc2V0IHRvIHJlcGF5XCIpLFxuICAgIGFtb3VudDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIHJlcGF5IGluIGh1bWFuLXJlYWRhYmxlIGZvcm1hdFwiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBDb21wb3VuZCByZXBheSBhY3Rpb25cIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgQ29tcG91bmQgZ2V0IHBvcnRmb2xpbyBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuQ29tcG91bmRQb3J0Zm9saW9TY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7fSlcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIENvbXBvdW5kIGdldCBwb3J0Zm9saW8gYWN0aW9uXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/utils.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/compound/utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBaseTokenAddress = exports.getAssetAddress = exports.getCometAddress = exports.getPortfolioDetailsMarkdown = exports.getHealthRatioAfterBorrow = exports.getHealthRatioAfterWithdraw = exports.getHealthRatio = exports.getCollateralBalance = exports.getTokenBalance = exports.getTokenSymbol = exports.getTokenDecimals = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/constants.js\");\n/**\n * Get token decimals from contract\n *\n * @param wallet - The wallet provider instance\n * @param tokenAddress - The address of the token contract\n * @returns The number of decimals for the token\n */\nconst getTokenDecimals = async (wallet, tokenAddress) => {\n    const decimals = await wallet.readContract({\n        address: tokenAddress,\n        abi: constants_1.ERC20_ABI,\n        functionName: \"decimals\",\n    });\n    return Number(decimals);\n};\nexports.getTokenDecimals = getTokenDecimals;\n/**\n * Get token symbol from contract\n *\n * @param wallet - The wallet provider instance\n * @param tokenAddress - The address of the token contract\n * @returns The symbol of the token\n */\nconst getTokenSymbol = async (wallet, tokenAddress) => {\n    const symbol = await wallet.readContract({\n        address: tokenAddress,\n        abi: constants_1.ERC20_ABI,\n        functionName: \"symbol\",\n    });\n    return symbol;\n};\nexports.getTokenSymbol = getTokenSymbol;\n/**\n * Get token balance for an address\n *\n * @param wallet - The wallet provider instance\n * @param tokenAddress - The address of the token contract\n * @returns The token balance as a bigint\n */\nconst getTokenBalance = async (wallet, tokenAddress) => {\n    const balance = await wallet.readContract({\n        address: tokenAddress,\n        abi: constants_1.ERC20_ABI,\n        functionName: \"balanceOf\",\n        args: [wallet.getAddress()],\n    });\n    return balance;\n};\nexports.getTokenBalance = getTokenBalance;\n/**\n * Get collateral balance for an address\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @param tokenAddress - The address of the token contract\n * @returns The collateral balance as a bigint\n */\nconst getCollateralBalance = async (wallet, cometAddress, tokenAddress) => {\n    const balance = await wallet.readContract({\n        address: cometAddress,\n        abi: constants_1.COMET_ABI,\n        functionName: \"collateralBalanceOf\",\n        args: [(await wallet.getAddress()), tokenAddress],\n    });\n    return balance;\n};\nexports.getCollateralBalance = getCollateralBalance;\n/**\n * Get health ratio for an account\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @returns The health ratio as a Decimal\n */\nconst getHealthRatio = async (wallet, cometAddress) => {\n    const borrowDetails = await getBorrowDetails(wallet, cometAddress);\n    const supplyDetails = await getSupplyDetails(wallet, cometAddress);\n    const borrowValue = borrowDetails.borrowAmount.mul(borrowDetails.price);\n    let totalAdjustedCollateral = new decimal_js_1.Decimal(0);\n    for (const supply of supplyDetails) {\n        const collateralValue = supply.supplyAmount.mul(supply.price);\n        const adjustedValue = collateralValue.mul(supply.collateralFactor);\n        totalAdjustedCollateral = totalAdjustedCollateral.add(adjustedValue);\n    }\n    return borrowValue.eq(0) ? new decimal_js_1.Decimal(Infinity) : totalAdjustedCollateral.div(borrowValue);\n};\nexports.getHealthRatio = getHealthRatio;\n/**\n * Get health ratio after a hypothetical withdraw\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @param tokenAddress - The address of the token contract\n * @param amount - The amount to withdraw\n * @returns The health ratio after withdraw as a Decimal\n */\nconst getHealthRatioAfterWithdraw = async (wallet, cometAddress, tokenAddress, amount) => {\n    const borrowDetails = await getBorrowDetails(wallet, cometAddress);\n    const supplyDetails = await getSupplyDetails(wallet, cometAddress);\n    const borrowValue = borrowDetails.borrowAmount.mul(borrowDetails.price);\n    let totalAdjustedCollateral = new decimal_js_1.Decimal(0);\n    for (const supply of supplyDetails) {\n        const supplyTokenSymbol = supply.tokenSymbol;\n        const withdrawTokenSymbol = await (0, exports.getTokenSymbol)(wallet, tokenAddress);\n        if (supplyTokenSymbol === withdrawTokenSymbol) {\n            const decimals = await (0, exports.getTokenDecimals)(wallet, tokenAddress);\n            const withdrawAmountHuman = new decimal_js_1.Decimal((0, viem_1.formatUnits)(amount, decimals));\n            const newSupplyAmount = supply.supplyAmount.sub(withdrawAmountHuman);\n            const assetValue = newSupplyAmount.mul(supply.price);\n            totalAdjustedCollateral = totalAdjustedCollateral.add(assetValue.mul(supply.collateralFactor));\n        }\n        else {\n            totalAdjustedCollateral = totalAdjustedCollateral.add(supply.supplyAmount.mul(supply.price).mul(supply.collateralFactor));\n        }\n    }\n    return borrowValue.eq(0) ? new decimal_js_1.Decimal(Infinity) : totalAdjustedCollateral.div(borrowValue);\n};\nexports.getHealthRatioAfterWithdraw = getHealthRatioAfterWithdraw;\n/**\n * Get health ratio after a hypothetical borrow\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @param amount - The amount to borrow\n * @returns The health ratio after borrow as a Decimal\n */\nconst getHealthRatioAfterBorrow = async (wallet, cometAddress, amount) => {\n    const borrowDetails = await getBorrowDetails(wallet, cometAddress);\n    const supplyDetails = await getSupplyDetails(wallet, cometAddress);\n    const baseToken = await (0, exports.getBaseTokenAddress)(wallet, cometAddress);\n    const baseDecimals = await (0, exports.getTokenDecimals)(wallet, baseToken);\n    const additionalBorrow = new decimal_js_1.Decimal((0, viem_1.formatUnits)(amount, baseDecimals));\n    const newBorrow = borrowDetails.borrowAmount.add(additionalBorrow);\n    const newBorrowValue = newBorrow.mul(borrowDetails.price);\n    let totalAdjustedCollateral = new decimal_js_1.Decimal(0);\n    for (const supply of supplyDetails) {\n        totalAdjustedCollateral = totalAdjustedCollateral.add(supply.supplyAmount.mul(supply.price).mul(supply.collateralFactor));\n    }\n    return newBorrowValue.eq(0) ? new decimal_js_1.Decimal(Infinity) : totalAdjustedCollateral.div(newBorrowValue);\n};\nexports.getHealthRatioAfterBorrow = getHealthRatioAfterBorrow;\n/**\n * Get portfolio details in markdown format\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @returns A markdown formatted string with portfolio details\n */\nconst getPortfolioDetailsMarkdown = async (wallet, cometAddress) => {\n    let markdownOutput = \"# Portfolio Details\\n\\n\";\n    markdownOutput += \"## Supply Details\\n\\n\";\n    let totalSupplyValue = new decimal_js_1.Decimal(0);\n    const supplyDetails = await getSupplyDetails(wallet, cometAddress);\n    if (supplyDetails.length > 0) {\n        for (const supply of supplyDetails) {\n            const token = supply.tokenSymbol;\n            const supplyAmount = supply.supplyAmount;\n            const price = supply.price;\n            const decimals = supply.decimals;\n            const collateralFactor = supply.collateralFactor;\n            const assetValue = supplyAmount.mul(price);\n            markdownOutput += `### ${token}\\n`;\n            markdownOutput += `- **Supply Amount:** ${supplyAmount.toFixed(decimals)}\\n`;\n            markdownOutput += `- **Price:** $${price.toFixed(2)}\\n`;\n            markdownOutput += `- **Collateral Factor:** ${collateralFactor.toFixed(2)}\\n`;\n            markdownOutput += `- **Asset Value:** $${assetValue.toFixed(2)}\\n\\n`;\n            totalSupplyValue = totalSupplyValue.add(assetValue);\n        }\n    }\n    else {\n        markdownOutput += \"No supplied assets found in your Compound position.\\n\\n\";\n    }\n    markdownOutput += `### Total Supply Value: $${totalSupplyValue.toFixed(2)}\\n\\n`;\n    markdownOutput += \"## Borrow Details\\n\\n\";\n    const borrowDetails = await getBorrowDetails(wallet, cometAddress);\n    if (borrowDetails.borrowAmount.gt(0)) {\n        const token = borrowDetails.tokenSymbol;\n        const price = borrowDetails.price;\n        const borrowValue = borrowDetails.borrowAmount.mul(price);\n        markdownOutput += `### ${token}\\n`;\n        markdownOutput += `- **Borrow Amount:** ${borrowDetails.borrowAmount.toFixed(6)}\\n`;\n        markdownOutput += `- **Price:** $${price.toFixed(2)}\\n`;\n        markdownOutput += `- **Borrow Value:** $${borrowValue.toFixed(2)}\\n\\n`;\n    }\n    else {\n        markdownOutput += \"No borrowed assets found in your Compound position.\\n\\n\";\n    }\n    markdownOutput += \"## Overall Health\\n\\n\";\n    const healthRatio = await (0, exports.getHealthRatio)(wallet, cometAddress);\n    markdownOutput += `- **Health Ratio:** ${healthRatio.toFixed(2)}\\n`;\n    return markdownOutput;\n};\nexports.getPortfolioDetailsMarkdown = getPortfolioDetailsMarkdown;\n/**\n * Fetch the latest price feed data.\n *\n * @param wallet - The wallet provider instance\n * @param priceFeedAddress - The address of the price feed contract\n * @returns A tuple containing the price and timestamp\n */\nconst getPriceFeedData = async (wallet, priceFeedAddress) => {\n    const latestData = await wallet.readContract({\n        address: priceFeedAddress,\n        abi: constants_1.PRICE_FEED_ABI,\n        functionName: \"latestRoundData\",\n        args: [],\n    });\n    const answer = latestData[1].toString();\n    const updatedAt = Number(latestData[3]);\n    return [answer, updatedAt];\n};\n/**\n * Retrieve borrow details: amount, base token symbol, and price.\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @returns An object containing borrow details\n */\nconst getBorrowDetails = async (wallet, cometAddress) => {\n    const borrowAmountRaw = await wallet.readContract({\n        address: cometAddress,\n        abi: constants_1.COMET_ABI,\n        functionName: \"borrowBalanceOf\",\n        args: [(await wallet.getAddress())],\n    });\n    const baseToken = await (0, exports.getBaseTokenAddress)(wallet, cometAddress);\n    const baseDecimals = await (0, exports.getTokenDecimals)(wallet, baseToken);\n    const baseTokenSymbol = await (0, exports.getTokenSymbol)(wallet, baseToken);\n    const basePriceFeed = await wallet.readContract({\n        address: cometAddress,\n        abi: constants_1.COMET_ABI,\n        functionName: \"baseTokenPriceFeed\",\n        args: [],\n    });\n    const [basePriceRaw] = await getPriceFeedData(wallet, basePriceFeed);\n    const humanBorrowAmount = new decimal_js_1.Decimal((0, viem_1.formatUnits)(borrowAmountRaw, baseDecimals));\n    const price = new decimal_js_1.Decimal(basePriceRaw).div(new decimal_js_1.Decimal(10).pow(8));\n    return { tokenSymbol: baseTokenSymbol, borrowAmount: humanBorrowAmount, price };\n};\n/**\n * Retrieve supply details across all collateral assets.\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @returns An array of supply details for each asset\n */\nconst getSupplyDetails = async (wallet, cometAddress) => {\n    const numAssets = await wallet.readContract({\n        address: cometAddress,\n        abi: constants_1.COMET_ABI,\n        functionName: \"numAssets\",\n        args: [],\n    });\n    const supplyDetails = [];\n    for (let i = 0; i < numAssets; i++) {\n        const assetInfo = await wallet.readContract({\n            address: cometAddress,\n            abi: constants_1.COMET_ABI,\n            functionName: \"getAssetInfo\",\n            args: [i],\n        });\n        const assetAddress = assetInfo.asset;\n        const collateralBalance = await (0, exports.getCollateralBalance)(wallet, cometAddress, assetAddress);\n        if (collateralBalance > 0n) {\n            const tokenSymbol = await (0, exports.getTokenSymbol)(wallet, assetAddress);\n            const decimals = await (0, exports.getTokenDecimals)(wallet, assetAddress);\n            const [priceRaw] = await getPriceFeedData(wallet, assetInfo.priceFeed);\n            const humanSupplyAmount = new decimal_js_1.Decimal((0, viem_1.formatUnits)(collateralBalance, decimals));\n            const price = new decimal_js_1.Decimal(priceRaw).div(new decimal_js_1.Decimal(10).pow(8));\n            const collateralFactor = new decimal_js_1.Decimal(assetInfo.borrowCollateralFactor.toString()).div(new decimal_js_1.Decimal(10).pow(18));\n            supplyDetails.push({\n                tokenSymbol,\n                supplyAmount: humanSupplyAmount,\n                price,\n                collateralFactor,\n                decimals,\n            });\n        }\n    }\n    return supplyDetails;\n};\n/**\n * Gets the Comet address for the current network.\n *\n * @param network - The network instance\n * @returns The Comet contract address\n */\nconst getCometAddress = (network) => {\n    if (!network.networkId) {\n        throw new Error(\"Network ID is required\");\n    }\n    if (network.networkId === \"base-mainnet\") {\n        return constants_2.COMET_ADDRESSES[\"base-mainnet\"];\n    }\n    else if (network.networkId === \"base-sepolia\") {\n        return constants_2.COMET_ADDRESSES[\"base-sepolia\"];\n    }\n    throw new Error(`Network ${network.networkId} not supported`);\n};\nexports.getCometAddress = getCometAddress;\n/**\n * Gets the asset address for a given assetId on the current network.\n *\n * @param network - The network instance\n * @param assetId - The identifier of the asset\n * @returns The asset contract address\n */\nconst getAssetAddress = (network, assetId) => {\n    if (!network.networkId) {\n        throw new Error(\"Network ID is required\");\n    }\n    const normalizedAssetId = assetId.toLowerCase();\n    if (network.networkId === \"base-mainnet\") {\n        const address = constants_2.ASSET_ADDRESSES[\"base-mainnet\"][normalizedAssetId];\n        if (!address) {\n            throw new Error(`Asset ${assetId} not supported on Base Mainnet`);\n        }\n        return address;\n    }\n    else if (network.networkId === \"base-sepolia\") {\n        const address = constants_2.ASSET_ADDRESSES[\"base-sepolia\"][normalizedAssetId];\n        if (!address) {\n            throw new Error(`Asset ${assetId} not supported on Base Sepolia`);\n        }\n        return address;\n    }\n    throw new Error(`Network ${network.networkId} not supported`);\n};\nexports.getAssetAddress = getAssetAddress;\n/**\n * Get the base token address for a Compound market\n *\n * @param wallet - The wallet provider instance\n * @param cometAddress - The address of the Comet contract\n * @returns The base token address\n */\nconst getBaseTokenAddress = async (wallet, cometAddress) => {\n    const baseToken = await wallet.readContract({\n        address: cometAddress,\n        abi: constants_1.COMET_ABI,\n        functionName: \"baseToken\",\n        args: [],\n    });\n    return baseToken;\n};\nexports.getBaseTokenAddress = getBaseTokenAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/customActionProvider.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/customActionProvider.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.customActionProvider = exports.CustomActionProvider = void 0;\nconst actionDecorator_1 = __webpack_require__(/*! ./actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst actionProvider_1 = __webpack_require__(/*! ./actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\n/**\n * CustomActionProvider is a custom action provider that allows for custom action registration\n */\nclass CustomActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Creates a new CustomActionProvider that dynamically adds decorated action methods\n     *\n     * @param actions - Array of custom actions to be added to the provider\n     */\n    constructor(actions) {\n        super(\"custom\", []);\n        actions.forEach(({ name, description, schema, invoke }) => {\n            // Check if the invoke function expects a wallet provider\n            const takesWalletProvider = invoke.length === 2;\n            // Define the method on the prototype with the correct signature\n            Object.defineProperty(CustomActionProvider.prototype, name, {\n                value: takesWalletProvider\n                    ? async function (walletProvider, args) {\n                        const parsedArgs = schema.parse(args);\n                        return await invoke(walletProvider, parsedArgs);\n                    }\n                    : async function (args) {\n                        const parsedArgs = schema.parse(args);\n                        return await invoke(parsedArgs);\n                    },\n                configurable: true,\n                writable: true,\n                enumerable: true,\n            });\n            // Manually set the parameter metadata\n            const paramTypes = takesWalletProvider ? [wallet_providers_1.WalletProvider, Object] : [Object];\n            Reflect.defineMetadata(\"design:paramtypes\", paramTypes, CustomActionProvider.prototype, name);\n            // Apply the decorator using original name\n            const decoratedMethod = (0, actionDecorator_1.CreateAction)({\n                name,\n                description,\n                schema,\n            })(CustomActionProvider.prototype, name, Object.getOwnPropertyDescriptor(CustomActionProvider.prototype, name));\n            // Add the decorated method to the instance\n            Object.defineProperty(this, name, {\n                value: decoratedMethod,\n                configurable: true,\n                writable: true,\n            });\n        });\n    }\n    /**\n     * Custom action providers are supported on all networks\n     *\n     * @param _ - The network to checkpointSaver\n     * @returns true\n     */\n    supportsNetwork(_) {\n        return true;\n    }\n}\nexports.CustomActionProvider = CustomActionProvider;\nconst customActionProvider = (actions) => new CustomActionProvider(Array.isArray(actions) ? actions : [actions]);\nexports.customActionProvider = customActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9jdXN0b21BY3Rpb25Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLDRCQUE0QjtBQUMzRCwwQkFBMEIsbUJBQU8sQ0FBQywyR0FBbUI7QUFDckQseUJBQXlCLG1CQUFPLENBQUMseUdBQWtCO0FBQ25ELDJCQUEyQixtQkFBTyxDQUFDLG1HQUFxQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG1DQUFtQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2N1c3RvbUFjdGlvblByb3ZpZGVyLmpzPzdjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmN1c3RvbUFjdGlvblByb3ZpZGVyID0gZXhwb3J0cy5DdXN0b21BY3Rpb25Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGFjdGlvbkRlY29yYXRvcl8xID0gcmVxdWlyZShcIi4vYWN0aW9uRGVjb3JhdG9yXCIpO1xuY29uc3QgYWN0aW9uUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2FjdGlvblByb3ZpZGVyXCIpO1xuY29uc3Qgd2FsbGV0X3Byb3ZpZGVyc18xID0gcmVxdWlyZShcIi4uL3dhbGxldC1wcm92aWRlcnNcIik7XG4vKipcbiAqIEN1c3RvbUFjdGlvblByb3ZpZGVyIGlzIGEgY3VzdG9tIGFjdGlvbiBwcm92aWRlciB0aGF0IGFsbG93cyBmb3IgY3VzdG9tIGFjdGlvbiByZWdpc3RyYXRpb25cbiAqL1xuY2xhc3MgQ3VzdG9tQWN0aW9uUHJvdmlkZXIgZXh0ZW5kcyBhY3Rpb25Qcm92aWRlcl8xLkFjdGlvblByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEN1c3RvbUFjdGlvblByb3ZpZGVyIHRoYXQgZHluYW1pY2FsbHkgYWRkcyBkZWNvcmF0ZWQgYWN0aW9uIG1ldGhvZHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb25zIC0gQXJyYXkgb2YgY3VzdG9tIGFjdGlvbnMgdG8gYmUgYWRkZWQgdG8gdGhlIHByb3ZpZGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYWN0aW9ucykge1xuICAgICAgICBzdXBlcihcImN1c3RvbVwiLCBbXSk7XG4gICAgICAgIGFjdGlvbnMuZm9yRWFjaCgoeyBuYW1lLCBkZXNjcmlwdGlvbiwgc2NoZW1hLCBpbnZva2UgfSkgPT4ge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGludm9rZSBmdW5jdGlvbiBleHBlY3RzIGEgd2FsbGV0IHByb3ZpZGVyXG4gICAgICAgICAgICBjb25zdCB0YWtlc1dhbGxldFByb3ZpZGVyID0gaW52b2tlLmxlbmd0aCA9PT0gMjtcbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgbWV0aG9kIG9uIHRoZSBwcm90b3R5cGUgd2l0aCB0aGUgY29ycmVjdCBzaWduYXR1cmVcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdXN0b21BY3Rpb25Qcm92aWRlci5wcm90b3R5cGUsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGFrZXNXYWxsZXRQcm92aWRlclxuICAgICAgICAgICAgICAgICAgICA/IGFzeW5jIGZ1bmN0aW9uICh3YWxsZXRQcm92aWRlciwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IHNjaGVtYS5wYXJzZShhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBpbnZva2Uod2FsbGV0UHJvdmlkZXIsIHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogYXN5bmMgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBzY2hlbWEucGFyc2UoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgaW52b2tlKHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBNYW51YWxseSBzZXQgdGhlIHBhcmFtZXRlciBtZXRhZGF0YVxuICAgICAgICAgICAgY29uc3QgcGFyYW1UeXBlcyA9IHRha2VzV2FsbGV0UHJvdmlkZXIgPyBbd2FsbGV0X3Byb3ZpZGVyc18xLldhbGxldFByb3ZpZGVyLCBPYmplY3RdIDogW09iamVjdF07XG4gICAgICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgcGFyYW1UeXBlcywgQ3VzdG9tQWN0aW9uUHJvdmlkZXIucHJvdG90eXBlLCBuYW1lKTtcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBkZWNvcmF0b3IgdXNpbmcgb3JpZ2luYWwgbmFtZVxuICAgICAgICAgICAgY29uc3QgZGVjb3JhdGVkTWV0aG9kID0gKDAsIGFjdGlvbkRlY29yYXRvcl8xLkNyZWF0ZUFjdGlvbikoe1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgfSkoQ3VzdG9tQWN0aW9uUHJvdmlkZXIucHJvdG90eXBlLCBuYW1lLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEN1c3RvbUFjdGlvblByb3ZpZGVyLnByb3RvdHlwZSwgbmFtZSkpO1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBkZWNvcmF0ZWQgbWV0aG9kIHRvIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGVjb3JhdGVkTWV0aG9kLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGFjdGlvbiBwcm92aWRlcnMgYXJlIHN1cHBvcnRlZCBvbiBhbGwgbmV0d29ya3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBfIC0gVGhlIG5ldHdvcmsgdG8gY2hlY2twb2ludFNhdmVyXG4gICAgICogQHJldHVybnMgdHJ1ZVxuICAgICAqL1xuICAgIHN1cHBvcnRzTmV0d29yayhfKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ3VzdG9tQWN0aW9uUHJvdmlkZXIgPSBDdXN0b21BY3Rpb25Qcm92aWRlcjtcbmNvbnN0IGN1c3RvbUFjdGlvblByb3ZpZGVyID0gKGFjdGlvbnMpID0+IG5ldyBDdXN0b21BY3Rpb25Qcm92aWRlcihBcnJheS5pc0FycmF5KGFjdGlvbnMpID8gYWN0aW9ucyA6IFthY3Rpb25zXSk7XG5leHBvcnRzLmN1c3RvbUFjdGlvblByb3ZpZGVyID0gY3VzdG9tQWN0aW9uUHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/customActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/constants.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/defillama/constants.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFILLAMA_PRICES_URL = exports.DEFILLAMA_BASE_URL = void 0;\n/**\n * Base URL for the DefiLlama API\n */\nexports.DEFILLAMA_BASE_URL = \"https://api.llama.fi\";\n/**\n * URL for the DefiLlama price API\n */\nexports.DEFILLAMA_PRICES_URL = \"https://coins.llama.fi\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9kZWZpbGxhbWEvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLDBCQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvZGVmaWxsYW1hL2NvbnN0YW50cy5qcz80YTZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZJTExBTUFfUFJJQ0VTX1VSTCA9IGV4cG9ydHMuREVGSUxMQU1BX0JBU0VfVVJMID0gdm9pZCAwO1xuLyoqXG4gKiBCYXNlIFVSTCBmb3IgdGhlIERlZmlMbGFtYSBBUElcbiAqL1xuZXhwb3J0cy5ERUZJTExBTUFfQkFTRV9VUkwgPSBcImh0dHBzOi8vYXBpLmxsYW1hLmZpXCI7XG4vKipcbiAqIFVSTCBmb3IgdGhlIERlZmlMbGFtYSBwcmljZSBBUElcbiAqL1xuZXhwb3J0cy5ERUZJTExBTUFfUFJJQ0VTX1VSTCA9IFwiaHR0cHM6Ly9jb2lucy5sbGFtYS5maVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/defillamaActionProvider.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/defillama/defillamaActionProvider.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defillamaActionProvider = exports.DefiLlamaActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/schemas.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/utils.js\");\n/**\n * DefiLlamaActionProvider is an action provider for DefiLlama API interactions.\n * Provides functionality to fetch token prices, protocol information, and search protocols.\n */\nclass DefiLlamaActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the DefiLlamaActionProvider class.\n     */\n    constructor() {\n        super(\"defillama\", []);\n    }\n    /**\n     * Searches for protocols on DefiLlama.\n     * Note: This performs a case-insensitive search on protocol names.\n     * Returns all protocols whose names contain the search query.\n     *\n     * @param args - The protocol search parameters\n     * @returns A JSON string containing matching protocols or error message\n     */\n    async searchProtocols(args) {\n        try {\n            const url = `${constants_1.DEFILLAMA_BASE_URL}/protocols`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const protocols = await response.json();\n            const searchResults = protocols.filter((protocol) => protocol.name.toLowerCase().includes(args.query.toLowerCase()));\n            if (searchResults.length === 0) {\n                return `No protocols found matching \"${args.query}\"`;\n            }\n            return JSON.stringify(searchResults, null, 2);\n        }\n        catch (error) {\n            return `Error searching protocols: ${error}`;\n        }\n    }\n    /**\n     * Gets detailed information about a specific protocol.\n     * Note: Returns null if the protocol is not found.\n     * The response includes TVL, description, category, and other metadata.\n     * Time-series data is pruned to keep response size manageable.\n     *\n     * @param args - The protocol request parameters\n     * @returns A JSON string containing time-series pruned protocol information\n     */\n    async getProtocol(args) {\n        try {\n            const url = `${constants_1.DEFILLAMA_BASE_URL}/protocol/${args.protocolId}`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = (await response.json());\n            const prunedData = (0, utils_1.pruneGetProtocolResponse)(data);\n            return JSON.stringify(prunedData, null, 2);\n        }\n        catch (error) {\n            return `Error fetching protocol information: ${error instanceof Error ? error.message : String(error)}`;\n        }\n    }\n    /**\n     * Gets current token prices from DefiLlama.\n     * Note: Token addresses must include chain prefix (e.g., 'ethereum:0x...')\n     * The searchWidth parameter can be used to specify a time range in minutes.\n     *\n     * @param args - The token price request parameters\n     * @returns A JSON string containing token prices or error message\n     */\n    async getTokenPrices(args) {\n        try {\n            const params = new URLSearchParams({});\n            const tokens = args.tokens.join(\",\");\n            if (args.searchWidth) {\n                params.set(\"searchWidth\", args.searchWidth);\n            }\n            const url = `${constants_1.DEFILLAMA_PRICES_URL}/prices/current/${tokens}?${params.toString()}`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            return JSON.stringify(data, null, 2);\n        }\n        catch (error) {\n            return `Error fetching token prices: ${error instanceof Error ? error.message : String(error)}`;\n        }\n    }\n    /**\n     * Checks if the DefiLlama action provider supports the given network.\n     * DefiLlama is network-agnostic, so this always returns true.\n     *\n     * @returns True, as DefiLlama actions are supported on all networks.\n     */\n    supportsNetwork() {\n        return true;\n    }\n}\nexports.DefiLlamaActionProvider = DefiLlamaActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"find_protocol\",\n        description: `This tool will search for DeFi protocols on DefiLlama by name.\nIt takes the following inputs:\n- A search query string to match against protocol names\n\nImportant notes:\n- The search is case-insensitive\n- Returns all protocols whose names contain the search query\n- Returns metadata including TVL, chain, category, and other protocol details\n- Returns a \"No protocols found\" message if no matches are found`,\n        schema: schemas_1.SearchProtocolsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], DefiLlamaActionProvider.prototype, \"searchProtocols\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_protocol\",\n        description: `This tool will fetch detailed information about a specific protocol from DefiLlama.\nIt takes the following inputs:\n- The protocol identifier from DefiLlama (e.g. uniswap)\n\nImportant notes:\n- Returns null if the protocol is not found\n- Returns comprehensive data including TVL, description, category, and other metadata\n- Includes historical TVL data and chain-specific breakdowns where available\n- Returns error message if the protocol ID is invalid or the request fails\n- Prunes time-series data to 5 most recent entries to make the response more manageable`,\n        schema: schemas_1.GetProtocolSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], DefiLlamaActionProvider.prototype, \"getProtocol\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_token_prices\",\n        description: `This tool will fetch current token prices from DefiLlama.\nIt takes the following inputs:\n- An array of token addresses with chain prefixes\n- Optional time range in minutes for historical prices\n\nImportant notes:\n- Token addresses MUST include chain prefix (e.g., 'ethereum:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48')\n- The searchWidth parameter is optional, it's default api value is '4h', leave this blank if unspecified\n- Returns current prices for all specified tokens\n- Returns error message if any token address is invalid or the request fails`,\n        schema: schemas_1.GetTokenPricesSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], DefiLlamaActionProvider.prototype, \"getTokenPrices\", null);\n/**\n * Creates a new instance of the DefiLlama action provider.\n *\n * @returns A new DefiLlamaActionProvider instance\n */\nconst defillamaActionProvider = () => new DefiLlamaActionProvider();\nexports.defillamaActionProvider = defillamaActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/defillamaActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/defillama/index.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./defillamaActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/defillamaActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9kZWZpbGxhbWEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHFJQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2RlZmlsbGFtYS9pbmRleC5qcz8wMjY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVmaWxsYW1hQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/schemas.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/defillama/schemas.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SearchProtocolsSchema = exports.GetTokenPricesSchema = exports.GetProtocolSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for getting protocol information\n */\nexports.GetProtocolSchema = zod_1.z\n    .object({\n    protocolId: zod_1.z.string().describe(\"The protocol identifier from DefiLlama\"),\n})\n    .strict();\n/**\n * Input schema for getting token prices\n */\nexports.GetTokenPricesSchema = zod_1.z\n    .object({\n    tokens: zod_1.z\n        .array(zod_1.z.string())\n        .describe(\"Array of token addresses with chain prefix, e.g., ['ethereum:0x...']\"),\n    searchWidth: zod_1.z\n        .string()\n        .optional()\n        .describe(\"Optional time range in minutes to search for prices, default api value is '4h'\"),\n})\n    .strict();\n/**\n * Input schema for searching protocols\n */\nexports.SearchProtocolsSchema = zod_1.z\n    .object({\n    query: zod_1.z.string().describe(\"Search query to find protocols\"),\n})\n    .strict();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9kZWZpbGxhbWEvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyw0QkFBNEIsR0FBRyx5QkFBeUI7QUFDeEYsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2RlZmlsbGFtYS9zY2hlbWFzLmpzP2UyYjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlYXJjaFByb3RvY29sc1NjaGVtYSA9IGV4cG9ydHMuR2V0VG9rZW5QcmljZXNTY2hlbWEgPSBleHBvcnRzLkdldFByb3RvY29sU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGdldHRpbmcgcHJvdG9jb2wgaW5mb3JtYXRpb25cbiAqL1xuZXhwb3J0cy5HZXRQcm90b2NvbFNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBwcm90b2NvbElkOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIHByb3RvY29sIGlkZW50aWZpZXIgZnJvbSBEZWZpTGxhbWFcIiksXG59KVxuICAgIC5zdHJpY3QoKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBnZXR0aW5nIHRva2VuIHByaWNlc1xuICovXG5leHBvcnRzLkdldFRva2VuUHJpY2VzU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHRva2Vuczogem9kXzEuelxuICAgICAgICAuYXJyYXkoem9kXzEuei5zdHJpbmcoKSlcbiAgICAgICAgLmRlc2NyaWJlKFwiQXJyYXkgb2YgdG9rZW4gYWRkcmVzc2VzIHdpdGggY2hhaW4gcHJlZml4LCBlLmcuLCBbJ2V0aGVyZXVtOjB4Li4uJ11cIiksXG4gICAgc2VhcmNoV2lkdGg6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgIC5kZXNjcmliZShcIk9wdGlvbmFsIHRpbWUgcmFuZ2UgaW4gbWludXRlcyB0byBzZWFyY2ggZm9yIHByaWNlcywgZGVmYXVsdCBhcGkgdmFsdWUgaXMgJzRoJ1wiKSxcbn0pXG4gICAgLnN0cmljdCgpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHNlYXJjaGluZyBwcm90b2NvbHNcbiAqL1xuZXhwb3J0cy5TZWFyY2hQcm90b2NvbHNTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgcXVlcnk6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJTZWFyY2ggcXVlcnkgdG8gZmluZCBwcm90b2NvbHNcIiksXG59KVxuICAgIC5zdHJpY3QoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/defillama/utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pruneGetProtocolResponse = void 0;\n/**\n * Processes a time-series array by sorting by date (newest first) and limiting to maxEntries\n *\n * @param array - The time-series array to process\n * @param maxEntries - Maximum number of entries to keep\n * @returns The processed array (sorted and limited)\n */\nconst processTimeSeriesArray = (array, maxEntries) => {\n    if (array.length <= maxEntries) {\n        return array;\n    }\n    // Sort by date if array items have date property\n    if (array.length > 0 && typeof array[0] === \"object\" && array[0] !== null && \"date\" in array[0]) {\n        array.sort((a, b) => {\n            if (a &&\n                b &&\n                typeof a === \"object\" &&\n                typeof b === \"object\" &&\n                \"date\" in a &&\n                \"date\" in b &&\n                typeof a.date === \"number\" &&\n                typeof b.date === \"number\") {\n                return b.date - a.date;\n            }\n            return 0;\n        });\n    }\n    return array.slice(0, maxEntries);\n};\n/**\n * Prunes the protocol response by limiting time-series data arrays\n * to show only the most recent entries.\n *\n * @param data - The original protocol data from DefiLlama API\n * @param maxEntries - The maximum number of time-series entries to keep (default: 5)\n * @returns A pruned copy of the protocol data\n */\nconst pruneGetProtocolResponse = (data, maxEntries = 5) => {\n    if (!data) {\n        return null;\n    }\n    const result = { ...data };\n    const timeSeriesArrayPaths = [\"tvl\", \"tokens\", \"tokensInUsd\"];\n    const processNestedObject = (obj, currentPath = \"\") => {\n        if (!obj || typeof obj !== \"object\") {\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            const isTimeSeriesArray = timeSeriesArrayPaths.some(path => currentPath === path || currentPath.endsWith(`.${path}`));\n            if (isTimeSeriesArray) {\n                return processTimeSeriesArray(obj, maxEntries);\n            }\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = processNestedObject(obj[i], `${currentPath}[${i}]`);\n            }\n        }\n        else if (obj !== null) {\n            // Safe to cast to Record<string, unknown> since we know it's an object and not null\n            const record = obj;\n            for (const key of Object.keys(record)) {\n                const newPath = currentPath ? `${currentPath}.${key}` : key;\n                const value = record[key];\n                if (value && typeof value === \"object\") {\n                    record[key] = processNestedObject(value, newPath);\n                }\n            }\n        }\n        return obj;\n    };\n    // Special handling for chainTvls if it exists\n    if (result.chainTvls) {\n        for (const chain of Object.keys(result.chainTvls)) {\n            const chainData = result.chainTvls[chain];\n            for (const timeSeriesKey of timeSeriesArrayPaths) {\n                if (chainData[timeSeriesKey] && Array.isArray(chainData[timeSeriesKey])) {\n                    chainData[timeSeriesKey] = processTimeSeriesArray(chainData[timeSeriesKey], maxEntries);\n                }\n            }\n        }\n    }\n    processNestedObject(result);\n    return result;\n};\nexports.pruneGetProtocolResponse = pruneGetProtocolResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9kZWZpbGxhbWEvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5SEFBeUgsS0FBSztBQUM5SDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDLHdEQUF3RCxZQUFZLEdBQUcsRUFBRTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsWUFBWSxHQUFHLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9kZWZpbGxhbWEvdXRpbHMuanM/ZGUzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJ1bmVHZXRQcm90b2NvbFJlc3BvbnNlID0gdm9pZCAwO1xuLyoqXG4gKiBQcm9jZXNzZXMgYSB0aW1lLXNlcmllcyBhcnJheSBieSBzb3J0aW5nIGJ5IGRhdGUgKG5ld2VzdCBmaXJzdCkgYW5kIGxpbWl0aW5nIHRvIG1heEVudHJpZXNcbiAqXG4gKiBAcGFyYW0gYXJyYXkgLSBUaGUgdGltZS1zZXJpZXMgYXJyYXkgdG8gcHJvY2Vzc1xuICogQHBhcmFtIG1heEVudHJpZXMgLSBNYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIHRvIGtlZXBcbiAqIEByZXR1cm5zIFRoZSBwcm9jZXNzZWQgYXJyYXkgKHNvcnRlZCBhbmQgbGltaXRlZClcbiAqL1xuY29uc3QgcHJvY2Vzc1RpbWVTZXJpZXNBcnJheSA9IChhcnJheSwgbWF4RW50cmllcykgPT4ge1xuICAgIGlmIChhcnJheS5sZW5ndGggPD0gbWF4RW50cmllcykge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIC8vIFNvcnQgYnkgZGF0ZSBpZiBhcnJheSBpdGVtcyBoYXZlIGRhdGUgcHJvcGVydHlcbiAgICBpZiAoYXJyYXkubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJyYXlbMF0gPT09IFwib2JqZWN0XCIgJiYgYXJyYXlbMF0gIT09IG51bGwgJiYgXCJkYXRlXCIgaW4gYXJyYXlbMF0pIHtcbiAgICAgICAgYXJyYXkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEgJiZcbiAgICAgICAgICAgICAgICBiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgYiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiIGluIGEgJiZcbiAgICAgICAgICAgICAgICBcImRhdGVcIiBpbiBiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGEuZGF0ZSA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBiLmRhdGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYi5kYXRlIC0gYS5kYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgbWF4RW50cmllcyk7XG59O1xuLyoqXG4gKiBQcnVuZXMgdGhlIHByb3RvY29sIHJlc3BvbnNlIGJ5IGxpbWl0aW5nIHRpbWUtc2VyaWVzIGRhdGEgYXJyYXlzXG4gKiB0byBzaG93IG9ubHkgdGhlIG1vc3QgcmVjZW50IGVudHJpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgLSBUaGUgb3JpZ2luYWwgcHJvdG9jb2wgZGF0YSBmcm9tIERlZmlMbGFtYSBBUElcbiAqIEBwYXJhbSBtYXhFbnRyaWVzIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHRpbWUtc2VyaWVzIGVudHJpZXMgdG8ga2VlcCAoZGVmYXVsdDogNSlcbiAqIEByZXR1cm5zIEEgcHJ1bmVkIGNvcHkgb2YgdGhlIHByb3RvY29sIGRhdGFcbiAqL1xuY29uc3QgcHJ1bmVHZXRQcm90b2NvbFJlc3BvbnNlID0gKGRhdGEsIG1heEVudHJpZXMgPSA1KSA9PiB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IC4uLmRhdGEgfTtcbiAgICBjb25zdCB0aW1lU2VyaWVzQXJyYXlQYXRocyA9IFtcInR2bFwiLCBcInRva2Vuc1wiLCBcInRva2Vuc0luVXNkXCJdO1xuICAgIGNvbnN0IHByb2Nlc3NOZXN0ZWRPYmplY3QgPSAob2JqLCBjdXJyZW50UGF0aCA9IFwiXCIpID0+IHtcbiAgICAgICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICBjb25zdCBpc1RpbWVTZXJpZXNBcnJheSA9IHRpbWVTZXJpZXNBcnJheVBhdGhzLnNvbWUocGF0aCA9PiBjdXJyZW50UGF0aCA9PT0gcGF0aCB8fCBjdXJyZW50UGF0aC5lbmRzV2l0aChgLiR7cGF0aH1gKSk7XG4gICAgICAgICAgICBpZiAoaXNUaW1lU2VyaWVzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1RpbWVTZXJpZXNBcnJheShvYmosIG1heEVudHJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvYmpbaV0gPSBwcm9jZXNzTmVzdGVkT2JqZWN0KG9ialtpXSwgYCR7Y3VycmVudFBhdGh9WyR7aX1dYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBTYWZlIHRvIGNhc3QgdG8gUmVjb3JkPHN0cmluZywgdW5rbm93bj4gc2luY2Ugd2Uga25vdyBpdCdzIGFuIG9iamVjdCBhbmQgbm90IG51bGxcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IG9iajtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlY29yZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gY3VycmVudFBhdGggPyBgJHtjdXJyZW50UGF0aH0uJHtrZXl9YCA6IGtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlY29yZFtrZXldO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkW2tleV0gPSBwcm9jZXNzTmVzdGVkT2JqZWN0KHZhbHVlLCBuZXdQYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIGNoYWluVHZscyBpZiBpdCBleGlzdHNcbiAgICBpZiAocmVzdWx0LmNoYWluVHZscykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYWluIG9mIE9iamVjdC5rZXlzKHJlc3VsdC5jaGFpblR2bHMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFpbkRhdGEgPSByZXN1bHQuY2hhaW5UdmxzW2NoYWluXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGltZVNlcmllc0tleSBvZiB0aW1lU2VyaWVzQXJyYXlQYXRocykge1xuICAgICAgICAgICAgICAgIGlmIChjaGFpbkRhdGFbdGltZVNlcmllc0tleV0gJiYgQXJyYXkuaXNBcnJheShjaGFpbkRhdGFbdGltZVNlcmllc0tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWluRGF0YVt0aW1lU2VyaWVzS2V5XSA9IHByb2Nlc3NUaW1lU2VyaWVzQXJyYXkoY2hhaW5EYXRhW3RpbWVTZXJpZXNLZXldLCBtYXhFbnRyaWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc05lc3RlZE9iamVjdChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0cy5wcnVuZUdldFByb3RvY29sUmVzcG9uc2UgPSBwcnVuZUdldFByb3RvY29sUmVzcG9uc2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseSepoliaTokenToAssetId = exports.BaseTokenToAssetId = exports.abi = void 0;\nconst coinbase_sdk_1 = __webpack_require__(/*! @coinbase/coinbase-sdk */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nexports.abi = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"uint256\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"bool\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"uint256\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"uint8\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"string\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"string\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"uint256\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"bool\",\n            },\n        ],\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"bool\",\n            },\n        ],\n    },\n];\nexports.BaseTokenToAssetId = new Map([\n    [\"0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf\", coinbase_sdk_1.Coinbase.assets.Cbbtc],\n    [\"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\", coinbase_sdk_1.Coinbase.assets.Usdc],\n    [\"0x60a3E35Cc302bFA44Cb288Bc5a4F316Fdb1adb42\", coinbase_sdk_1.Coinbase.assets.Eurc],\n]);\nexports.BaseSepoliaTokenToAssetId = new Map([\n    [\"0xcbB7C0006F23900c38EB856149F799620fcb8A4a\", coinbase_sdk_1.Coinbase.assets.Cbbtc],\n    [\"0x036CbD53842c5426634e7929541eC2318f3dCF7e\", coinbase_sdk_1.Coinbase.assets.Usdc],\n    [\"0x808456652fdb597867f38412077A9182bf77359F\", coinbase_sdk_1.Coinbase.assets.Eurc],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/erc20ActionProvider.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc20/erc20ActionProvider.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.erc20ActionProvider = exports.ERC20ActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/schemas.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\n/**\n * ERC20ActionProvider is an action provider for ERC20 tokens.\n */\nclass ERC20ActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the ERC20ActionProvider.\n     */\n    constructor() {\n        super(\"erc20\", []);\n        /**\n         * Checks if the ERC20 action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the ERC20 action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\";\n    }\n    /**\n     * Gets the balance of an ERC20 token.\n     *\n     * @param walletProvider - The wallet provider to get the balance from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the balance.\n     */\n    async getBalance(walletProvider, args) {\n        try {\n            const balance = await walletProvider.readContract({\n                address: args.contractAddress,\n                abi: constants_1.abi,\n                functionName: \"balanceOf\",\n                args: [walletProvider.getAddress()],\n            });\n            const decimals = await walletProvider.readContract({\n                address: args.contractAddress,\n                abi: constants_1.abi,\n                functionName: \"decimals\",\n                args: [],\n            });\n            return `Balance of ${args.contractAddress} is ${(0, viem_1.formatUnits)(balance, decimals)}`;\n        }\n        catch (error) {\n            return `Error getting balance: ${error}`;\n        }\n    }\n    /**\n     * Transfers a specified amount of an ERC20 token to a destination onchain.\n     *\n     * @param walletProvider - The wallet provider to transfer the asset from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the transfer details.\n     */\n    async transfer(walletProvider, args) {\n        try {\n            // Check if we can do gasless transfer\n            const isCdpWallet = walletProvider.getName() === \"cdp_wallet_provider\";\n            const network = walletProvider.getNetwork();\n            const tokenAddress = (0, viem_1.getAddress)(args.contractAddress);\n            const canDoGasless = isCdpWallet &&\n                ((network.networkId === \"base-mainnet\" && constants_1.BaseTokenToAssetId.has(tokenAddress)) ||\n                    (network.networkId === \"base-sepolia\" && constants_1.BaseSepoliaTokenToAssetId.has(tokenAddress)));\n            if (canDoGasless) {\n                // Cast to CdpWalletProvider to access erc20Transfer\n                const cdpWallet = walletProvider;\n                const assetId = network.networkId === \"base-mainnet\"\n                    ? constants_1.BaseTokenToAssetId.get(tokenAddress)\n                    : constants_1.BaseSepoliaTokenToAssetId.get(tokenAddress);\n                const hash = await cdpWallet.gaslessERC20Transfer(assetId, args.destination, args.amount);\n                await walletProvider.waitForTransactionReceipt(hash);\n                return `Transferred ${args.amount} of ${args.contractAddress} to ${args.destination} using gasless transfer.\\nTransaction hash: ${hash}`;\n            }\n            // Fallback to regular transfer\n            const hash = await walletProvider.sendTransaction({\n                to: args.contractAddress,\n                data: (0, viem_1.encodeFunctionData)({\n                    abi: constants_1.abi,\n                    functionName: \"transfer\",\n                    args: [args.destination, BigInt(args.amount)],\n                }),\n            });\n            await walletProvider.waitForTransactionReceipt(hash);\n            return `Transferred ${args.amount} of ${args.contractAddress} to ${args.destination}.\\nTransaction hash for the transfer: ${hash}`;\n        }\n        catch (error) {\n            return `Error transferring the asset: ${error}`;\n        }\n    }\n}\nexports.ERC20ActionProvider = ERC20ActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_balance\",\n        description: `\n    This tool will get the balance of an ERC20 asset in the wallet. It takes the contract address as input.\n    `,\n        schema: schemas_1.GetBalanceSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], ERC20ActionProvider.prototype, \"getBalance\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"transfer\",\n        description: `\n    This tool will transfer an ERC20 token from the wallet to another onchain address.\n\nIt takes the following inputs:\n- amount: The amount to transfer\n- contractAddress: The contract address of the token to transfer\n- destination: Where to send the funds (can be an onchain address, ENS 'example.eth', or Basename 'example.base.eth')\n\nImportant notes:\n- Ensure sufficient balance of the input asset before transferring\n- When sending native assets (e.g. 'eth' on base-mainnet), ensure there is sufficient balance for the transfer itself AND the gas cost of this transfer\n    `,\n        schema: schemas_1.TransferSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], ERC20ActionProvider.prototype, \"transfer\", null);\nconst erc20ActionProvider = () => new ERC20ActionProvider();\nexports.erc20ActionProvider = erc20ActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/erc20ActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc20/index.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./erc20ActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/erc20ActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9lcmMyMC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMseUhBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvZXJjMjAvaW5kZXguanM/NTRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VyYzIwQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/schemas.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc20/schemas.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetBalanceSchema = exports.TransferSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for transfer action.\n */\nexports.TransferSchema = zod_1.z\n    .object({\n    amount: zod_1.z.custom().describe(\"The amount of the asset to transfer\"),\n    contractAddress: zod_1.z.string().describe(\"The contract address of the token to transfer\"),\n    destination: zod_1.z.string().describe(\"The destination to transfer the funds\"),\n})\n    .strip()\n    .describe(\"Instructions for transferring assets\");\n/**\n * Input schema for get balance action.\n */\nexports.GetBalanceSchema = zod_1.z\n    .object({\n    contractAddress: zod_1.z\n        .string()\n        .describe(\"The contract address of the token to get the balance for\"),\n})\n    .strip()\n    .describe(\"Instructions for getting wallet balance\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9lcmMyMC9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLHNCQUFzQjtBQUNqRCxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2VyYzIwL3NjaGVtYXMuanM/MmM0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0QmFsYW5jZVNjaGVtYSA9IGV4cG9ydHMuVHJhbnNmZXJTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgdHJhbnNmZXIgYWN0aW9uLlxuICovXG5leHBvcnRzLlRyYW5zZmVyU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGFtb3VudDogem9kXzEuei5jdXN0b20oKS5kZXNjcmliZShcIlRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIHRyYW5zZmVyXCIpLFxuICAgIGNvbnRyYWN0QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSB0b2tlbiB0byB0cmFuc2ZlclwiKSxcbiAgICBkZXN0aW5hdGlvbjogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBkZXN0aW5hdGlvbiB0byB0cmFuc2ZlciB0aGUgZnVuZHNcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciB0cmFuc2ZlcnJpbmcgYXNzZXRzXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGdldCBiYWxhbmNlIGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5HZXRCYWxhbmNlU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGNvbnRyYWN0QWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIHRva2VuIHRvIGdldCB0aGUgYmFsYW5jZSBmb3JcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciBnZXR0aW5nIHdhbGxldCBiYWxhbmNlXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc721/constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC721_ABI = void 0;\nexports.ERC721_ABI = [\n    {\n        inputs: [{ internalType: \"address\", name: \"to\", type: \"address\" }],\n        name: \"mint\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"approved\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"balance\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ownerOf\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getApproved\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/erc721ActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc721/erc721ActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.erc721ActionProvider = exports.Erc721ActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/schemas.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/constants.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\n/**\n * Erc721ActionProvider is an action provider for Erc721 contract interactions.\n */\nclass Erc721ActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the Erc721ActionProvider class.\n     */\n    constructor() {\n        super(\"erc721\", []);\n        /**\n         * Checks if the Erc721 action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Erc721 action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\";\n    }\n    /**\n     * Mints an NFT (ERC-721) to a specified destination address onchain.\n     *\n     * @param walletProvider - The wallet provider to mint the NFT from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the NFT mint details.\n     */\n    async mint(walletProvider, args) {\n        try {\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.ERC721_ABI,\n                functionName: \"mint\",\n                args: [args.destination],\n            });\n            const hash = await walletProvider.sendTransaction({\n                to: args.contractAddress,\n                data,\n            });\n            await walletProvider.waitForTransactionReceipt(hash);\n            return `Successfully minted NFT ${args.contractAddress} to ${args.destination}`;\n        }\n        catch (error) {\n            return `Error minting NFT ${args.contractAddress} to ${args.destination}: ${error}`;\n        }\n    }\n    /**\n     * Transfers an NFT (ERC721 token) to a destination address.\n     *\n     * @param walletProvider - The wallet provider to transfer the NFT from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the transfer details.\n     */\n    async transfer(walletProvider, args) {\n        try {\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.ERC721_ABI,\n                functionName: \"transferFrom\",\n                args: [args.fromAddress, args.destination, BigInt(args.tokenId)],\n            });\n            const hash = await walletProvider.sendTransaction({\n                to: args.contractAddress,\n                data,\n            });\n            await walletProvider.waitForTransactionReceipt(hash);\n            return `Successfully transferred NFT ${args.contractAddress} with tokenId ${args.tokenId} to ${args.destination}`;\n        }\n        catch (error) {\n            return `Error transferring NFT ${args.contractAddress} with tokenId ${args.tokenId} to ${args.destination}: ${error}`;\n        }\n    }\n    /**\n     * Gets the NFT balance for a given address and contract.\n     *\n     * @param walletProvider - The wallet provider to check the balance with.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the NFT balance details.\n     */\n    async getBalance(walletProvider, args) {\n        try {\n            const address = args.address || walletProvider.getAddress();\n            const balance = await walletProvider.readContract({\n                address: args.contractAddress,\n                abi: constants_1.ERC721_ABI,\n                functionName: \"balanceOf\",\n                args: [address],\n            });\n            return `Balance of NFTs for contract ${args.contractAddress} at address ${address} is ${balance}`;\n        }\n        catch (error) {\n            return `Error getting NFT balance for contract ${args.contractAddress}: ${error}`;\n        }\n    }\n}\nexports.Erc721ActionProvider = Erc721ActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"mint\",\n        description: `\nThis tool will mint an NFT (ERC-721) to a specified destination address onchain via a contract invocation. \nIt takes the contract address of the NFT onchain and the destination address onchain that will receive the NFT as inputs. \nDo not use the contract address as the destination address. If you are unsure of the destination address, please ask the user before proceeding.\n`,\n        schema: schemas_1.MintSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], Erc721ActionProvider.prototype, \"mint\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"transfer\",\n        description: `\nThis tool will transfer an NFT (ERC721 token) from the wallet to another onchain address.\n\nIt takes the following inputs:\n- contractAddress: The NFT contract address\n- tokenId: The ID of the specific NFT to transfer\n- destination: Onchain address to send the NFT\n\nImportant notes:\n- Ensure you have ownership of the NFT before attempting transfer\n- Ensure there is sufficient native token balance for gas fees\n- The wallet must either own the NFT or have approval to transfer it\n`,\n        schema: schemas_1.TransferSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], Erc721ActionProvider.prototype, \"transfer\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_balance\",\n        description: `\nThis tool will check the NFT (ERC721 token) balance for a given address.\n\nIt takes the following inputs:\n- contractAddress: The NFT contract address to check balance for\n- address: (Optional) The address to check NFT balance for. If not provided, uses the wallet's address\n`,\n        schema: schemas_1.GetBalanceSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], Erc721ActionProvider.prototype, \"getBalance\", null);\nconst erc721ActionProvider = () => new Erc721ActionProvider();\nexports.erc721ActionProvider = erc721ActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/erc721ActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc721/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./erc721ActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/erc721ActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9lcmM3MjEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2VyYzcyMS9pbmRleC5qcz8xYTM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJjNzIxQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/erc721/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransferSchema = exports.MintSchema = exports.GetBalanceSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for get NFT (ERC721) balance action.\n */\nexports.GetBalanceSchema = zod_1.z\n    .object({\n    contractAddress: zod_1.z.string().describe(\"The NFT contract address to check balance for\"),\n    address: zod_1.z\n        .string()\n        .optional()\n        .describe(\"The address to check NFT balance for. If not provided, uses the wallet's default address\"),\n})\n    .strip()\n    .describe(\"Instructions for getting NFT balance\");\n/**\n * Input schema for mint NFT (ERC721) action.\n */\nexports.MintSchema = zod_1.z\n    .object({\n    contractAddress: zod_1.z.string().describe(\"The contract address of the NFT to mint\"),\n    destination: zod_1.z.string().describe(\"The onchain destination address that will receive the NFT\"),\n})\n    .strip()\n    .describe(\"Instructions for minting an NFT\");\n/**\n * Input schema for NFT (ERC721) transfer action.\n */\nexports.TransferSchema = zod_1.z\n    .object({\n    contractAddress: zod_1.z.string().describe(\"The NFT contract address to interact with\"),\n    tokenId: zod_1.z.string().describe(\"The ID of the NFT to transfer\"),\n    destination: zod_1.z\n        .string()\n        .describe(\"The destination to transfer the NFT, e.g. `0x58dBecc0894Ab4C24F98a0e684c989eD07e4e027`, `example.eth`, `example.base.eth`\"),\n    fromAddress: zod_1.z\n        .string()\n        .optional()\n        .describe(\"The address to transfer from. If not provided, defaults to the wallet's default address\"),\n})\n    .strip()\n    .describe(\"Input schema for transferring an NFT\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9lcmM3MjEvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxrQkFBa0IsR0FBRyx3QkFBd0I7QUFDdEUsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvZXJjNzIxL3NjaGVtYXMuanM/YWIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhbnNmZXJTY2hlbWEgPSBleHBvcnRzLk1pbnRTY2hlbWEgPSBleHBvcnRzLkdldEJhbGFuY2VTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgZ2V0IE5GVCAoRVJDNzIxKSBiYWxhbmNlIGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5HZXRCYWxhbmNlU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGNvbnRyYWN0QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBORlQgY29udHJhY3QgYWRkcmVzcyB0byBjaGVjayBiYWxhbmNlIGZvclwiKSxcbiAgICBhZGRyZXNzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYWRkcmVzcyB0byBjaGVjayBORlQgYmFsYW5jZSBmb3IuIElmIG5vdCBwcm92aWRlZCwgdXNlcyB0aGUgd2FsbGV0J3MgZGVmYXVsdCBhZGRyZXNzXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgZ2V0dGluZyBORlQgYmFsYW5jZVwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBtaW50IE5GVCAoRVJDNzIxKSBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuTWludFNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBjb250cmFjdEFkZHJlc3M6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgY29udHJhY3QgYWRkcmVzcyBvZiB0aGUgTkZUIHRvIG1pbnRcIiksXG4gICAgZGVzdGluYXRpb246IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgb25jaGFpbiBkZXN0aW5hdGlvbiBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBORlRcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciBtaW50aW5nIGFuIE5GVFwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBORlQgKEVSQzcyMSkgdHJhbnNmZXIgYWN0aW9uLlxuICovXG5leHBvcnRzLlRyYW5zZmVyU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGNvbnRyYWN0QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBORlQgY29udHJhY3QgYWRkcmVzcyB0byBpbnRlcmFjdCB3aXRoXCIpLFxuICAgIHRva2VuSWQ6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgSUQgb2YgdGhlIE5GVCB0byB0cmFuc2ZlclwiKSxcbiAgICBkZXN0aW5hdGlvbjogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGRlc3RpbmF0aW9uIHRvIHRyYW5zZmVyIHRoZSBORlQsIGUuZy4gYDB4NThkQmVjYzA4OTRBYjRDMjRGOThhMGU2ODRjOTg5ZUQwN2U0ZTAyN2AsIGBleGFtcGxlLmV0aGAsIGBleGFtcGxlLmJhc2UuZXRoYFwiKSxcbiAgICBmcm9tQWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgZnJvbS4gSWYgbm90IHByb3ZpZGVkLCBkZWZhdWx0cyB0byB0aGUgd2FsbGV0J3MgZGVmYXVsdCBhZGRyZXNzXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIklucHV0IHNjaGVtYSBmb3IgdHJhbnNmZXJyaW5nIGFuIE5GVFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/farcasterActionProvider.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/farcasterActionProvider.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.farcasterActionProvider = exports.FarcasterActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/schemas.js\");\n/**\n * FarcasterActionProvider is an action provider for Farcaster.\n */\nclass FarcasterActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the FarcasterActionProvider class.\n     *\n     * @param config - The configuration options for the FarcasterActionProvider.\n     */\n    constructor(config = {}) {\n        super(\"farcaster\", []);\n        /**\n         * Checks if the Farcaster action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Farcaster action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\";\n        const neynarApiKey = config.neynarApiKey || process.env.NEYNAR_API_KEY;\n        const signerUuid = config.signerUuid || process.env.NEYNAR_MANAGER_SIGNER;\n        const agentFid = config.agentFid || process.env.AGENT_FID;\n        if (!neynarApiKey) {\n            throw new Error(\"NEYNAR_API_KEY is not configured.\");\n        }\n        if (!signerUuid) {\n            throw new Error(\"NEYNAR_MANAGER_SIGNER is not configured.\");\n        }\n        if (!agentFid) {\n            throw new Error(\"AGENT_FID is not configured.\");\n        }\n        this.neynarApiKey = neynarApiKey;\n        this.signerUuid = signerUuid;\n        this.agentFid = agentFid;\n    }\n    /**\n     * Retrieves agent's Farcaster account details.\n     *\n     * @param _ - The input arguments for the action.\n     * @returns A message containing account details for the agent's Farcaster account.\n     */\n    async accountDetails(_) {\n        try {\n            const headers = {\n                accept: \"application/json\",\n                \"x-api-key\": this.neynarApiKey,\n                \"x-neynar-experimental\": \"true\",\n            };\n            const response = await fetch(`https://api.neynar.com/v2/farcaster/user/bulk?fids=${this.agentFid}`, {\n                method: \"GET\",\n                headers,\n            });\n            const { users } = await response.json();\n            return `Successfully retrieved Farcaster account details:\\n${JSON.stringify(users[0])}`;\n        }\n        catch (error) {\n            return `Error retrieving Farcaster account details:\\n${error}`;\n        }\n    }\n    /**\n     * Posts a cast on Farcaster.\n     *\n     * @param args - The input arguments for the action.\n     * @returns A message indicating the success or failure of the cast posting.\n     */\n    async postCast(args) {\n        try {\n            const headers = {\n                api_key: this.neynarApiKey,\n                \"Content-Type\": \"application/json\",\n            };\n            const response = await fetch(\"https://api.neynar.com/v2/farcaster/cast\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify({\n                    signer_uuid: this.signerUuid,\n                    text: args.castText,\n                }),\n            });\n            const data = await response.json();\n            return `Successfully posted cast to Farcaster:\\n${JSON.stringify(data)}`;\n        }\n        catch (error) {\n            return `Error posting to Farcaster:\\n${error}`;\n        }\n    }\n}\nexports.FarcasterActionProvider = FarcasterActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"account_details\",\n        description: `\nThis tool will retrieve the account details for the agent's Farcaster account.\nThe tool takes the FID of the agent's account.\n\nA successful response will return a message with the API response as a JSON payload:\n    { \"object\": \"user\", \"fid\": 193,\" username\": \"derek\", \"display_name\": \"Derek\", ... }\n\nA failure response will return a message with the Farcaster API request error:\n    Unable to retrieve account details.\n`,\n        schema: schemas_1.FarcasterAccountDetailsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FarcasterActionProvider.prototype, \"accountDetails\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"post_cast\",\n        description: `\nThis tool will post a cast to Farcaster. The tool takes the text of the cast as input. Casts can be maximum 280 characters.\n\nA successful response will return a message with the API response as a JSON payload:\n    {}\n\nA failure response will return a message with the Farcaster API request error:\n    You are not allowed to post a cast with duplicate content.\n`,\n        schema: schemas_1.FarcasterPostCastSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FarcasterActionProvider.prototype, \"postCast\", null);\nconst farcasterActionProvider = (config = {}) => new FarcasterActionProvider(config);\nexports.farcasterActionProvider = farcasterActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/farcasterActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/index.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./farcasterActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/farcasterActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mYXJjYXN0ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHFHQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxxSUFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mYXJjYXN0ZXIvaW5kZXguanM/YzU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ZhcmNhc3RlckFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/schemas.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/schemas.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FarcasterPostCastSchema = exports.FarcasterAccountDetailsSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input argument schema for the account_details action.\n */\nexports.FarcasterAccountDetailsSchema = zod_1.z\n    .object({})\n    .strip()\n    .describe(\"Input schema for retrieving account details\");\n/**\n * Input argument schema for the post cast action.\n */\nexports.FarcasterPostCastSchema = zod_1.z\n    .object({\n    castText: zod_1.z.string().max(280, \"Cast text must be a maximum of 280 characters.\"),\n})\n    .strip()\n    .describe(\"Input schema for posting a text-based cast\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mYXJjYXN0ZXIvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0IsR0FBRyxxQ0FBcUM7QUFDdkUsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mYXJjYXN0ZXIvc2NoZW1hcy5qcz9jNDFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GYXJjYXN0ZXJQb3N0Q2FzdFNjaGVtYSA9IGV4cG9ydHMuRmFyY2FzdGVyQWNjb3VudERldGFpbHNTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IGFyZ3VtZW50IHNjaGVtYSBmb3IgdGhlIGFjY291bnRfZGV0YWlscyBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuRmFyY2FzdGVyQWNjb3VudERldGFpbHNTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7fSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIklucHV0IHNjaGVtYSBmb3IgcmV0cmlldmluZyBhY2NvdW50IGRldGFpbHNcIik7XG4vKipcbiAqIElucHV0IGFyZ3VtZW50IHNjaGVtYSBmb3IgdGhlIHBvc3QgY2FzdCBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuRmFyY2FzdGVyUG9zdENhc3RTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgY2FzdFRleHQ6IHpvZF8xLnouc3RyaW5nKCkubWF4KDI4MCwgXCJDYXN0IHRleHQgbXVzdCBiZSBhIG1heGltdW0gb2YgMjgwIGNoYXJhY3RlcnMuXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIklucHV0IHNjaGVtYSBmb3IgcG9zdGluZyBhIHRleHQtYmFzZWQgY2FzdFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/constants.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PERMIT_TYPES = exports.PERMIT_DETAILS = exports.PERMIT2_ABI = exports.UNIVERSAL_ROUTER_ABI = exports.URCommands = exports.V4Actions = exports.IV4RouterAbiExactOutput = exports.IV4RouterAbiExactInput = exports.QUOTER_ABI = exports.POSITION_MANAGER_ABI = exports.FAST_FLAUNCH_ZAP_ABI = exports.Permit2Address = exports.UniversalRouterAddress = exports.QuoterAddress = exports.FLETHHooksAddress = exports.FLETHAddress = exports.FlaunchPositionManagerAddress = exports.FastFlaunchZapAddress = exports.ERC20_ABI = void 0;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst chains_1 = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nconst constants_1 = __webpack_require__(/*! ../erc20/constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\");\nObject.defineProperty(exports, \"ERC20_ABI\", ({ enumerable: true, get: function () { return constants_1.abi; } }));\nexports.FastFlaunchZapAddress = {\n    [chains_1.base.id]: \"0xd79e27f51ddf9df5ee76106ee192530f474b02f6\",\n    [chains_1.baseSepolia.id]: \"0x251e97446a7019E5DA4860d4CF47291321C693D0\",\n};\nexports.FlaunchPositionManagerAddress = {\n    [chains_1.base.id]: \"0x51Bba15255406Cfe7099a42183302640ba7dAFDC\",\n    [chains_1.baseSepolia.id]: \"0x9A7059cA00dA92843906Cb4bCa1D005cE848AFdC\",\n};\nexports.FLETHAddress = {\n    [chains_1.base.id]: \"0x000000000D564D5be76f7f0d28fE52605afC7Cf8\",\n    [chains_1.baseSepolia.id]: \"0x79FC52701cD4BE6f9Ba9aDC94c207DE37e3314eb\",\n};\nexports.FLETHHooksAddress = {\n    [chains_1.base.id]: \"0x9E433F32bb5481a9CA7DFF5b3af74A7ed041a888\",\n    [chains_1.baseSepolia.id]: \"0x4bd2ca15286c96e4e731337de8b375da6841e888\",\n};\nexports.QuoterAddress = {\n    [chains_1.base.id]: \"0x0d5e0f971ed27fbff6c2837bf31316121532048d\",\n    [chains_1.baseSepolia.id]: \"0x4a6513c898fe1b2d0e78d3b0e0a4a151589b1cba\",\n};\nexports.UniversalRouterAddress = {\n    [chains_1.base.id]: \"0x6fF5693b99212Da76ad316178A184AB56D299b43\",\n    [chains_1.baseSepolia.id]: \"0x492E6456D9528771018DeB9E87ef7750EF184104\",\n};\nexports.Permit2Address = {\n    [chains_1.base.id]: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n    [chains_1.baseSepolia.id]: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n};\nexports.FAST_FLAUNCH_ZAP_ABI = [\n    {\n        type: \"function\",\n        name: \"flaunch\",\n        inputs: [\n            {\n                name: \"_params\",\n                type: \"tuple\",\n                internalType: \"struct FastFlaunchZap.FastFlaunchParams\",\n                components: [\n                    {\n                        name: \"name\",\n                        type: \"string\",\n                        internalType: \"string\",\n                    },\n                    {\n                        name: \"symbol\",\n                        type: \"string\",\n                        internalType: \"string\",\n                    },\n                    {\n                        name: \"tokenUri\",\n                        type: \"string\",\n                        internalType: \"string\",\n                    },\n                    {\n                        name: \"creator\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                ],\n            },\n        ],\n        outputs: [\n            {\n                name: \"memecoin_\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n];\nexports.POSITION_MANAGER_ABI = (0, viem_1.parseAbi)([\n    \"event PoolCreated(bytes32 indexed _poolId, address _memecoin, address _memecoinTreasury, uint256 _tokenId, bool _currencyFlipped, uint256 _flaunchFee, (string name, string symbol, string tokenUri, uint256 initialTokenFairLaunch, uint256 premineAmount, address creator, uint24 creatorFeeAllocation, uint256 flaunchAt, bytes initialPriceParams, bytes feeCalculatorParams) _params)\",\n    \"event PoolSwap(bytes32 indexed poolId, int flAmount0, int flAmount1, int flFee0, int flFee1, int ispAmount0, int ispAmount1, int ispFee0, int ispFee1, int uniAmount0, int uniAmount1, int uniFee0, int uniFee1)\",\n]);\nexports.QUOTER_ABI = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IPoolManager\",\n                name: \"_poolManager\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [{ internalType: \"PoolId\", name: \"poolId\", type: \"bytes32\" }],\n        name: \"NotEnoughLiquidity\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"NotPoolManager\", type: \"error\" },\n    { inputs: [], name: \"NotSelf\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"QuoteSwap\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"UnexpectedCallSuccess\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"bytes\", name: \"revertData\", type: \"bytes\" }],\n        name: \"UnexpectedRevertBytes\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"Currency\", name: \"exactCurrency\", type: \"address\" },\n                    {\n                        components: [\n                            {\n                                internalType: \"Currency\",\n                                name: \"intermediateCurrency\",\n                                type: \"address\",\n                            },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                            { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct PathKey[]\",\n                        name: \"path\",\n                        type: \"tuple[]\",\n                    },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"_quoteExactInput\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            { internalType: \"Currency\", name: \"currency0\", type: \"address\" },\n                            { internalType: \"Currency\", name: \"currency1\", type: \"address\" },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PoolKey\",\n                        name: \"poolKey\",\n                        type: \"tuple\",\n                    },\n                    { internalType: \"bool\", name: \"zeroForOne\", type: \"bool\" },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                    { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"_quoteExactInputSingle\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"Currency\", name: \"exactCurrency\", type: \"address\" },\n                    {\n                        components: [\n                            {\n                                internalType: \"Currency\",\n                                name: \"intermediateCurrency\",\n                                type: \"address\",\n                            },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                            { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct PathKey[]\",\n                        name: \"path\",\n                        type: \"tuple[]\",\n                    },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"_quoteExactOutput\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            { internalType: \"Currency\", name: \"currency0\", type: \"address\" },\n                            { internalType: \"Currency\", name: \"currency1\", type: \"address\" },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PoolKey\",\n                        name: \"poolKey\",\n                        type: \"tuple\",\n                    },\n                    { internalType: \"bool\", name: \"zeroForOne\", type: \"bool\" },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                    { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"_quoteExactOutputSingle\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"poolManager\",\n        outputs: [{ internalType: \"contract IPoolManager\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"Currency\", name: \"exactCurrency\", type: \"address\" },\n                    {\n                        components: [\n                            {\n                                internalType: \"Currency\",\n                                name: \"intermediateCurrency\",\n                                type: \"address\",\n                            },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                            { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct PathKey[]\",\n                        name: \"path\",\n                        type: \"tuple[]\",\n                    },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactInput\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            { internalType: \"Currency\", name: \"currency0\", type: \"address\" },\n                            { internalType: \"Currency\", name: \"currency1\", type: \"address\" },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PoolKey\",\n                        name: \"poolKey\",\n                        type: \"tuple\",\n                    },\n                    { internalType: \"bool\", name: \"zeroForOne\", type: \"bool\" },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                    { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactInputSingle\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"Currency\", name: \"exactCurrency\", type: \"address\" },\n                    {\n                        components: [\n                            {\n                                internalType: \"Currency\",\n                                name: \"intermediateCurrency\",\n                                type: \"address\",\n                            },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                            { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct PathKey[]\",\n                        name: \"path\",\n                        type: \"tuple[]\",\n                    },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactOutput\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            { internalType: \"Currency\", name: \"currency0\", type: \"address\" },\n                            { internalType: \"Currency\", name: \"currency1\", type: \"address\" },\n                            { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                            { internalType: \"int24\", name: \"tickSpacing\", type: \"int24\" },\n                            {\n                                internalType: \"contract IHooks\",\n                                name: \"hooks\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PoolKey\",\n                        name: \"poolKey\",\n                        type: \"tuple\",\n                    },\n                    { internalType: \"bool\", name: \"zeroForOne\", type: \"bool\" },\n                    { internalType: \"uint128\", name: \"exactAmount\", type: \"uint128\" },\n                    { internalType: \"bytes\", name: \"hookData\", type: \"bytes\" },\n                ],\n                internalType: \"struct IV4Quoter.QuoteExactSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactOutputSingle\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes\", name: \"data\", type: \"bytes\" }],\n        name: \"unlockCallback\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nexports.IV4RouterAbiExactInput = [\n    {\n        type: \"tuple\",\n        components: [\n            { type: \"address\", name: \"currencyIn\" },\n            {\n                type: \"tuple[]\",\n                name: \"path\",\n                components: [\n                    { type: \"address\", name: \"intermediateCurrency\" },\n                    { type: \"uint24\", name: \"fee\" },\n                    { type: \"int24\", name: \"tickSpacing\" },\n                    { type: \"address\", name: \"hooks\" },\n                    { type: \"bytes\", name: \"hookData\" },\n                ],\n            },\n            { type: \"uint128\", name: \"amountIn\" },\n            { type: \"uint128\", name: \"amountOutMinimum\" },\n        ],\n    },\n];\nexports.IV4RouterAbiExactOutput = [\n    {\n        type: \"tuple\",\n        components: [\n            { type: \"address\", name: \"currencyOut\" },\n            {\n                type: \"tuple[]\",\n                name: \"path\",\n                components: [\n                    { type: \"address\", name: \"intermediateCurrency\" },\n                    { type: \"uint24\", name: \"fee\" },\n                    { type: \"int24\", name: \"tickSpacing\" },\n                    { type: \"address\", name: \"hooks\" },\n                    { type: \"bytes\", name: \"hookData\" },\n                ],\n            },\n            { type: \"uint128\", name: \"amountOut\" },\n            { type: \"uint128\", name: \"amountInMaximum\" },\n        ],\n    },\n];\nexports.V4Actions = {\n    SWAP_EXACT_IN: \"07\",\n    SWAP_EXACT_OUT: \"09\",\n    SETTLE_ALL: \"0c\",\n    TAKE_ALL: \"0f\",\n};\nexports.URCommands = {\n    V4_SWAP: \"10\",\n    SWEEP: \"04\",\n    PERMIT2_PERMIT: \"0a\",\n};\nexports.UNIVERSAL_ROUTER_ABI = [\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"permit2\", type: \"address\" },\n                    { internalType: \"address\", name: \"weth9\", type: \"address\" },\n                    { internalType: \"address\", name: \"v2Factory\", type: \"address\" },\n                    { internalType: \"address\", name: \"v3Factory\", type: \"address\" },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"pairInitCodeHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"poolInitCodeHash\",\n                        type: \"bytes32\",\n                    },\n                    { internalType: \"address\", name: \"v4PoolManager\", type: \"address\" },\n                    {\n                        internalType: \"address\",\n                        name: \"v3NFTPositionManager\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"v4PositionManager\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct RouterParameters\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    { inputs: [], name: \"BalanceTooLow\", type: \"error\" },\n    { inputs: [], name: \"ContractLocked\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"Currency\", name: \"currency\", type: \"address\" }],\n        name: \"DeltaNotNegative\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"Currency\", name: \"currency\", type: \"address\" }],\n        name: \"DeltaNotPositive\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"ETHNotAccepted\", type: \"error\" },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"commandIndex\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"message\", type: \"bytes\" },\n        ],\n        name: \"ExecutionFailed\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"FromAddressIsNotOwner\", type: \"error\" },\n    { inputs: [], name: \"InputLengthMismatch\", type: \"error\" },\n    { inputs: [], name: \"InsufficientBalance\", type: \"error\" },\n    { inputs: [], name: \"InsufficientETH\", type: \"error\" },\n    { inputs: [], name: \"InsufficientToken\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"bytes4\", name: \"action\", type: \"bytes4\" }],\n        name: \"InvalidAction\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"InvalidBips\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"commandType\", type: \"uint256\" }],\n        name: \"InvalidCommandType\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"InvalidEthSender\", type: \"error\" },\n    { inputs: [], name: \"InvalidPath\", type: \"error\" },\n    { inputs: [], name: \"InvalidReserves\", type: \"error\" },\n    { inputs: [], name: \"LengthMismatch\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n        name: \"NotAuthorizedForToken\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"NotPoolManager\", type: \"error\" },\n    { inputs: [], name: \"OnlyMintAllowed\", type: \"error\" },\n    { inputs: [], name: \"SliceOutOfBounds\", type: \"error\" },\n    { inputs: [], name: \"TransactionDeadlinePassed\", type: \"error\" },\n    { inputs: [], name: \"UnsafeCast\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"action\", type: \"uint256\" }],\n        name: \"UnsupportedAction\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"V2InvalidPath\", type: \"error\" },\n    { inputs: [], name: \"V2TooLittleReceived\", type: \"error\" },\n    { inputs: [], name: \"V2TooMuchRequested\", type: \"error\" },\n    { inputs: [], name: \"V3InvalidAmountOut\", type: \"error\" },\n    { inputs: [], name: \"V3InvalidCaller\", type: \"error\" },\n    { inputs: [], name: \"V3InvalidSwap\", type: \"error\" },\n    { inputs: [], name: \"V3TooLittleReceived\", type: \"error\" },\n    { inputs: [], name: \"V3TooMuchRequested\", type: \"error\" },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"minAmountOutReceived\",\n                type: \"uint256\",\n            },\n            { internalType: \"uint256\", name: \"amountReceived\", type: \"uint256\" },\n        ],\n        name: \"V4TooLittleReceived\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"maxAmountInRequested\",\n                type: \"uint256\",\n            },\n            { internalType: \"uint256\", name: \"amountRequested\", type: \"uint256\" },\n        ],\n        name: \"V4TooMuchRequested\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"V3_POSITION_MANAGER\",\n        outputs: [\n            {\n                internalType: \"contract INonfungiblePositionManager\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"V4_POSITION_MANAGER\",\n        outputs: [{ internalType: \"contract IPositionManager\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes\", name: \"commands\", type: \"bytes\" },\n            { internalType: \"bytes[]\", name: \"inputs\", type: \"bytes[]\" },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes\", name: \"commands\", type: \"bytes\" },\n            { internalType: \"bytes[]\", name: \"inputs\", type: \"bytes[]\" },\n            { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"msgSender\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"poolManager\",\n        outputs: [{ internalType: \"contract IPoolManager\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"int256\", name: \"amount0Delta\", type: \"int256\" },\n            { internalType: \"int256\", name: \"amount1Delta\", type: \"int256\" },\n            { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n        ],\n        name: \"uniswapV3SwapCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes\", name: \"data\", type: \"bytes\" }],\n        name: \"unlockCallback\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n];\nexports.PERMIT2_ABI = [\n    {\n        inputs: [\n            { internalType: \"address\", name: \"\", type: \"address\" },\n            { internalType: \"address\", name: \"\", type: \"address\" },\n            { internalType: \"address\", name: \"\", type: \"address\" },\n        ],\n        name: \"allowance\",\n        outputs: [\n            { internalType: \"uint160\", name: \"amount\", type: \"uint160\" },\n            { internalType: \"uint48\", name: \"expiration\", type: \"uint48\" },\n            { internalType: \"uint48\", name: \"nonce\", type: \"uint48\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nexports.PERMIT_DETAILS = [\n    { name: \"token\", type: \"address\" },\n    { name: \"amount\", type: \"uint160\" },\n    { name: \"expiration\", type: \"uint48\" },\n    { name: \"nonce\", type: \"uint48\" },\n];\nexports.PERMIT_TYPES = {\n    PermitSingle: [\n        { name: \"details\", type: \"PermitDetails\" },\n        { name: \"spender\", type: \"address\" },\n        { name: \"sigDeadline\", type: \"uint256\" },\n    ],\n    PermitDetails: exports.PERMIT_DETAILS,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/flaunchActionProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/flaunchActionProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Flaunch Action Provider\n *\n * This file contains the implementation of the FlaunchActionProvider,\n * which provides actions for flaunch operations.\n *\n * @module flaunch\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.flaunchActionProvider = exports.FlaunchActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst network_1 = __webpack_require__(/*! ../../network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst chains_1 = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/schemas.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/utils.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/constants.js\");\nconst SUPPORTED_NETWORKS = [\"base-mainnet\", \"base-sepolia\"];\n/**\n * FlaunchActionProvider provides actions for flaunch operations.\n *\n * @description\n * This provider is designed to work with EvmWalletProvider for blockchain interactions.\n * It supports all evm networks.\n */\nclass FlaunchActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the FlaunchActionProvider.\n     *\n     * @param config - The configuration options for the FlaunchActionProvider.\n     */\n    constructor(config = {}) {\n        super(\"flaunch\", []);\n        const pinataJwt = config.pinataJwt || process.env.PINATA_JWT;\n        if (!pinataJwt) {\n            throw new Error(\"PINATA_JWT is not configured.\");\n        }\n        this.pinataJwt = pinataJwt;\n    }\n    /**\n     * Example action implementation.\n     * Replace or modify this with your actual action.\n     *\n     * @description\n     * This is a template action that demonstrates the basic structure.\n     * Replace it with your actual implementation.\n     *\n     * @param walletProvider - The wallet provider instance for blockchain interactions\n     * @param args - Arguments defined by FlaunchSchema\n     * @returns A promise that resolves to a string describing the action result\n     */\n    async flaunch(walletProvider, args) {\n        try {\n            const network = walletProvider.getNetwork();\n            const networkId = network.networkId;\n            const chainId = network.chainId;\n            if (!chainId || !networkId) {\n                throw new Error(\"Chain ID is not set.\");\n            }\n            // upload image & token uri to ipfs\n            const tokenUri = await (0, utils_1.generateTokenUri)(args.name, {\n                pinataConfig: { jwt: this.pinataJwt },\n                metadata: {\n                    imageUrl: args.imageUrl,\n                    description: args.description,\n                    websiteUrl: args.websiteUrl,\n                    discordUrl: args.discordUrl,\n                    twitterUrl: args.twitterUrl,\n                    telegramUrl: args.telegramUrl,\n                },\n            });\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.FAST_FLAUNCH_ZAP_ABI,\n                functionName: \"flaunch\",\n                args: [\n                    {\n                        name: args.name,\n                        symbol: args.symbol,\n                        tokenUri,\n                        creator: walletProvider.getAddress(),\n                    },\n                ],\n            });\n            const hash = await walletProvider.sendTransaction({\n                to: constants_1.FastFlaunchZapAddress[chainId],\n                data,\n            });\n            const receipt = await walletProvider.waitForTransactionReceipt(hash);\n            const filteredPoolCreatedEvent = receipt.logs\n                .map(log => {\n                try {\n                    if (log.address.toLowerCase() !== constants_1.FlaunchPositionManagerAddress[chainId].toLowerCase()) {\n                        return null;\n                    }\n                    const event = (0, viem_1.decodeEventLog)({\n                        abi: constants_1.POSITION_MANAGER_ABI,\n                        data: log.data,\n                        topics: log.topics,\n                    });\n                    return event.eventName === \"PoolCreated\" ? event.args : null;\n                }\n                catch {\n                    return null;\n                }\n            })\n                .filter((event) => event !== null)[0];\n            const memecoinAddress = filteredPoolCreatedEvent._memecoin;\n            const chainSlug = Number(chainId) === chains_1.base.id ? \"base\" : \"base-sepolia\";\n            return `Flaunched\\n ${JSON.stringify({\n                coinSymbol: `$${args.symbol}`,\n                coinName: args.name,\n                coinAddress: memecoinAddress,\n                flaunchCoinUrl: `https://flaunch.gg/${chainSlug}/coin/${memecoinAddress}`,\n                transactionHash: hash,\n                transactionUrl: `${network_1.NETWORK_ID_TO_VIEM_CHAIN[networkId].blockExplorers?.default.url}/tx/${hash}`,\n            })}`;\n        }\n        catch (error) {\n            return `Error launching coin: ${error}`;\n        }\n    }\n    /**\n     * Buys a flaunch coin using ETH input.\n     *\n     * @param walletProvider - The wallet provider instance for blockchain interactions\n     * @param args - Arguments defined by BuyCoinSchema\n     * @returns A promise that resolves to a string describing the transaction result\n     */\n    async buyCoinWithETHInput(walletProvider, args) {\n        return this._buyFlaunchCoin(walletProvider, args.coinAddress, \"EXACT_IN\", { amountIn: args.amountIn }, args.slippagePercent);\n    }\n    /**\n     * Buys a flaunch coin using Coin input.\n     *\n     * @param walletProvider - The wallet provider instance for blockchain interactions\n     * @param args - Arguments defined by BuyCoinSchema\n     * @returns A promise that resolves to a string describing the transaction result\n     */\n    async buyCoinWithCoinInput(walletProvider, args) {\n        return this._buyFlaunchCoin(walletProvider, args.coinAddress, \"EXACT_OUT\", { amountOut: args.amountOut }, args.slippagePercent);\n    }\n    /**\n     * Sells a flaunch coin into ETH.\n     *\n     * @param walletProvider - The wallet provider instance for blockchain interactions\n     * @param args - Arguments defined by SellCoinSchema\n     * @returns A promise that resolves to a string describing the transaction result\n     */\n    async sellCoin(walletProvider, args) {\n        const network = walletProvider.getNetwork();\n        const chainId = network.chainId;\n        const networkId = network.networkId;\n        if (!chainId || !networkId) {\n            throw new Error(\"Chain ID is not set.\");\n        }\n        try {\n            const amountIn = (0, viem_1.parseEther)(args.amountIn);\n            // fetch permit2 allowance\n            const [allowance, nonce] = await walletProvider.readContract({\n                address: constants_1.Permit2Address[chainId],\n                abi: constants_1.PERMIT2_ABI,\n                functionName: \"allowance\",\n                args: [\n                    walletProvider.getAddress(),\n                    args.coinAddress,\n                    constants_1.UniversalRouterAddress[chainId],\n                ],\n            });\n            let signature;\n            let permitSingle;\n            // approve\n            if (allowance < amountIn) {\n                // 10 years in seconds\n                const defaultDeadline = BigInt(Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 365 * 10);\n                const domain = {\n                    name: \"Permit2\",\n                    chainId: Number(chainId),\n                    verifyingContract: constants_1.Permit2Address[chainId],\n                };\n                const message = {\n                    details: {\n                        token: args.coinAddress,\n                        amount: viem_1.maxUint160,\n                        expiration: Number(defaultDeadline),\n                        nonce,\n                    },\n                    spender: constants_1.UniversalRouterAddress[chainId],\n                    sigDeadline: defaultDeadline,\n                };\n                const typedData = {\n                    primaryType: \"PermitSingle\",\n                    domain,\n                    types: constants_1.PERMIT_TYPES,\n                    message,\n                };\n                signature = await walletProvider.signTypedData(typedData);\n                permitSingle = message;\n            }\n            const viemPublicClient = (0, viem_1.createPublicClient)({\n                chain: network_1.NETWORK_ID_TO_VIEM_CHAIN[networkId],\n                transport: (0, viem_1.http)(),\n            });\n            const quoteResult = await viemPublicClient.simulateContract({\n                address: constants_1.QuoterAddress[chainId],\n                abi: constants_1.QUOTER_ABI,\n                functionName: \"quoteExactInput\",\n                args: [\n                    {\n                        exactAmount: amountIn,\n                        exactCurrency: args.coinAddress,\n                        path: [\n                            {\n                                fee: 0,\n                                tickSpacing: 60,\n                                hooks: constants_1.FlaunchPositionManagerAddress[chainId],\n                                hookData: \"0x\",\n                                intermediateCurrency: constants_1.FLETHAddress[chainId],\n                            },\n                            {\n                                fee: 0,\n                                tickSpacing: 60,\n                                hookData: \"0x\",\n                                hooks: constants_1.FLETHHooksAddress[chainId],\n                                intermediateCurrency: viem_1.zeroAddress,\n                            },\n                        ],\n                    },\n                ],\n            });\n            const ethOutMin = (0, utils_1.getAmountWithSlippage)(quoteResult.result[0], // amountOut\n            (args.slippagePercent / 100).toFixed(18).toString(), \"EXACT_IN\");\n            const { commands, inputs } = (0, utils_1.memecoinToEthWithPermit2)({\n                chainId: Number(chainId),\n                memecoin: args.coinAddress,\n                amountIn,\n                ethOutMin,\n                permitSingle,\n                signature,\n                referrer: viem_1.zeroAddress,\n            });\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.UNIVERSAL_ROUTER_ABI,\n                functionName: \"execute\",\n                args: [commands, inputs],\n            });\n            const hash = await walletProvider.sendTransaction({\n                to: constants_1.UniversalRouterAddress[chainId],\n                data,\n            });\n            const receipt = await walletProvider.waitForTransactionReceipt(hash);\n            const swapAmounts = (0, utils_1.getSwapAmountsFromReceipt)({\n                receipt,\n                coinAddress: args.coinAddress,\n                chainId: Number(chainId),\n            });\n            const coinSymbol = await walletProvider.readContract({\n                address: args.coinAddress,\n                abi: constants_1.ERC20_ABI,\n                functionName: \"symbol\",\n            });\n            return `Sold ${(0, viem_1.formatEther)(swapAmounts.coinsSold)} $${coinSymbol} for ${(0, viem_1.formatEther)(swapAmounts.ethBought)} ETH\\n\n        Tx hash: [${hash}](${network_1.NETWORK_ID_TO_VIEM_CHAIN[networkId].blockExplorers?.default.url}/tx/${hash})`;\n        }\n        catch (error) {\n            return `Error selling coin: ${error}`;\n        }\n    }\n    /**\n     * Checks if this provider supports the given network.\n     *\n     * @param network - The network to check support for\n     * @returns True if the network is supported\n     */\n    supportsNetwork(network) {\n        // all protocol networks\n        return network.protocolFamily === \"evm\" && SUPPORTED_NETWORKS.includes(network.networkId);\n    }\n    /**\n     * Handles the process of buying a flaunch coin with ETH.\n     *\n     * @param walletProvider - The wallet provider instance\n     * @param coinAddress - The address of the flaunch coin\n     * @param swapType - The type of swap (EXACT_IN or EXACT_OUT)\n     * @param swapParams - Parameters specific to the swap type\n     * @param swapParams.amountIn - The amount of ETH to spend (for EXACT_IN)\n     * @param swapParams.amountOut - The amount of coins to buy (for EXACT_OUT)\n     * @param slippagePercent - The slippage percentage\n     * @returns A promise that resolves to a string describing the transaction result\n     */\n    async _buyFlaunchCoin(walletProvider, coinAddress, swapType, swapParams, slippagePercent) {\n        const network = walletProvider.getNetwork();\n        const chainId = network.chainId;\n        const networkId = network.networkId;\n        if (!chainId || !networkId) {\n            throw new Error(\"Chain ID is not set.\");\n        }\n        try {\n            const viemPublicClient = (0, viem_1.createPublicClient)({\n                chain: network_1.NETWORK_ID_TO_VIEM_CHAIN[networkId],\n                transport: (0, viem_1.http)(),\n            });\n            let amountIn;\n            let amountOutMin;\n            let amountOut;\n            let amountInMax;\n            if (swapType === \"EXACT_IN\") {\n                amountIn = (0, viem_1.parseEther)(swapParams.amountIn);\n                const quoteResult = await viemPublicClient.simulateContract({\n                    address: constants_1.QuoterAddress[chainId],\n                    abi: constants_1.QUOTER_ABI,\n                    functionName: \"quoteExactInput\",\n                    args: [\n                        {\n                            exactAmount: amountIn,\n                            exactCurrency: viem_1.zeroAddress, // ETH\n                            path: [\n                                {\n                                    fee: 0,\n                                    tickSpacing: 60,\n                                    hookData: \"0x\",\n                                    hooks: constants_1.FLETHHooksAddress[chainId],\n                                    intermediateCurrency: constants_1.FLETHAddress[chainId],\n                                },\n                                {\n                                    fee: 0,\n                                    tickSpacing: 60,\n                                    hooks: constants_1.FlaunchPositionManagerAddress[chainId],\n                                    hookData: \"0x\",\n                                    intermediateCurrency: coinAddress,\n                                },\n                            ],\n                        },\n                    ],\n                });\n                amountOutMin = (0, utils_1.getAmountWithSlippage)(quoteResult.result[0], // amountOut\n                (slippagePercent / 100).toFixed(18).toString(), swapType);\n            }\n            else {\n                // EXACT_OUT\n                amountOut = (0, viem_1.parseEther)(swapParams.amountOut);\n                const quoteResult = await viemPublicClient.simulateContract({\n                    address: constants_1.QuoterAddress[chainId],\n                    abi: constants_1.QUOTER_ABI,\n                    functionName: \"quoteExactOutput\",\n                    args: [\n                        {\n                            path: [\n                                {\n                                    intermediateCurrency: viem_1.zeroAddress,\n                                    fee: 0,\n                                    tickSpacing: 60,\n                                    hookData: \"0x\",\n                                    hooks: constants_1.FLETHHooksAddress[chainId],\n                                },\n                                {\n                                    intermediateCurrency: constants_1.FLETHAddress[chainId],\n                                    fee: 0,\n                                    tickSpacing: 60,\n                                    hooks: constants_1.FlaunchPositionManagerAddress[chainId],\n                                    hookData: \"0x\",\n                                },\n                            ],\n                            exactCurrency: coinAddress,\n                            exactAmount: amountOut,\n                        },\n                    ],\n                });\n                amountInMax = (0, utils_1.getAmountWithSlippage)(quoteResult.result[0], // amountIn\n                (slippagePercent / 100).toFixed(18).toString(), swapType);\n            }\n            const { commands, inputs } = (0, utils_1.ethToMemecoin)({\n                sender: walletProvider.getAddress(),\n                memecoin: coinAddress,\n                chainId: Number(chainId),\n                referrer: viem_1.zeroAddress,\n                swapType,\n                amountIn,\n                amountOutMin,\n                amountOut,\n                amountInMax,\n            });\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.UNIVERSAL_ROUTER_ABI,\n                functionName: \"execute\",\n                args: [commands, inputs],\n            });\n            const hash = await walletProvider.sendTransaction({\n                to: constants_1.UniversalRouterAddress[chainId],\n                data,\n                value: swapType === \"EXACT_IN\" ? amountIn : amountInMax,\n            });\n            const receipt = await walletProvider.waitForTransactionReceipt(hash);\n            const swapAmounts = (0, utils_1.getSwapAmountsFromReceipt)({\n                receipt,\n                coinAddress: coinAddress,\n                chainId: Number(chainId),\n            });\n            const coinSymbol = await walletProvider.readContract({\n                address: coinAddress,\n                abi: constants_1.ERC20_ABI,\n                functionName: \"symbol\",\n            });\n            return `Bought ${(0, viem_1.formatEther)(swapAmounts.coinsBought)} $${coinSymbol} for ${(0, viem_1.formatEther)(swapAmounts.ethSold)} ETH\\n\n        Tx hash: [${hash}](${network_1.NETWORK_ID_TO_VIEM_CHAIN[networkId].blockExplorers?.default.url}/tx/${hash})`;\n        }\n        catch (error) {\n            return `Error buying coin: ${error}`;\n        }\n    }\n}\nexports.FlaunchActionProvider = FlaunchActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"flaunch\",\n        description: `\nThis tool allows launching a new memecoin using the flaunch protocol.\n\nIt takes:\n- name: The name of the token\n- symbol: The symbol of the token\n- imageUrl: URL to the token image\n- description: Description of the token\n\n- websiteUrl: (optional) URL to the token website\n- discordUrl: (optional) URL to the token Discord\n- twitterUrl: (optional) URL to the token Twitter\n- telegramUrl: (optional) URL to the token Telegram\n\nNote:\n- If the optional fields are not provided, don't include them in the call.\n    `,\n        schema: schemas_1.FlaunchSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FlaunchActionProvider.prototype, \"flaunch\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"buyCoinWithETHInput\",\n        description: `\nThis tool allows buying a flaunch coin using ETH, when the user has specified the ETH amount to spend.\n\nIt takes:\n- coinAddress: The address of the flaunch coin to buy\n- amountIn: The quantity of ETH to spend on the flaunch coin, in whole units\n  Examples:\n  - 0.001 ETH\n  - 0.01 ETH\n  - 1 ETH\n- slippagePercent: (optional) The slippage percentage. Default to 5%\n    `,\n        schema: schemas_1.BuyCoinWithETHInputSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FlaunchActionProvider.prototype, \"buyCoinWithETHInput\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"buyCoinWithCoinInput\",\n        description: `\nThis tool allows buying a flaunch coin using ETH, when the user has specified the Coin amount to buy.\n\nIt takes:\n- coinAddress: The address of the flaunch coin to buy\n- amountOut: The quantity of the flaunch coin to buy, in whole units\n  Examples:\n  - 1000 coins\n  - 1_000_000 coins\n- slippagePercent: (optional) The slippage percentage. Default to 5%\n    `,\n        schema: schemas_1.BuyCoinWithCoinInputSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FlaunchActionProvider.prototype, \"buyCoinWithCoinInput\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"sellCoin\",\n        description: `\nThis tool allows selling a flaunch coin into ETH, when the user has specified the Coin amount to sell.\n\nIt takes:\n- coinAddress: The address of the flaunch coin to sell\n- amountIn: The quantity of the flaunch coin to sell, in whole units\n  Examples:\n  - 1000 coins\n  - 1_000_000 coins\n- slippagePercent: (optional) The slippage percentage. Default to 5%\n    `,\n        schema: schemas_1.SellCoinSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], FlaunchActionProvider.prototype, \"sellCoin\", null);\n/**\n * Factory function to create a new FlaunchActionProvider instance.\n *\n * @param config - Configuration options for the FlaunchActionProvider\n * @returns A new FlaunchActionProvider instance\n */\nconst flaunchActionProvider = (config) => new FlaunchActionProvider(config);\nexports.flaunchActionProvider = flaunchActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/flaunchActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Exports for flaunch action provider\n *\n * @module flaunch\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./flaunchActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/flaunchActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mbGF1bmNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsK0hBQXlCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyxtR0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2ZsYXVuY2gvaW5kZXguanM/Y2Y0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogRXhwb3J0cyBmb3IgZmxhdW5jaCBhY3Rpb24gcHJvdmlkZXJcbiAqXG4gKiBAbW9kdWxlIGZsYXVuY2hcbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmxhdW5jaEFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SellCoinSchema = exports.BuyCoinWithCoinInputSchema = exports.BuyCoinWithETHInputSchema = exports.FlaunchSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Action schemas for the flaunch action provider.\n *\n * This file contains the Zod schemas that define the shape and validation\n * rules for action parameters in the flaunch action provider.\n */\n/**\n * Schema for Flaunch token creation\n */\nexports.FlaunchSchema = zod_1.z.object({\n    name: zod_1.z.string().min(1).describe(\"The name of the token\"),\n    symbol: zod_1.z.string().min(1).describe(\"The symbol of the token\"),\n    imageUrl: zod_1.z.string().url().describe(\"The URL to the token image\"),\n    description: zod_1.z.string().describe(\"The description of the token\"),\n    websiteUrl: zod_1.z.string().url().optional().describe(\"The (optional) URL to the token website\"),\n    discordUrl: zod_1.z.string().url().optional().describe(\"The (optional) URL to the token Discord\"),\n    twitterUrl: zod_1.z.string().url().optional().describe(\"The (optional) URL to the token Twitter\"),\n    telegramUrl: zod_1.z.string().url().optional().describe(\"The (optional) URL to the token Telegram\"),\n});\nexports.BuyCoinWithETHInputSchema = zod_1.z.object({\n    coinAddress: zod_1.z\n        .string()\n        .describe(\"The address of the flaunch coin to buy\")\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\"),\n    amountIn: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of ETH to spend on the flaunch coin, in whole units\"),\n    slippagePercent: zod_1.z\n        .number()\n        .min(0)\n        .max(100)\n        .default(5)\n        .describe(\"The slippage percentage. Default to 5%\"),\n});\nexports.BuyCoinWithCoinInputSchema = zod_1.z.object({\n    coinAddress: zod_1.z\n        .string()\n        .describe(\"The address of the flaunch coin to buy\")\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\"),\n    amountOut: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of the flaunch coin to buy, in whole units\"),\n    slippagePercent: zod_1.z\n        .number()\n        .min(0)\n        .max(100)\n        .default(5)\n        .describe(\"The slippage percentage. Default to 5%\"),\n});\nexports.SellCoinSchema = zod_1.z.object({\n    coinAddress: zod_1.z\n        .string()\n        .describe(\"The address of the flaunch coin to sell\")\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\"),\n    amountIn: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of the flaunch coin to sell, in whole units\"),\n    slippagePercent: zod_1.z\n        .number()\n        .min(0)\n        .max(100)\n        .default(5)\n        .describe(\"The slippage percentage. Default to 5%\"),\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mbGF1bmNoL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsa0NBQWtDLEdBQUcsaUNBQWlDLEdBQUcscUJBQXFCO0FBQ3ZILGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsR0FBRztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9mbGF1bmNoL3NjaGVtYXMuanM/MjYyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VsbENvaW5TY2hlbWEgPSBleHBvcnRzLkJ1eUNvaW5XaXRoQ29pbklucHV0U2NoZW1hID0gZXhwb3J0cy5CdXlDb2luV2l0aEVUSElucHV0U2NoZW1hID0gZXhwb3J0cy5GbGF1bmNoU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBBY3Rpb24gc2NoZW1hcyBmb3IgdGhlIGZsYXVuY2ggYWN0aW9uIHByb3ZpZGVyLlxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgWm9kIHNjaGVtYXMgdGhhdCBkZWZpbmUgdGhlIHNoYXBlIGFuZCB2YWxpZGF0aW9uXG4gKiBydWxlcyBmb3IgYWN0aW9uIHBhcmFtZXRlcnMgaW4gdGhlIGZsYXVuY2ggYWN0aW9uIHByb3ZpZGVyLlxuICovXG4vKipcbiAqIFNjaGVtYSBmb3IgRmxhdW5jaCB0b2tlbiBjcmVhdGlvblxuICovXG5leHBvcnRzLkZsYXVuY2hTY2hlbWEgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgbmFtZTogem9kXzEuei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoXCJUaGUgbmFtZSBvZiB0aGUgdG9rZW5cIiksXG4gICAgc3ltYm9sOiB6b2RfMS56LnN0cmluZygpLm1pbigxKS5kZXNjcmliZShcIlRoZSBzeW1ib2wgb2YgdGhlIHRva2VuXCIpLFxuICAgIGltYWdlVXJsOiB6b2RfMS56LnN0cmluZygpLnVybCgpLmRlc2NyaWJlKFwiVGhlIFVSTCB0byB0aGUgdG9rZW4gaW1hZ2VcIiksXG4gICAgZGVzY3JpcHRpb246IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRva2VuXCIpLFxuICAgIHdlYnNpdGVVcmw6IHpvZF8xLnouc3RyaW5nKCkudXJsKCkub3B0aW9uYWwoKS5kZXNjcmliZShcIlRoZSAob3B0aW9uYWwpIFVSTCB0byB0aGUgdG9rZW4gd2Vic2l0ZVwiKSxcbiAgICBkaXNjb3JkVXJsOiB6b2RfMS56LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJUaGUgKG9wdGlvbmFsKSBVUkwgdG8gdGhlIHRva2VuIERpc2NvcmRcIiksXG4gICAgdHdpdHRlclVybDogem9kXzEuei5zdHJpbmcoKS51cmwoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiVGhlIChvcHRpb25hbCkgVVJMIHRvIHRoZSB0b2tlbiBUd2l0dGVyXCIpLFxuICAgIHRlbGVncmFtVXJsOiB6b2RfMS56LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJUaGUgKG9wdGlvbmFsKSBVUkwgdG8gdGhlIHRva2VuIFRlbGVncmFtXCIpLFxufSk7XG5leHBvcnRzLkJ1eUNvaW5XaXRoRVRISW5wdXRTY2hlbWEgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgY29pbkFkZHJlc3M6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBhZGRyZXNzIG9mIHRoZSBmbGF1bmNoIGNvaW4gdG8gYnV5XCIpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKSxcbiAgICBhbW91bnRJbjogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBxdWFudGl0eSBvZiBFVEggdG8gc3BlbmQgb24gdGhlIGZsYXVuY2ggY29pbiwgaW4gd2hvbGUgdW5pdHNcIiksXG4gICAgc2xpcHBhZ2VQZXJjZW50OiB6b2RfMS56XG4gICAgICAgIC5udW1iZXIoKVxuICAgICAgICAubWluKDApXG4gICAgICAgIC5tYXgoMTAwKVxuICAgICAgICAuZGVmYXVsdCg1KVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgc2xpcHBhZ2UgcGVyY2VudGFnZS4gRGVmYXVsdCB0byA1JVwiKSxcbn0pO1xuZXhwb3J0cy5CdXlDb2luV2l0aENvaW5JbnB1dFNjaGVtYSA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBjb2luQWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3Mgb2YgdGhlIGZsYXVuY2ggY29pbiB0byBidXlcIilcbiAgICAgICAgLnJlZ2V4KC9eMHhbYS1mQS1GMC05XXs0MH0kLywgXCJJbnZhbGlkIEV0aGVyZXVtIGFkZHJlc3MgZm9ybWF0XCIpLFxuICAgIGFtb3VudE91dDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBxdWFudGl0eSBvZiB0aGUgZmxhdW5jaCBjb2luIHRvIGJ1eSwgaW4gd2hvbGUgdW5pdHNcIiksXG4gICAgc2xpcHBhZ2VQZXJjZW50OiB6b2RfMS56XG4gICAgICAgIC5udW1iZXIoKVxuICAgICAgICAubWluKDApXG4gICAgICAgIC5tYXgoMTAwKVxuICAgICAgICAuZGVmYXVsdCg1KVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgc2xpcHBhZ2UgcGVyY2VudGFnZS4gRGVmYXVsdCB0byA1JVwiKSxcbn0pO1xuZXhwb3J0cy5TZWxsQ29pblNjaGVtYSA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBjb2luQWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3Mgb2YgdGhlIGZsYXVuY2ggY29pbiB0byBzZWxsXCIpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKSxcbiAgICBhbW91bnRJbjogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBxdWFudGl0eSBvZiB0aGUgZmxhdW5jaCBjb2luIHRvIHNlbGwsIGluIHdob2xlIHVuaXRzXCIpLFxuICAgIHNsaXBwYWdlUGVyY2VudDogem9kXzEuelxuICAgICAgICAubnVtYmVyKClcbiAgICAgICAgLm1pbigwKVxuICAgICAgICAubWF4KDEwMClcbiAgICAgICAgLmRlZmF1bHQoNSlcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIHNsaXBwYWdlIHBlcmNlbnRhZ2UuIERlZmF1bHQgdG8gNSVcIiksXG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSwapAmountsFromReceipt = exports.getSwapAmountsFromLog = exports.memecoinToEthWithPermit2 = exports.ethToMemecoin = exports.getAmountWithSlippage = exports.generateTokenUri = void 0;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/constants.js\");\n/**\n * Uploads a base64 image to IPFS using Pinata\n *\n * @param params - Configuration and base64 image data\n * @param params.pinataConfig - Pinata configuration including JWT\n * @param params.base64Image - Base64 encoded image data\n * @param params.name - Optional name for the uploaded file\n * @param params.metadata - Optional metadata key-value pairs\n * @returns Upload response with CID and other details\n */\nconst uploadImageToIPFS = async (params) => {\n    try {\n        const formData = new FormData();\n        // Convert base64 to Blob and then to File\n        // Remove data URL prefix if present (e.g., \"data:image/jpeg;base64,\")\n        const base64Data = params.base64Image.split(\",\")[1] || params.base64Image;\n        const byteCharacters = atob(base64Data);\n        const byteArrays = [];\n        for (let offset = 0; offset < byteCharacters.length; offset += 1024) {\n            const slice = byteCharacters.slice(offset, offset + 1024);\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        // Detect mime type from base64 string\n        let mimeType = \"image/png\"; // default\n        if (params.base64Image.startsWith(\"data:\")) {\n            mimeType = params.base64Image.split(\";\")[0].split(\":\")[1];\n        }\n        const blob = new Blob(byteArrays, { type: mimeType });\n        const fileName = params.name || `image.${mimeType.split(\"/\")[1]}`;\n        const file = new File([blob], fileName, { type: mimeType });\n        formData.append(\"file\", file);\n        const pinataMetadata = {\n            name: params.name || null,\n            keyvalues: params.metadata || {},\n        };\n        formData.append(\"pinataMetadata\", JSON.stringify(pinataMetadata));\n        const pinataOptions = {\n            cidVersion: 1,\n        };\n        formData.append(\"pinataOptions\", JSON.stringify(pinataOptions));\n        const response = await fetch(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${params.pinataConfig.jwt}`,\n            },\n            body: formData,\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(`Failed to upload image to IPFS: ${error.message || response.statusText}`);\n        }\n        const data = await response.json();\n        return {\n            IpfsHash: data.IpfsHash,\n            PinSize: data.PinSize,\n            Timestamp: data.Timestamp,\n            isDuplicate: data.isDuplicate || false,\n        };\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            throw new Error(`Failed to upload image to IPFS: ${error.message}`);\n        }\n        throw error;\n    }\n};\n/**\n * Uploads JSON data to IPFS using Pinata\n *\n * @param params - Configuration and JSON data\n * @param params.pinataConfig - Pinata configuration including JWT\n * @param params.json - JSON data to upload\n * @param params.name - Optional name for the uploaded file\n * @param params.metadata - Optional metadata key-value pairs\n * @returns Upload response with CID and other details\n */\nconst uploadJsonToIPFS = async (params) => {\n    try {\n        const requestBody = {\n            pinataOptions: {\n                cidVersion: 1,\n            },\n            pinataMetadata: {\n                name: params.name || null,\n                keyvalues: params.metadata || {},\n            },\n            pinataContent: params.json,\n        };\n        const response = await fetch(\"https://api.pinata.cloud/pinning/pinJSONToIPFS\", {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${params.pinataConfig.jwt}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(requestBody),\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(`Failed to upload JSON to IPFS: ${error.message || response.statusText}`);\n        }\n        const data = await response.json();\n        return {\n            IpfsHash: data.IpfsHash,\n            PinSize: data.PinSize,\n            Timestamp: data.Timestamp,\n            isDuplicate: data.isDuplicate || false,\n        };\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            throw new Error(`Failed to upload JSON to IPFS: ${error.message}`);\n        }\n        throw error;\n    }\n};\nconst generateTokenUriBase64Image = async (name, params) => {\n    // 1. upload image to IPFS\n    const imageRes = await uploadImageToIPFS({\n        pinataConfig: params.pinataConfig,\n        base64Image: params.metadata.base64Image,\n    });\n    // 2. upload metadata to IPFS\n    const coinMetadata = {\n        name,\n        description: params.metadata.description,\n        image: `ipfs://${imageRes.IpfsHash}`,\n        external_link: params.metadata.websiteUrl || \"\",\n        collaborators: [],\n        discordUrl: params.metadata.discordUrl || \"\",\n        twitterUrl: params.metadata.twitterUrl || \"\",\n        telegramUrl: params.metadata.telegramUrl || \"\",\n    };\n    const metadataRes = await uploadJsonToIPFS({\n        pinataConfig: params.pinataConfig,\n        json: coinMetadata,\n    });\n    return `ipfs://${metadataRes.IpfsHash}`;\n};\nconst generateTokenUri = async (name, params) => {\n    // 1. get base64Image from imageUrl\n    const response = await fetch(params.metadata.imageUrl);\n    if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    const base64Image = Buffer.from(arrayBuffer).toString(\"base64\");\n    // 2. generate token uri\n    const tokenUri = await generateTokenUriBase64Image(name, {\n        pinataConfig: params.pinataConfig,\n        metadata: {\n            base64Image,\n            description: params.metadata.description,\n            websiteUrl: params.metadata.websiteUrl,\n            discordUrl: params.metadata.discordUrl,\n            twitterUrl: params.metadata.twitterUrl,\n            telegramUrl: params.metadata.telegramUrl,\n        },\n    });\n    return tokenUri;\n};\nexports.generateTokenUri = generateTokenUri;\nconst getAmountWithSlippage = (amount, slippage, swapType) => {\n    if (amount == null) {\n        return 0n;\n    }\n    const absAmount = amount < 0n ? -amount : amount;\n    const slippageMultiplier = swapType === \"EXACT_IN\"\n        ? BigInt(1e18) - (0, viem_1.parseEther)(slippage)\n        : BigInt(1e18) + (0, viem_1.parseEther)(slippage);\n    return (absAmount * slippageMultiplier) / BigInt(1e18);\n};\nexports.getAmountWithSlippage = getAmountWithSlippage;\nconst ETH = viem_1.zeroAddress;\nconst ethToMemecoin = (params) => {\n    const flETH = constants_1.FLETHAddress[params.chainId];\n    const flETHHooks = constants_1.FLETHHooksAddress[params.chainId];\n    const flaunchHooks = constants_1.FlaunchPositionManagerAddress[params.chainId];\n    // Determine actions based on swapType\n    const v4Actions = (\"0x\" +\n        (params.swapType === \"EXACT_IN\" ? constants_1.V4Actions.SWAP_EXACT_IN : constants_1.V4Actions.SWAP_EXACT_OUT) +\n        constants_1.V4Actions.SETTLE_ALL +\n        constants_1.V4Actions.TAKE_ALL);\n    // Initialize variables for path and v4Params\n    let path;\n    let v4Params;\n    // Configure path and parameters based on swapType\n    if (params.swapType === \"EXACT_IN\") {\n        if (params.amountIn == null || params.amountOutMin == null) {\n            throw new Error(\"amountIn and amountOutMin are required for EXACT_IN swap\");\n        }\n        // Path for 'EXACT_IN' swap\n        path = [\n            {\n                intermediateCurrency: flETH,\n                fee: 0,\n                tickSpacing: 60,\n                hooks: flETHHooks,\n                hookData: \"0x\",\n            },\n            {\n                intermediateCurrency: params.memecoin,\n                fee: 0,\n                tickSpacing: 60,\n                hooks: flaunchHooks,\n                hookData: (0, viem_1.encodeAbiParameters)([{ type: \"address\", name: \"referrer\" }], [params.referrer ?? viem_1.zeroAddress]),\n            },\n        ];\n        // Parameters for 'EXACT_IN' swap\n        v4Params = (0, viem_1.encodeAbiParameters)(constants_1.IV4RouterAbiExactInput, [\n            {\n                currencyIn: ETH,\n                path: path,\n                amountIn: params.amountIn,\n                amountOutMinimum: params.amountOutMin,\n            },\n        ]);\n    }\n    else {\n        if (params.amountOut == null || params.amountInMax == null) {\n            throw new Error(\"amountOut and amountInMax are required for EXACT_OUT swap\");\n        }\n        // Path for 'EXACT_OUT' swap\n        path = [\n            {\n                fee: 0,\n                tickSpacing: 60,\n                hookData: \"0x\",\n                hooks: flETHHooks,\n                intermediateCurrency: ETH,\n            },\n            {\n                fee: 0,\n                tickSpacing: 60,\n                hooks: flaunchHooks,\n                intermediateCurrency: flETH,\n                hookData: (0, viem_1.encodeAbiParameters)([{ type: \"address\", name: \"referrer\" }], [params.referrer ?? viem_1.zeroAddress]),\n            },\n        ];\n        // Parameters for 'EXACT_OUT' swap\n        v4Params = (0, viem_1.encodeAbiParameters)(constants_1.IV4RouterAbiExactOutput, [\n            {\n                currencyOut: params.memecoin,\n                path: path,\n                amountOut: params.amountOut,\n                amountInMaximum: params.amountInMax,\n            },\n        ]);\n    }\n    // Common parameters for both swap types\n    const settleParams = (0, viem_1.encodeAbiParameters)([\n        {\n            type: \"address\",\n            name: \"currency\",\n        },\n        {\n            type: \"uint256\",\n            name: \"maxAmount\",\n        },\n    ], [\n        ETH,\n        params.swapType === \"EXACT_IN\"\n            ? (params.amountIn ?? viem_1.maxUint256)\n            : (params.amountInMax ?? viem_1.maxUint256),\n    ]);\n    const takeParams = (0, viem_1.encodeAbiParameters)([\n        {\n            type: \"address\",\n            name: \"currency\",\n        },\n        {\n            type: \"uint256\",\n            name: \"minAmount\",\n        },\n    ], [\n        params.memecoin,\n        params.swapType === \"EXACT_IN\"\n            ? (params.amountOutMin ?? viem_1.maxUint256)\n            : (params.amountOut ?? viem_1.maxUint256),\n    ]);\n    // Encode router data\n    const v4RouterData = (0, viem_1.encodeAbiParameters)([\n        { type: \"bytes\", name: \"actions\" },\n        { type: \"bytes[]\", name: \"params\" },\n    ], [v4Actions, [v4Params, settleParams, takeParams]]);\n    // Commands for Universal Router\n    const urCommands = (\"0x\" + constants_1.URCommands.V4_SWAP + constants_1.URCommands.SWEEP);\n    const sweepInput = (0, viem_1.encodeAbiParameters)([\n        { type: \"address\", name: \"token\" },\n        { type: \"address\", name: \"recipient\" },\n        { type: \"uint160\", name: \"amountIn\" },\n    ], [ETH, params.sender, 0n]);\n    // Encode calldata for Universal Router\n    const inputs = [v4RouterData, sweepInput];\n    const urExecuteCalldata = (0, viem_1.encodeFunctionData)({\n        abi: constants_1.UNIVERSAL_ROUTER_ABI,\n        functionName: \"execute\",\n        args: [urCommands, inputs],\n    });\n    return {\n        calldata: urExecuteCalldata,\n        commands: urCommands,\n        inputs,\n    };\n};\nexports.ethToMemecoin = ethToMemecoin;\n// @notice Beofre calling the UniversalRouter the user must have:\n// 1. Given the Permit2 contract allowance to spend the memecoin\nconst memecoinToEthWithPermit2 = (params) => {\n    const flETH = constants_1.FLETHAddress[params.chainId];\n    const flETHHooks = constants_1.FLETHHooksAddress[params.chainId];\n    const flaunchHooks = constants_1.FlaunchPositionManagerAddress[params.chainId];\n    const v4Actions = (\"0x\" +\n        constants_1.V4Actions.SWAP_EXACT_IN +\n        constants_1.V4Actions.SETTLE_ALL +\n        constants_1.V4Actions.TAKE_ALL);\n    const v4ExactInputParams = (0, viem_1.encodeAbiParameters)(constants_1.IV4RouterAbiExactInput, [\n        {\n            currencyIn: params.memecoin,\n            path: [\n                {\n                    intermediateCurrency: flETH,\n                    fee: 0,\n                    tickSpacing: 60,\n                    hooks: flaunchHooks,\n                    hookData: (0, viem_1.encodeAbiParameters)([\n                        {\n                            type: \"address\",\n                            name: \"referrer\",\n                        },\n                    ], [params.referrer ?? viem_1.zeroAddress]),\n                },\n                {\n                    intermediateCurrency: ETH,\n                    fee: 0,\n                    tickSpacing: 60,\n                    hooks: flETHHooks,\n                    hookData: \"0x\",\n                },\n            ],\n            amountIn: params.amountIn,\n            amountOutMinimum: params.ethOutMin,\n        },\n    ]);\n    const settleParams = (0, viem_1.encodeAbiParameters)([\n        {\n            type: \"address\",\n            name: \"currency\",\n        },\n        {\n            type: \"uint256\",\n            name: \"maxAmount\",\n        },\n    ], [params.memecoin, params.amountIn]);\n    const takeParams = (0, viem_1.encodeAbiParameters)([\n        {\n            type: \"address\",\n            name: \"currency\",\n        },\n        {\n            type: \"uint256\",\n            name: \"minAmount\",\n        },\n    ], [ETH, params.ethOutMin]);\n    const v4RouterData = (0, viem_1.encodeAbiParameters)([\n        { type: \"bytes\", name: \"actions\" },\n        { type: \"bytes[]\", name: \"params\" },\n    ], [v4Actions, [v4ExactInputParams, settleParams, takeParams]]);\n    if (params.signature && params.permitSingle) {\n        const urCommands = (\"0x\" + constants_1.URCommands.PERMIT2_PERMIT + constants_1.URCommands.V4_SWAP);\n        const permit2PermitInput = (0, viem_1.encodeAbiParameters)([\n            {\n                type: \"tuple\",\n                components: [\n                    {\n                        type: \"tuple\",\n                        components: [\n                            { type: \"address\", name: \"token\" },\n                            { type: \"uint160\", name: \"amount\" },\n                            { type: \"uint48\", name: \"expiration\" },\n                            { type: \"uint48\", name: \"nonce\" },\n                        ],\n                        name: \"details\",\n                    },\n                    { type: \"address\", name: \"spender\" },\n                    { type: \"uint256\", name: \"sigDeadline\" },\n                ],\n                name: \"PermitSingle\",\n            },\n            { type: \"bytes\", name: \"signature\" },\n        ], [params.permitSingle, params.signature]);\n        const inputs = [permit2PermitInput, v4RouterData];\n        const urExecuteCalldata = (0, viem_1.encodeFunctionData)({\n            abi: constants_1.UNIVERSAL_ROUTER_ABI,\n            functionName: \"execute\",\n            args: [urCommands, inputs],\n        });\n        return {\n            calldata: urExecuteCalldata,\n            commands: urCommands,\n            inputs,\n        };\n    }\n    else {\n        const urCommands = (\"0x\" + constants_1.URCommands.V4_SWAP);\n        const inputs = [v4RouterData];\n        const urExecuteCalldata = (0, viem_1.encodeFunctionData)({\n            abi: constants_1.UNIVERSAL_ROUTER_ABI,\n            functionName: \"execute\",\n            args: [urCommands, inputs],\n        });\n        return {\n            calldata: urExecuteCalldata,\n            commands: urCommands,\n            inputs,\n        };\n    }\n};\nexports.memecoinToEthWithPermit2 = memecoinToEthWithPermit2;\nconst getSwapAmountsFromLog = ({ filteredPoolSwapEvent, coinAddress, chainId, }) => {\n    const { flAmount0, flAmount1, flFee0, flFee1, ispAmount0, ispAmount1, ispFee0, ispFee1, uniAmount0, uniAmount1, uniFee0, uniFee1, } = filteredPoolSwapEvent;\n    const currency0Delta = flAmount0 + ispAmount0 + uniAmount0;\n    const currency1Delta = flAmount1 + ispAmount1 + uniAmount1;\n    const currency0Fees = flFee0 + ispFee0 + uniFee0;\n    const currency1Fees = flFee1 + ispFee1 + uniFee1;\n    let feesIsInFLETH;\n    let swapType;\n    const flETHIsCurrencyZero = coinAddress > constants_1.FLETHAddress[chainId];\n    if (flETHIsCurrencyZero) {\n        swapType = currency0Delta < 0 ? \"BUY\" : \"SELL\";\n        feesIsInFLETH = currency0Fees < 0;\n    }\n    else {\n        swapType = currency1Delta < 0 ? \"BUY\" : \"SELL\";\n        feesIsInFLETH = currency1Fees < 0;\n    }\n    const absCurrency0Delta = currency0Delta < 0 ? -currency0Delta : currency0Delta;\n    const absCurrency1Delta = currency1Delta < 0 ? -currency1Delta : currency1Delta;\n    const absCurrency0Fees = currency0Fees < 0 ? -currency0Fees : currency0Fees;\n    const absCurrency1Fees = currency1Fees < 0 ? -currency1Fees : currency1Fees;\n    const fees = {\n        isInFLETH: feesIsInFLETH,\n        amount: flETHIsCurrencyZero\n            ? feesIsInFLETH\n                ? absCurrency0Fees\n                : absCurrency1Fees\n            : feesIsInFLETH\n                ? absCurrency1Fees\n                : absCurrency0Fees,\n    };\n    if (swapType === \"BUY\") {\n        return {\n            coinsBought: flETHIsCurrencyZero\n                ? absCurrency1Delta - (!fees.isInFLETH ? fees.amount : 0n)\n                : absCurrency0Delta - (!fees.isInFLETH ? fees.amount : 0n),\n            ethSold: flETHIsCurrencyZero\n                ? absCurrency0Delta - (fees.isInFLETH ? fees.amount : 0n)\n                : absCurrency1Delta - (fees.isInFLETH ? fees.amount : 0n),\n        };\n    }\n    else {\n        return {\n            coinsSold: flETHIsCurrencyZero\n                ? absCurrency1Delta - (!fees.isInFLETH ? fees.amount : 0n)\n                : absCurrency0Delta - (!fees.isInFLETH ? fees.amount : 0n),\n            ethBought: flETHIsCurrencyZero\n                ? absCurrency0Delta - (fees.isInFLETH ? fees.amount : 0n)\n                : absCurrency1Delta - (fees.isInFLETH ? fees.amount : 0n),\n        };\n    }\n};\nexports.getSwapAmountsFromLog = getSwapAmountsFromLog;\nconst getSwapAmountsFromReceipt = ({ receipt, coinAddress, chainId, }) => {\n    const filteredPoolSwapEvent = receipt.logs\n        .map(log => {\n        try {\n            if (log.address.toLowerCase() !== constants_1.FlaunchPositionManagerAddress[chainId].toLowerCase()) {\n                return null;\n            }\n            const event = (0, viem_1.decodeEventLog)({\n                abi: constants_1.POSITION_MANAGER_ABI,\n                data: log.data,\n                topics: log.topics,\n            });\n            return event.eventName === \"PoolSwap\" ? event.args : null;\n        }\n        catch {\n            return null;\n        }\n    })\n        .filter((event) => event !== null)[0];\n    return (0, exports.getSwapAmountsFromLog)({\n        filteredPoolSwapEvent,\n        coinAddress,\n        chainId,\n    });\n};\nexports.getSwapAmountsFromReceipt = getSwapAmountsFromReceipt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./customActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/customActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./across */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/across/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./alchemy */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/alchemy/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./basename */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/basename/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cdp */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/cdp/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./compound */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/compound/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./defillama */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/defillama/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./erc20 */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./erc721 */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc721/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./farcaster */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/farcaster/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./jupiter */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./messari */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./pyth */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./moonwell */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./morpho */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./opensea */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./spl */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./twitter */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./weth */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wow */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./allora */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/allora/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./flaunch */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/flaunch/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./onramp */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./vaultsfyi */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMkdBQW1CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyx5R0FBa0I7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLHFIQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsK0ZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLGlHQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxtR0FBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMseUZBQU87QUFDNUIsYUFBYSxtQkFBTyxDQUFDLG1HQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxxR0FBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsNkZBQVM7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLCtGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxxR0FBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsaUdBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLGlHQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQywyRkFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsbUdBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLCtGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxpR0FBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMseUZBQU87QUFDNUIsYUFBYSxtQkFBTyxDQUFDLGlHQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQywrRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsMkZBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLHlGQUFPO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQywrRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsaUdBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLCtGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxxR0FBYSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL2luZGV4LmpzP2IyYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY3Rpb25EZWNvcmF0b3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jdXN0b21BY3Rpb25Qcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWNyb3NzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hbGNoZW15XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYXNlbmFtZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2RwXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21wb3VuZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVmaWxsYW1hXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lcmMyMFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJjNzIxXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mYXJjYXN0ZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2p1cGl0ZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21lc3NhcmlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3B5dGhcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21vb253ZWxsXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb3JwaG9cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29wZW5zZWFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NwbFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHdpdHRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2FsbGV0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93ZXRoXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93b3dcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FsbG9yYVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmxhdW5jaFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb25yYW1wXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YXVsdHNmeWlcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./jupiterActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/jupiterActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9qdXBpdGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywrSEFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9qdXBpdGVyL2luZGV4LmpzP2ZjNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9qdXBpdGVyQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/jupiterActionProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/jupiterActionProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.jupiterActionProvider = exports.JupiterActionProvider = void 0;\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst svmWalletProvider_1 = __webpack_require__(/*! ../../wallet-providers/svmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/schemas.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(rsc)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst api_1 = __webpack_require__(/*! @jup-ag/api */ \"(rsc)/./node_modules/@jup-ag/api/dist/index.mjs\");\n/**\n * JupiterActionProvider handles token swaps using Jupiter's API.\n */\nclass JupiterActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Initializes Jupiter API client.\n     */\n    constructor() {\n        super(\"jupiter\", []);\n    }\n    /**\n     * Swaps tokens using Jupiter's API.\n     *\n     * @param walletProvider - The wallet provider to use for the swap\n     * @param args - Swap parameters including input token, output token, and amount\n     * @returns A message indicating success or failure with transaction details\n     */\n    async swap(walletProvider, args) {\n        try {\n            const jupiterApi = (0, api_1.createJupiterApiClient)();\n            const userPublicKey = walletProvider.getPublicKey();\n            const inputMint = new web3_js_1.PublicKey(args.inputMint);\n            const outputMint = new web3_js_1.PublicKey(args.outputMint);\n            const { getMint } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/bignumber.js\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\")]).then(__webpack_require__.bind(__webpack_require__, /*! @solana/spl-token */ \"(rsc)/./node_modules/@solana/spl-token/lib/esm/index.js\"));\n            let mintInfo;\n            try {\n                mintInfo = await getMint(walletProvider.getConnection(), inputMint);\n            }\n            catch (error) {\n                return `Failed to fetch mint info for mint address ${args.inputMint}. Error: ${error}`;\n            }\n            const amount = args.amount * 10 ** mintInfo.decimals;\n            const quoteResponse = await jupiterApi.quoteGet({\n                inputMint: inputMint.toBase58(),\n                outputMint: outputMint.toBase58(),\n                amount: amount,\n                slippageBps: args.slippageBps || 50, // 0.5% default slippage\n            });\n            if (!quoteResponse) {\n                throw new Error(\"Failed to get a swap quote.\");\n            }\n            const swapRequest = {\n                userPublicKey: userPublicKey.toBase58(),\n                wrapAndUnwrapSol: true,\n                useSharedAccounts: true, // Optimize for low transaction costs\n                quoteResponse,\n            };\n            const swapResponse = await jupiterApi.swapPost({ swapRequest });\n            if (!swapResponse || !swapResponse.swapTransaction) {\n                throw new Error(\"Failed to generate swap transaction.\");\n            }\n            const transactionBuffer = Buffer.from(swapResponse.swapTransaction, \"base64\");\n            const tx = web3_js_1.VersionedTransaction.deserialize(transactionBuffer);\n            const signature = await walletProvider.signAndSendTransaction(tx);\n            await walletProvider.waitForSignatureResult(signature);\n            return `Successfully swapped ${args.amount} tokens! Signature: ${signature}`;\n        }\n        catch (error) {\n            return `Error swapping tokens: ${error}`;\n        }\n    }\n    /**\n     * Checks if the action provider supports the given network.\n     * Only supports Solana networks.\n     *\n     * @param network - The network to check support for\n     * @returns True if the network is a Solana network\n     */\n    supportsNetwork(network) {\n        return network.protocolFamily == \"svm\" && network.networkId === \"solana-mainnet\";\n    }\n}\nexports.JupiterActionProvider = JupiterActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"swap\",\n        description: `\n    Swaps tokens using Jupiter's DEX aggregator.\n    - Input and output tokens must be valid SPL token mints.\n    - Ensures sufficient balance before executing swap.\n    - If says \"SOL\" as the input or output, use the mint address So11111111111111111111111111111111111111112\n    NOTE: Only available on Solana mainnet.\n    `,\n        schema: schemas_1.SwapTokenSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [svmWalletProvider_1.SvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], JupiterActionProvider.prototype, \"swap\", null);\n/**\n * Factory function to create a new JupiterActionProvider instance.\n *\n * @returns A new JupiterActionProvider instance\n */\nconst jupiterActionProvider = () => new JupiterActionProvider();\nexports.jupiterActionProvider = jupiterActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/jupiterActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SwapTokenSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Schema for swapping tokens using Jupiter.\n */\nexports.SwapTokenSchema = zod_1.z\n    .object({\n    inputMint: zod_1.z.string().describe(\"The mint address of the token to swap from\"),\n    outputMint: zod_1.z.string().describe(\"The mint address of the token to swap to\"),\n    amount: zod_1.z.number().positive().describe(\"Amount of tokens to swap\"),\n    slippageBps: zod_1.z\n        .number()\n        .int()\n        .positive()\n        .default(50)\n        .describe(\"Slippage tolerance in basis points (e.g., 50 = 0.5%)\"),\n})\n    .describe(\"Swap tokens using Jupiter DEX aggregator\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9qdXBpdGVyL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9qdXBpdGVyL3NjaGVtYXMuanM/MjYwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3dhcFRva2VuU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBTY2hlbWEgZm9yIHN3YXBwaW5nIHRva2VucyB1c2luZyBKdXBpdGVyLlxuICovXG5leHBvcnRzLlN3YXBUb2tlblNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBpbnB1dE1pbnQ6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgbWludCBhZGRyZXNzIG9mIHRoZSB0b2tlbiB0byBzd2FwIGZyb21cIiksXG4gICAgb3V0cHV0TWludDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBtaW50IGFkZHJlc3Mgb2YgdGhlIHRva2VuIHRvIHN3YXAgdG9cIiksXG4gICAgYW1vdW50OiB6b2RfMS56Lm51bWJlcigpLnBvc2l0aXZlKCkuZGVzY3JpYmUoXCJBbW91bnQgb2YgdG9rZW5zIHRvIHN3YXBcIiksXG4gICAgc2xpcHBhZ2VCcHM6IHpvZF8xLnpcbiAgICAgICAgLm51bWJlcigpXG4gICAgICAgIC5pbnQoKVxuICAgICAgICAucG9zaXRpdmUoKVxuICAgICAgICAuZGVmYXVsdCg1MClcbiAgICAgICAgLmRlc2NyaWJlKFwiU2xpcHBhZ2UgdG9sZXJhbmNlIGluIGJhc2lzIHBvaW50cyAoZS5nLiwgNTAgPSAwLjUlKVwiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiU3dhcCB0b2tlbnMgdXNpbmcgSnVwaXRlciBERVggYWdncmVnYXRvclwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/jupiter/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/constants.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RATE_LIMITS = exports.API_KEY_MISSING_ERROR = exports.MESSARI_BASE_URL = void 0;\n/**\n * Base URL for the Messari API\n */\nexports.MESSARI_BASE_URL = \"https://api.messari.io/ai/v1\";\n/**\n * Default error message when API key is missing\n */\nexports.API_KEY_MISSING_ERROR = \"MESSARI_API_KEY is not configured.\";\n/**\n * Rate limits by subscription tier\n */\nexports.RATE_LIMITS = {\n    FREE: \"2 requests per day\",\n    LITE: \"10 requests per day\",\n    PRO: \"20 requests per day\",\n    ENTERPRISE: \"50 requests per day\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tZXNzYXJpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyw2QkFBNkIsR0FBRyx3QkFBd0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL21lc3NhcmkvY29uc3RhbnRzLmpzPzJjYzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJBVEVfTElNSVRTID0gZXhwb3J0cy5BUElfS0VZX01JU1NJTkdfRVJST1IgPSBleHBvcnRzLk1FU1NBUklfQkFTRV9VUkwgPSB2b2lkIDA7XG4vKipcbiAqIEJhc2UgVVJMIGZvciB0aGUgTWVzc2FyaSBBUElcbiAqL1xuZXhwb3J0cy5NRVNTQVJJX0JBU0VfVVJMID0gXCJodHRwczovL2FwaS5tZXNzYXJpLmlvL2FpL3YxXCI7XG4vKipcbiAqIERlZmF1bHQgZXJyb3IgbWVzc2FnZSB3aGVuIEFQSSBrZXkgaXMgbWlzc2luZ1xuICovXG5leHBvcnRzLkFQSV9LRVlfTUlTU0lOR19FUlJPUiA9IFwiTUVTU0FSSV9BUElfS0VZIGlzIG5vdCBjb25maWd1cmVkLlwiO1xuLyoqXG4gKiBSYXRlIGxpbWl0cyBieSBzdWJzY3JpcHRpb24gdGllclxuICovXG5leHBvcnRzLlJBVEVfTElNSVRTID0ge1xuICAgIEZSRUU6IFwiMiByZXF1ZXN0cyBwZXIgZGF5XCIsXG4gICAgTElURTogXCIxMCByZXF1ZXN0cyBwZXIgZGF5XCIsXG4gICAgUFJPOiBcIjIwIHJlcXVlc3RzIHBlciBkYXlcIixcbiAgICBFTlRFUlBSSVNFOiBcIjUwIHJlcXVlc3RzIHBlciBkYXlcIixcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./messariActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/messariActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/utils.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tZXNzYXJpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywrSEFBeUI7QUFDOUMsYUFBYSxtQkFBTyxDQUFDLG1HQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQywrRkFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsdUdBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLCtGQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvbWVzc2FyaS9pbmRleC5qcz9hMTJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWVzc2FyaUFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/messariActionProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/messariActionProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.messariActionProvider = exports.MessariActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/schemas.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/utils.js\");\n/**\n * MessariActionProvider is an action provider for Messari AI toolkit interactions.\n * It enables AI agents to ask research questions about crypto markets, protocols, and tokens.\n *\n * @augments ActionProvider\n */\nclass MessariActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the MessariActionProvider class.\n     *\n     * @param config - The configuration options for the MessariActionProvider\n     */\n    constructor(config = {}) {\n        super(\"messari\", []);\n        config.apiKey || (config.apiKey = process.env.MESSARI_API_KEY);\n        if (!config.apiKey) {\n            throw new Error(constants_1.API_KEY_MISSING_ERROR);\n        }\n        this.apiKey = config.apiKey;\n    }\n    /**\n     * Makes a request to the Messari AI API with a research question\n     *\n     * @param args - The arguments containing the research question\n     * @returns A string containing the research results or an error message\n     */\n    async researchQuestion(args) {\n        try {\n            // Make API request\n            const response = await fetch(`${constants_1.MESSARI_BASE_URL}/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-messari-api-key\": this.apiKey,\n                },\n                body: JSON.stringify({\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: args.question,\n                        },\n                    ],\n                }),\n            });\n            if (!response.ok) {\n                throw await (0, utils_1.createMessariError)(response);\n            }\n            // Parse and validate response\n            let data;\n            try {\n                data = (await response.json());\n            }\n            catch (jsonError) {\n                throw new Error(`Failed to parse API response: ${jsonError instanceof Error ? jsonError.message : String(jsonError)}`);\n            }\n            if (!data.data?.messages?.[0]?.content) {\n                throw new Error(\"Received invalid response format from Messari API\");\n            }\n            const result = data.data.messages[0].content;\n            return `Messari Research Results:\\n\\n${result}`;\n        }\n        catch (error) {\n            if (error instanceof Error && \"responseText\" in error) {\n                return (0, utils_1.formatMessariApiError)(error);\n            }\n            return (0, utils_1.formatGenericError)(error);\n        }\n    }\n    /**\n     * Checks if the action provider supports the given network.\n     * Messari research is network-agnostic, so it supports all networks.\n     *\n     * @param _ - The network to check\n     * @returns Always returns true as Messari research is network-agnostic\n     */\n    supportsNetwork(_) {\n        return true; // Messari research is network-agnostic\n    }\n}\nexports.MessariActionProvider = MessariActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"research_question\",\n        description: `\nThis tool queries Messari AI for comprehensive crypto research across these datasets:\n1. News/Content - Latest crypto news, blogs, podcasts\n2. Exchanges - CEX/DEX volumes, market share, assets listed\n3. Onchain Data - Active addresses, transaction fees, total transactions.\n4. Token Unlocks - Upcoming supply unlocks, vesting schedules, and token emission details\n5. Market Data - Asset prices, trading volume, market cap, TVL, and historical performance\n6. Fundraising - Investment data, funding rounds, venture capital activity.\n7. Protocol Research - Technical analysis of how protocols work, tokenomics, and yield mechanisms\n8. Social Data - Twitter followers and Reddit subscribers metrics, growth trends\n\nExamples: \"Which DEXs have the highest trading volume this month?\", \"When is Arbitrum's next major token unlock?\", \"How does Morpho generate yield for users?\", \"Which cryptocurrency has gained the most Twitter followers in 2023?\", \"What did Vitalik Buterin say about rollups in his recent blog posts?\"\n    `,\n        schema: schemas_1.MessariResearchQuestionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], MessariActionProvider.prototype, \"researchQuestion\", null);\n/**\n * Factory function to create a new MessariActionProvider instance.\n *\n * @param config - The configuration options for the MessariActionProvider\n * @returns A new instance of MessariActionProvider\n */\nconst messariActionProvider = (config = {}) => new MessariActionProvider(config);\nexports.messariActionProvider = messariActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/messariActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MessariResearchQuestionSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for submitting a research question to Messari AI.\n */\nexports.MessariResearchQuestionSchema = zod_1.z\n    .object({\n    question: zod_1.z\n        .string()\n        .min(1, \"Research question is required.\")\n        .describe(\"The research question about crypto markets, protocols, or tokens\"),\n})\n    .strip()\n    .describe(\"Input schema for submitting a research question to Messari AI\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tZXNzYXJpL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvbWVzc2FyaS9zY2hlbWFzLmpzPzRkZDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lc3NhcmlSZXNlYXJjaFF1ZXN0aW9uU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHN1Ym1pdHRpbmcgYSByZXNlYXJjaCBxdWVzdGlvbiB0byBNZXNzYXJpIEFJLlxuICovXG5leHBvcnRzLk1lc3NhcmlSZXNlYXJjaFF1ZXN0aW9uU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHF1ZXN0aW9uOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAubWluKDEsIFwiUmVzZWFyY2ggcXVlc3Rpb24gaXMgcmVxdWlyZWQuXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSByZXNlYXJjaCBxdWVzdGlvbiBhYm91dCBjcnlwdG8gbWFya2V0cywgcHJvdG9jb2xzLCBvciB0b2tlbnNcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBzdWJtaXR0aW5nIGEgcmVzZWFyY2ggcXVlc3Rpb24gdG8gTWVzc2FyaSBBSVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/types.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/types.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tZXNzYXJpL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvbWVzc2FyaS90eXBlcy5qcz9kYTYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/messari/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createMessariError = createMessariError;\nexports.formatMessariApiError = formatMessariApiError;\nexports.formatGenericError = formatGenericError;\n/**\n * Creates a MessariError from an HTTP response\n *\n * @param response - The fetch Response object\n * @returns A MessariError with response details\n */\nasync function createMessariError(response) {\n    const error = new Error(`Messari API returned ${response.status} ${response.statusText}`);\n    error.status = response.status;\n    error.statusText = response.statusText;\n    const responseText = await response.text();\n    error.responseText = responseText;\n    try {\n        const errorJson = JSON.parse(responseText);\n        error.errorResponse = errorJson;\n    }\n    catch {\n        // If parsing fails, just use the raw text\n    }\n    return error;\n}\n/**\n * Formats error details for API errors\n *\n * @param error - The MessariError to format\n * @returns Formatted error message\n */\nfunction formatMessariApiError(error) {\n    if (error.errorResponse?.error) {\n        return `Messari API Error: ${error.errorResponse.error}`;\n    }\n    const errorDetails = {\n        status: error.status,\n        statusText: error.statusText,\n        responseText: error.responseText,\n        message: error.message,\n    };\n    return `Messari API Error: ${JSON.stringify(errorDetails, null, 2)}`;\n}\n/**\n * Formats generic errors\n *\n * @param error - The error to format\n * @returns Formatted error message\n */\nfunction formatGenericError(error) {\n    // Check if this might be a JSON string containing an error message\n    if (typeof error === \"string\") {\n        try {\n            const parsedError = JSON.parse(error);\n            if (parsedError.error) {\n                return `Messari API Error: ${parsedError.error}`;\n            }\n        }\n        catch {\n            // Not valid JSON, continue with normal handling\n        }\n    }\n    return `Unexpected error: ${error instanceof Error ? error.message : String(error)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tZXNzYXJpL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGlCQUFpQixFQUFFLG9CQUFvQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHNDQUFzQztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxrQkFBa0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHVEQUF1RDtBQUN2RiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL21lc3NhcmkvdXRpbHMuanM/ODdlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTWVzc2FyaUVycm9yID0gY3JlYXRlTWVzc2FyaUVycm9yO1xuZXhwb3J0cy5mb3JtYXRNZXNzYXJpQXBpRXJyb3IgPSBmb3JtYXRNZXNzYXJpQXBpRXJyb3I7XG5leHBvcnRzLmZvcm1hdEdlbmVyaWNFcnJvciA9IGZvcm1hdEdlbmVyaWNFcnJvcjtcbi8qKlxuICogQ3JlYXRlcyBhIE1lc3NhcmlFcnJvciBmcm9tIGFuIEhUVFAgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0gcmVzcG9uc2UgLSBUaGUgZmV0Y2ggUmVzcG9uc2Ugb2JqZWN0XG4gKiBAcmV0dXJucyBBIE1lc3NhcmlFcnJvciB3aXRoIHJlc3BvbnNlIGRldGFpbHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlTWVzc2FyaUVycm9yKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYE1lc3NhcmkgQVBJIHJldHVybmVkICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgZXJyb3Iuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgIGVycm9yLnN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICBlcnJvci5yZXNwb25zZVRleHQgPSByZXNwb25zZVRleHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXJyb3JKc29uID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xuICAgICAgICBlcnJvci5lcnJvclJlc3BvbnNlID0gZXJyb3JKc29uO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIElmIHBhcnNpbmcgZmFpbHMsIGp1c3QgdXNlIHRoZSByYXcgdGV4dFxuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG4vKipcbiAqIEZvcm1hdHMgZXJyb3IgZGV0YWlscyBmb3IgQVBJIGVycm9yc1xuICpcbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBNZXNzYXJpRXJyb3IgdG8gZm9ybWF0XG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgZXJyb3IgbWVzc2FnZVxuICovXG5mdW5jdGlvbiBmb3JtYXRNZXNzYXJpQXBpRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuZXJyb3JSZXNwb25zZT8uZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGBNZXNzYXJpIEFQSSBFcnJvcjogJHtlcnJvci5lcnJvclJlc3BvbnNlLmVycm9yfWA7XG4gICAgfVxuICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IHtcbiAgICAgICAgc3RhdHVzOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IGVycm9yLnN0YXR1c1RleHQsXG4gICAgICAgIHJlc3BvbnNlVGV4dDogZXJyb3IucmVzcG9uc2VUZXh0LFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgIH07XG4gICAgcmV0dXJuIGBNZXNzYXJpIEFQSSBFcnJvcjogJHtKU09OLnN0cmluZ2lmeShlcnJvckRldGFpbHMsIG51bGwsIDIpfWA7XG59XG4vKipcbiAqIEZvcm1hdHMgZ2VuZXJpYyBlcnJvcnNcbiAqXG4gKiBAcGFyYW0gZXJyb3IgLSBUaGUgZXJyb3IgdG8gZm9ybWF0XG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgZXJyb3IgbWVzc2FnZVxuICovXG5mdW5jdGlvbiBmb3JtYXRHZW5lcmljRXJyb3IoZXJyb3IpIHtcbiAgICAvLyBDaGVjayBpZiB0aGlzIG1pZ2h0IGJlIGEgSlNPTiBzdHJpbmcgY29udGFpbmluZyBhbiBlcnJvciBtZXNzYWdlXG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRXJyb3IgPSBKU09OLnBhcnNlKGVycm9yKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRFcnJvci5lcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgTWVzc2FyaSBBUEkgRXJyb3I6ICR7cGFyc2VkRXJyb3IuZXJyb3J9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAvLyBOb3QgdmFsaWQgSlNPTiwgY29udGludWUgd2l0aCBub3JtYWwgaGFuZGxpbmdcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYFVuZXhwZWN0ZWQgZXJyb3I6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWA7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/messari/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/constants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/constants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MTOKEN_ABI = exports.ETH_ROUTER_ABI = exports.MTOKENS_UNDERLYING_DECIMALS = exports.TOKEN_DECIMALS = exports.WETH_ROUTER_ADDRESS = exports.MOONWELL_BASE_SEPOLIA_ADDRESSES = exports.MOONWELL_BASE_ADDRESSES = void 0;\nexports.MOONWELL_BASE_ADDRESSES = {\n    \"0xEdc817A28E8B93B03976FBd4a3dDBc9f7D176c22\": \"MOONWELL_USDC\",\n    \"0x73b06D8d18De422E269645eaCe15400DE7462417\": \"MOONWELL_DAI\",\n    \"0x628ff693426583D9a7FB391E54366292F509D457\": \"MOONWELL_WETH\",\n    \"0x3bf93770f2d4a794c3d9EBEfBAeBAE2a8f09A5E5\": \"MOONWELL_cbETH\",\n    \"0x627Fe393Bc6EdDA28e99AE648fD6fF362514304b\": \"MOONWELL_wstETH\",\n    \"0x73902f619CEB9B31FD8EFecf435CbDf89E369Ba6\": \"MOONWELL_AERO\",\n    \"0xb8051464C8c92209C92F3a4CD9C73746C4c3CFb3\": \"MOONWELL_weETH\",\n    \"0xF877ACaFA28c19b96727966690b2f44d35aD5976\": \"MOONWELL_cbBTC\",\n    \"0xb682c840B5F4FC58B20769E691A6fa1305A501a2\": \"MOONWELL_EURC\",\n    \"0xfC41B49d064Ac646015b459C522820DB9472F4B5\": \"MOONWELL_wrsETH\",\n    \"0xdC7810B47eAAb250De623F0eE07764afa5F71ED1\": \"MOONWELL_WELL\",\n    \"0xb6419c6C2e60c4025D6D06eE4F913ce89425a357\": \"MOONWELL_USDS\",\n    \"0x9A858ebfF1bEb0D3495BB0e2897c1528eD84A218\": \"MOONWELL_TBTC\",\n    \"0x70778cfcFC475c7eA0f24cC625Baf6EaE475D0c9\": \"WETH_ROUTER\",\n};\nexports.MOONWELL_BASE_SEPOLIA_ADDRESSES = {\n    \"0x876852425331a113d8E432eFFB3aC5BEf38f033a\": \"MOONWELL_USDBC\",\n    \"0x5302EbD8BC32435C823c2e22B04Cd6c45f593e89\": \"MOONWELL_cbETH\",\n    \"0x2F39a349A79492a70E152760ce7123A1933eCf28\": \"MOONWELL_WETH\",\n};\nexports.WETH_ROUTER_ADDRESS = \"0x70778cfcFC475c7eA0f24cC625Baf6EaE475D0c9\";\n// Token decimals mapping\nexports.TOKEN_DECIMALS = {\n    \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\": 6, // USDC\n    \"0x60a3E35Cc302bFA44Cb288Bc5a4F316Fdb1adb42\": 6, // EURC\n    \"0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A\": 18, // weETH\n    \"0xEDfa23602D0EC14714057867A78d01e94176BEA0\": 18, // wrsETH\n    \"0x236aa50979D5f3De3Bd1Eeb40E81137F22ab794b\": 18, // tBTC\n    \"0xA88594D404727625A9437C3f886C7643872296AE\": 18, // WELL\n    \"0x820C137fa70C8691f0e44Dc420a5e53c168921Dc\": 18, // USDS\n    \"0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb\": 18, // DAI\n    \"0x4200000000000000000000000000000000000006\": 18, // WETH\n    \"0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22\": 18, // cbETH\n    \"0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452\": 18, // wstETH\n    \"0x940181a94a35a4569e4529a3cdfb74e38fd98631\": 18, // AERO\n    \"0x0000000000000000000000000000000000000000\": 18, // ETH (native)\n};\nexports.MTOKENS_UNDERLYING_DECIMALS = {\n    MOONWELL_USDC: 6,\n    MOONWELL_DAI: 18,\n    MOONWELL_WETH: 18,\n    MOONWELL_cbETH: 18,\n    MOONWELL_wstETH: 18,\n    MOONWELL_AERO: 18,\n    MOONWELL_weETH: 18,\n    MOONWELL_cbBTC: 18,\n    MOONWELL_EURC: 6,\n    MOONWELL_wrsETH: 18,\n    MOONWELL_WELL: 18,\n    MOONWELL_USDS: 18,\n    MOONWELL_TBTC: 18,\n};\nexports.ETH_ROUTER_ABI = [\n    {\n        name: \"mint\",\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"receiver\",\n                type: \"address\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nexports.MTOKEN_ABI = [\n    {\n        type: \"function\",\n        name: \"mint\",\n        inputs: [\n            {\n                name: \"mintAmount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"redeemUnderlying\",\n        inputs: [\n            {\n                name: \"redeemAmount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb29ud2VsbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsc0JBQXNCLEdBQUcsbUNBQW1DLEdBQUcsc0JBQXNCLEdBQUcsMkJBQTJCLEdBQUcsdUNBQXVDLEdBQUcsK0JBQStCO0FBQ3BOLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL21vb253ZWxsL2NvbnN0YW50cy5qcz9jMmZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NVE9LRU5fQUJJID0gZXhwb3J0cy5FVEhfUk9VVEVSX0FCSSA9IGV4cG9ydHMuTVRPS0VOU19VTkRFUkxZSU5HX0RFQ0lNQUxTID0gZXhwb3J0cy5UT0tFTl9ERUNJTUFMUyA9IGV4cG9ydHMuV0VUSF9ST1VURVJfQUREUkVTUyA9IGV4cG9ydHMuTU9PTldFTExfQkFTRV9TRVBPTElBX0FERFJFU1NFUyA9IGV4cG9ydHMuTU9PTldFTExfQkFTRV9BRERSRVNTRVMgPSB2b2lkIDA7XG5leHBvcnRzLk1PT05XRUxMX0JBU0VfQUREUkVTU0VTID0ge1xuICAgIFwiMHhFZGM4MTdBMjhFOEI5M0IwMzk3NkZCZDRhM2REQmM5ZjdEMTc2YzIyXCI6IFwiTU9PTldFTExfVVNEQ1wiLFxuICAgIFwiMHg3M2IwNkQ4ZDE4RGU0MjJFMjY5NjQ1ZWFDZTE1NDAwREU3NDYyNDE3XCI6IFwiTU9PTldFTExfREFJXCIsXG4gICAgXCIweDYyOGZmNjkzNDI2NTgzRDlhN0ZCMzkxRTU0MzY2MjkyRjUwOUQ0NTdcIjogXCJNT09OV0VMTF9XRVRIXCIsXG4gICAgXCIweDNiZjkzNzcwZjJkNGE3OTRjM2Q5RUJFZkJBZUJBRTJhOGYwOUE1RTVcIjogXCJNT09OV0VMTF9jYkVUSFwiLFxuICAgIFwiMHg2MjdGZTM5M0JjNkVkREEyOGU5OUFFNjQ4ZkQ2ZkYzNjI1MTQzMDRiXCI6IFwiTU9PTldFTExfd3N0RVRIXCIsXG4gICAgXCIweDczOTAyZjYxOUNFQjlCMzFGRDhFRmVjZjQzNUNiRGY4OUUzNjlCYTZcIjogXCJNT09OV0VMTF9BRVJPXCIsXG4gICAgXCIweGI4MDUxNDY0QzhjOTIyMDlDOTJGM2E0Q0Q5QzczNzQ2QzRjM0NGYjNcIjogXCJNT09OV0VMTF93ZUVUSFwiLFxuICAgIFwiMHhGODc3QUNhRkEyOGMxOWI5NjcyNzk2NjY5MGIyZjQ0ZDM1YUQ1OTc2XCI6IFwiTU9PTldFTExfY2JCVENcIixcbiAgICBcIjB4YjY4MmM4NDBCNUY0RkM1OEIyMDc2OUU2OTFBNmZhMTMwNUE1MDFhMlwiOiBcIk1PT05XRUxMX0VVUkNcIixcbiAgICBcIjB4ZkM0MUI0OWQwNjRBYzY0NjAxNWI0NTlDNTIyODIwREI5NDcyRjRCNVwiOiBcIk1PT05XRUxMX3dyc0VUSFwiLFxuICAgIFwiMHhkQzc4MTBCNDdlQUFiMjUwRGU2MjNGMGVFMDc3NjRhZmE1RjcxRUQxXCI6IFwiTU9PTldFTExfV0VMTFwiLFxuICAgIFwiMHhiNjQxOWM2QzJlNjBjNDAyNUQ2RDA2ZUU0RjkxM2NlODk0MjVhMzU3XCI6IFwiTU9PTldFTExfVVNEU1wiLFxuICAgIFwiMHg5QTg1OGViZkYxYkViMEQzNDk1QkIwZTI4OTdjMTUyOGVEODRBMjE4XCI6IFwiTU9PTldFTExfVEJUQ1wiLFxuICAgIFwiMHg3MDc3OGNmY0ZDNDc1YzdlQTBmMjRjQzYyNUJhZjZFYUU0NzVEMGM5XCI6IFwiV0VUSF9ST1VURVJcIixcbn07XG5leHBvcnRzLk1PT05XRUxMX0JBU0VfU0VQT0xJQV9BRERSRVNTRVMgPSB7XG4gICAgXCIweDg3Njg1MjQyNTMzMWExMTNkOEU0MzJlRkZCM2FDNUJFZjM4ZjAzM2FcIjogXCJNT09OV0VMTF9VU0RCQ1wiLFxuICAgIFwiMHg1MzAyRWJEOEJDMzI0MzVDODIzYzJlMjJCMDRDZDZjNDVmNTkzZTg5XCI6IFwiTU9PTldFTExfY2JFVEhcIixcbiAgICBcIjB4MkYzOWEzNDlBNzk0OTJhNzBFMTUyNzYwY2U3MTIzQTE5MzNlQ2YyOFwiOiBcIk1PT05XRUxMX1dFVEhcIixcbn07XG5leHBvcnRzLldFVEhfUk9VVEVSX0FERFJFU1MgPSBcIjB4NzA3NzhjZmNGQzQ3NWM3ZUEwZjI0Y0M2MjVCYWY2RWFFNDc1RDBjOVwiO1xuLy8gVG9rZW4gZGVjaW1hbHMgbWFwcGluZ1xuZXhwb3J0cy5UT0tFTl9ERUNJTUFMUyA9IHtcbiAgICBcIjB4ODMzNTg5ZkNENmVEYjZFMDhmNGM3QzMyRDRmNzFiNTRiZEEwMjkxM1wiOiA2LCAvLyBVU0RDXG4gICAgXCIweDYwYTNFMzVDYzMwMmJGQTQ0Q2IyODhCYzVhNEYzMTZGZGIxYWRiNDJcIjogNiwgLy8gRVVSQ1xuICAgIFwiMHgwNEMwNTk5QWU1QTQ0NzU3YzBhZjZGOWVDM2I5M2RhODk3NmMxNTBBXCI6IDE4LCAvLyB3ZUVUSFxuICAgIFwiMHhFRGZhMjM2MDJEMEVDMTQ3MTQwNTc4NjdBNzhkMDFlOTQxNzZCRUEwXCI6IDE4LCAvLyB3cnNFVEhcbiAgICBcIjB4MjM2YWE1MDk3OUQ1ZjNEZTNCZDFFZWI0MEU4MTEzN0YyMmFiNzk0YlwiOiAxOCwgLy8gdEJUQ1xuICAgIFwiMHhBODg1OTRENDA0NzI3NjI1QTk0MzdDM2Y4ODZDNzY0Mzg3MjI5NkFFXCI6IDE4LCAvLyBXRUxMXG4gICAgXCIweDgyMEMxMzdmYTcwQzg2OTFmMGU0NERjNDIwYTVlNTNjMTY4OTIxRGNcIjogMTgsIC8vIFVTRFNcbiAgICBcIjB4NTBjNTcyNTk0OUE2RjBjNzJFNkM0YTY0MUYyNDA0OUE5MTdEQjBDYlwiOiAxOCwgLy8gREFJXG4gICAgXCIweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDZcIjogMTgsIC8vIFdFVEhcbiAgICBcIjB4MkFlM0YxRWM3RjFGNTAxMkNGRWFiMDE4NWJmYzdhYTNjZjBERWMyMlwiOiAxOCwgLy8gY2JFVEhcbiAgICBcIjB4YzFDQmEzZkNlYTM0NGY5MkQ5MjM5YzA4QzA1NjhmNkYyRjBlZTQ1MlwiOiAxOCwgLy8gd3N0RVRIXG4gICAgXCIweDk0MDE4MWE5NGEzNWE0NTY5ZTQ1MjlhM2NkZmI3NGUzOGZkOTg2MzFcIjogMTgsIC8vIEFFUk9cbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiOiAxOCwgLy8gRVRIIChuYXRpdmUpXG59O1xuZXhwb3J0cy5NVE9LRU5TX1VOREVSTFlJTkdfREVDSU1BTFMgPSB7XG4gICAgTU9PTldFTExfVVNEQzogNixcbiAgICBNT09OV0VMTF9EQUk6IDE4LFxuICAgIE1PT05XRUxMX1dFVEg6IDE4LFxuICAgIE1PT05XRUxMX2NiRVRIOiAxOCxcbiAgICBNT09OV0VMTF93c3RFVEg6IDE4LFxuICAgIE1PT05XRUxMX0FFUk86IDE4LFxuICAgIE1PT05XRUxMX3dlRVRIOiAxOCxcbiAgICBNT09OV0VMTF9jYkJUQzogMTgsXG4gICAgTU9PTldFTExfRVVSQzogNixcbiAgICBNT09OV0VMTF93cnNFVEg6IDE4LFxuICAgIE1PT05XRUxMX1dFTEw6IDE4LFxuICAgIE1PT05XRUxMX1VTRFM6IDE4LFxuICAgIE1PT05XRUxMX1RCVEM6IDE4LFxufTtcbmV4cG9ydHMuRVRIX1JPVVRFUl9BQkkgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiBcIm1pbnRcIixcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuZXhwb3J0cy5NVE9LRU5fQUJJID0gW1xuICAgIHtcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBuYW1lOiBcIm1pbnRcIixcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtaW50QW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgIG5hbWU6IFwicmVkZWVtVW5kZXJseWluZ1wiLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInJlZGVlbUFtb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB9LFxuXTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.moonwellActionProvider = void 0;\nvar moonwellActionProvider_1 = __webpack_require__(/*! ./moonwellActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/moonwellActionProvider.js\");\nObject.defineProperty(exports, \"moonwellActionProvider\", ({ enumerable: true, get: function () { return moonwellActionProvider_1.moonwellActionProvider; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb29ud2VsbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsK0JBQStCLG1CQUFPLENBQUMsa0lBQTBCO0FBQ2pFLDBEQUF5RCxFQUFFLHFDQUFxQywyREFBMkQsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL21vb253ZWxsL2luZGV4LmpzPzEyNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1vb253ZWxsQWN0aW9uUHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgbW9vbndlbGxBY3Rpb25Qcm92aWRlcl8xID0gcmVxdWlyZShcIi4vbW9vbndlbGxBY3Rpb25Qcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1vb253ZWxsQWN0aW9uUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vb253ZWxsQWN0aW9uUHJvdmlkZXJfMS5tb29ud2VsbEFjdGlvblByb3ZpZGVyOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/moonwellActionProvider.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/moonwellActionProvider.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.moonwellActionProvider = exports.MoonwellActionProvider = exports.SUPPORTED_NETWORKS = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/constants.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/schemas.js\");\nexports.SUPPORTED_NETWORKS = [\"base-mainnet\", \"base-sepolia\"];\n/**\n * MoonwellActionProvider is an action provider for Moonwell MToken interactions.\n */\nclass MoonwellActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the MoonwellActionProvider class.\n     */\n    constructor() {\n        super(\"moonwell\", []);\n        /**\n         * Checks if the Moonwell action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Moonwell action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\" && exports.SUPPORTED_NETWORKS.includes(network.networkId);\n    }\n    /**\n     * Deposits assets into a Moonwell MToken\n     *\n     * @param wallet - The wallet instance to execute the transaction\n     * @param args - The input arguments for the action\n     * @returns A success message with transaction details or an error message\n     */\n    async mint(wallet, args) {\n        const assets = new decimal_js_1.Decimal(args.assets);\n        if (assets.comparedTo(new decimal_js_1.Decimal(0.0)) != 1) {\n            return \"Error: Assets amount must be greater than 0\";\n        }\n        const network = wallet.getNetwork();\n        const networkObject = network.networkId === \"base-mainnet\"\n            ? constants_1.MOONWELL_BASE_ADDRESSES\n            : constants_1.MOONWELL_BASE_SEPOLIA_ADDRESSES;\n        if (!networkObject[args.mTokenAddress]) {\n            return \"Error: Invalid MToken address\";\n        }\n        try {\n            // Handle different token decimals\n            let atomicAssets;\n            const userAddress = wallet.getAddress();\n            if (network.networkId === \"base-mainnet\" &&\n                \"MOONWELL_WETH\" === networkObject[args.mTokenAddress]) {\n                // For ETH minting, use parseEther (18 decimals)\n                atomicAssets = (0, viem_1.parseEther)(args.assets);\n            }\n            else {\n                // For other tokens, use the correct decimals\n                const decimals = constants_1.TOKEN_DECIMALS[args.tokenAddress];\n                if (!decimals) {\n                    return `Error: Unsupported token address ${args.tokenAddress}. Please verify the token address is correct.`;\n                }\n                atomicAssets = (0, viem_1.parseUnits)(args.assets, decimals);\n            }\n            // Check if this is a WETH mint on mainnet\n            if (network.networkId === \"base-mainnet\" &&\n                \"MOONWELL_WETH\" === networkObject[args.mTokenAddress]) {\n                // Use the router for ETH mints - no approval needed since we're sending native ETH\n                const data = (0, viem_1.encodeFunctionData)({\n                    abi: constants_1.ETH_ROUTER_ABI,\n                    functionName: \"mint\",\n                    args: [userAddress],\n                });\n                const txHash = await wallet.sendTransaction({\n                    to: constants_1.WETH_ROUTER_ADDRESS,\n                    data,\n                    value: atomicAssets,\n                });\n                const receipt = await wallet.waitForTransactionReceipt(txHash);\n                return `Deposited ${args.assets} ETH to Moonwell WETH via router with transaction hash: ${txHash}\\nTransaction receipt: ${JSON.stringify(receipt, (_, value) => (typeof value === \"bigint\" ? value.toString() : value))}`;\n            }\n            else {\n                // For all other tokens, we need approval first\n                const approvalResult = await (0, utils_1.approve)(wallet, args.tokenAddress, args.mTokenAddress, atomicAssets);\n                if (approvalResult.startsWith(\"Error\")) {\n                    return `Error approving Moonwell MToken as spender: ${approvalResult}`;\n                }\n                const data = (0, viem_1.encodeFunctionData)({\n                    abi: constants_1.MTOKEN_ABI,\n                    functionName: \"mint\",\n                    args: [atomicAssets],\n                });\n                const txHash = await wallet.sendTransaction({\n                    to: args.mTokenAddress,\n                    data,\n                    value: 0n,\n                });\n                const receipt = await wallet.waitForTransactionReceipt(txHash);\n                if (!receipt) {\n                    throw new Error(\"No receipt received for mint transaction\");\n                }\n                if (receipt.status !== \"success\") {\n                    throw new Error(`Mint transaction failed with status ${receipt.status}`);\n                }\n                return `Deposited ${args.assets} to Moonwell MToken ${args.mTokenAddress} with transaction hash: ${txHash}\\nTransaction receipt: ${JSON.stringify(receipt, (_, value) => (typeof value === \"bigint\" ? value.toString() : value))}`;\n            }\n        }\n        catch (error) {\n            console.error(\"DEBUG - Mint error:\", error);\n            if (error instanceof Error) {\n                return `Error minting Moonwell MToken: ${error.message}`;\n            }\n            return `Error minting Moonwell MToken: ${error}`;\n        }\n    }\n    /**\n     * Redeems assets from a Moonwell MToken\n     *\n     * @param wallet - The wallet instance to execute the transaction\n     * @param args - The input arguments for the action\n     * @returns A success message with transaction details or an error message\n     */\n    async redeem(wallet, args) {\n        const assets = new decimal_js_1.Decimal(args.assets);\n        if (assets.comparedTo(new decimal_js_1.Decimal(0.0)) != 1) {\n            return \"Error: Assets amount must be greater than 0\";\n        }\n        const network = wallet.getNetwork();\n        const networkObject = network.networkId === \"base-mainnet\"\n            ? constants_1.MOONWELL_BASE_ADDRESSES\n            : constants_1.MOONWELL_BASE_SEPOLIA_ADDRESSES;\n        if (!networkObject[args.mTokenAddress]) {\n            return \"Error: Invalid MToken address\";\n        }\n        try {\n            // Handle different token decimals\n            const decimals = constants_1.MTOKENS_UNDERLYING_DECIMALS[constants_1.MOONWELL_BASE_ADDRESSES[args.mTokenAddress]];\n            if (!decimals) {\n                return `Error: Unsupported token address ${args.mTokenAddress}. Please verify the token address is correct.`;\n            }\n            const atomicAssets = (0, viem_1.parseUnits)(args.assets, decimals);\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.MTOKEN_ABI,\n                functionName: \"redeemUnderlying\",\n                args: [atomicAssets],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: args.mTokenAddress,\n                data,\n                value: 0n,\n            });\n            const receipt = await wallet.waitForTransactionReceipt(txHash);\n            if (!receipt) {\n                throw new Error(\"No receipt received for redeem transaction\");\n            }\n            if (receipt.status !== \"success\") {\n                throw new Error(`Redeem transaction failed with status ${receipt.status}`);\n            }\n            return `Redeemed ${args.assets} from Moonwell MToken ${args.mTokenAddress} with transaction hash: ${txHash}\\nTransaction receipt: ${JSON.stringify(receipt, (_, value) => (typeof value === \"bigint\" ? value.toString() : value))}`;\n        }\n        catch (error) {\n            console.error(\"DEBUG - Redeem error:\", error);\n            if (error instanceof Error) {\n                return `Error redeeming from Moonwell MToken: ${error.message}`;\n            }\n            return `Error redeeming from Moonwell MToken: ${error}`;\n        }\n    }\n}\nexports.MoonwellActionProvider = MoonwellActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"mint\",\n        description: `\nThis tool allows minting assets into a Moonwell MToken. \n\nIt takes:\n- mTokenAddress: The address of the Moonwell MToken to mint to\n- assets: The amount of assets that will be approved to spend by the mToken in whole units\n  Examples for WETH:\n  - 1 WETH\n  - 0.1 WETH\n  - 0.01 WETH\n  Examples for cbETH:\n  - 1 cbETH\n  - 0.1 cbETH\n  - 0.01 cbETH\n  Examples for USDC:\n  - 1 USDC\n  - 0.1 USDC\n  - 0.01 USDC\n- tokenAddress: The address of the token to approve\n\nImportant notes:\n- Make sure to use the exact amount provided. Do not convert units for assets for this action.\n- Please use a token address (example 0x4200000000000000000000000000000000000006) for the tokenAddress field.\n- This tool handles token approval. If requested to mint on Moonwell, do not use any other actions to approve tokens.\n`,\n        schema: schemas_1.MintSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], MoonwellActionProvider.prototype, \"mint\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"redeem\",\n        description: `\nThis tool allows redeeming assets from a Moonwell MToken. \n\nIt takes:\n- mTokenAddress: The address of the Moonwell MToken to redeem from\n- assets: The amount of assets to redeem in whole units\n  Examples for WETH:\n  - 1 WETH\n  - 0.1 WETH\n  - 0.01 WETH\n  Examples for cbETH:\n  - 1 cbETH\n  - 0.1 cbETH\n  - 0.01 cbETH\n  Examples for USDC:\n  - 1 USDC\n  - 0.1 USDC\n  - 0.01 USDC\n\nImportant notes:\n- Make sure to use the exact amount provided. Do not convert units for assets for this action.\n- Please use a token address (example 0x4200000000000000000000000000000000000006) for the tokenAddress field.\n`,\n        schema: schemas_1.RedeemSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], MoonwellActionProvider.prototype, \"redeem\", null);\nconst moonwellActionProvider = () => new MoonwellActionProvider();\nexports.moonwellActionProvider = moonwellActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/moonwellActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/schemas.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/schemas.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedeemSchema = exports.MintSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for Moonwell MToken mint action.\n */\nexports.MintSchema = zod_1.z\n    .object({\n    assets: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of assets to use to mint, in whole units\"),\n    tokenAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the assets token to approve for minting\"),\n    mTokenAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the Moonwell MToken to mint from\"),\n})\n    .describe(\"Input schema for Moonwell MToken mint action\");\n/**\n * Input schema for Moonwell MToken redeem action.\n */\nexports.RedeemSchema = zod_1.z\n    .object({\n    mTokenAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the Moonwell MToken to redeem from\"),\n    assets: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of assets to redeem, in whole units\"),\n})\n    .strip()\n    .describe(\"Input schema for Moonwell MToken redeem action\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb29ud2VsbC9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGtCQUFrQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvbW9vbndlbGwvc2NoZW1hcy5qcz83Nzg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWRlZW1TY2hlbWEgPSBleHBvcnRzLk1pbnRTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgTW9vbndlbGwgTVRva2VuIG1pbnQgYWN0aW9uLlxuICovXG5leHBvcnRzLk1pbnRTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYXNzZXRzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL15cXGQrKFxcLlxcZCspPyQvLCBcIk11c3QgYmUgYSB2YWxpZCBpbnRlZ2VyIG9yIGRlY2ltYWwgdmFsdWVcIilcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIHF1YW50aXR5IG9mIGFzc2V0cyB0byB1c2UgdG8gbWludCwgaW4gd2hvbGUgdW5pdHNcIiksXG4gICAgdG9rZW5BZGRyZXNzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL14weFthLWZBLUYwLTldezQwfSQvLCBcIkludmFsaWQgRXRoZXJldW0gYWRkcmVzcyBmb3JtYXRcIilcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3Mgb2YgdGhlIGFzc2V0cyB0b2tlbiB0byBhcHByb3ZlIGZvciBtaW50aW5nXCIpLFxuICAgIG1Ub2tlbkFkZHJlc3M6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYWRkcmVzcyBvZiB0aGUgTW9vbndlbGwgTVRva2VuIHRvIG1pbnQgZnJvbVwiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBNb29ud2VsbCBNVG9rZW4gbWludCBhY3Rpb25cIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgTW9vbndlbGwgTVRva2VuIHJlZGVlbSBhY3Rpb24uXG4gKi9cbmV4cG9ydHMuUmVkZWVtU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIG1Ub2tlbkFkZHJlc3M6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYWRkcmVzcyBvZiB0aGUgTW9vbndlbGwgTVRva2VuIHRvIHJlZGVlbSBmcm9tXCIpLFxuICAgIGFzc2V0czogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBxdWFudGl0eSBvZiBhc3NldHMgdG8gcmVkZWVtLCBpbiB3aG9sZSB1bml0c1wiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIE1vb253ZWxsIE1Ub2tlbiByZWRlZW0gYWN0aW9uXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/moonwell/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/morpho/constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.METAMORPHO_ABI = exports.MORPHO_BASE_ADDRESS = void 0;\nexports.MORPHO_BASE_ADDRESS = \"0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb\";\nexports.METAMORPHO_ABI = [\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"assets\", type: \"uint256\" },\n            { internalType: \"address\", name: \"receiver\", type: \"address\" },\n        ],\n        name: \"deposit\",\n        outputs: [{ internalType: \"uint256\", name: \"shares\", type: \"uint256\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"assets\", type: \"uint256\" },\n            { internalType: \"address\", name: \"receiver\", type: \"address\" },\n            { internalType: \"address\", name: \"owner\", type: \"address\" },\n        ],\n        name: \"withdraw\",\n        outputs: [{ internalType: \"uint256\", name: \"shares\", type: \"uint256\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb3JwaG8vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDJCQUEyQjtBQUNwRCwyQkFBMkI7QUFDM0Isc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxjQUFjLDBEQUEwRDtBQUN4RSxjQUFjLDREQUE0RDtBQUMxRTtBQUNBO0FBQ0Esb0JBQW9CLDBEQUEwRDtBQUM5RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLDBEQUEwRDtBQUN4RSxjQUFjLDREQUE0RDtBQUMxRSxjQUFjLHlEQUF5RDtBQUN2RTtBQUNBO0FBQ0Esb0JBQW9CLDBEQUEwRDtBQUM5RTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvbW9ycGhvL2NvbnN0YW50cy5qcz83MWE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NRVRBTU9SUEhPX0FCSSA9IGV4cG9ydHMuTU9SUEhPX0JBU0VfQUREUkVTUyA9IHZvaWQgMDtcbmV4cG9ydHMuTU9SUEhPX0JBU0VfQUREUkVTUyA9IFwiMHhCQkJCQmJiQkJiOWNDNWU5MGUzYjNBZjY0YmRBRjYyQzM3RUVGRkNiXCI7XG5leHBvcnRzLk1FVEFNT1JQSE9fQUJJID0gW1xuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwiYXNzZXRzXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwicmVjZWl2ZXJcIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJkZXBvc2l0XCIsXG4gICAgICAgIG91dHB1dHM6IFt7IGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwic2hhcmVzXCIsIHR5cGU6IFwidWludDI1NlwiIH1dLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcImFzc2V0c1wiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInJlY2VpdmVyXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwib3duZXJcIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgICAgICBvdXRwdXRzOiBbeyBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcInNoYXJlc1wiLCB0eXBlOiBcInVpbnQyNTZcIiB9XSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/morpho/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./morphoActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/morphoActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb3JwaG8vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGtHQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyw0SEFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb3JwaG8vaW5kZXguanM/ZjNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21vcnBob0FjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/morphoActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/morpho/morphoActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.morphoActionProvider = exports.MorphoActionProvider = exports.SUPPORTED_NETWORKS = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ../erc20/constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/erc20/constants.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/constants.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/schemas.js\");\nexports.SUPPORTED_NETWORKS = [\"base-mainnet\", \"base-sepolia\"];\n/**\n * MorphoActionProvider is an action provider for Morpho Vault interactions.\n */\nclass MorphoActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the MorphoActionProvider class.\n     */\n    constructor() {\n        super(\"morpho\", []);\n        /**\n         * Checks if the Morpho action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Morpho action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\" && exports.SUPPORTED_NETWORKS.includes(network.networkId);\n    }\n    /**\n     * Deposits assets into a Morpho Vault\n     *\n     * @param wallet - The wallet instance to execute the transaction\n     * @param args - The input arguments for the action\n     * @returns A success message with transaction details or an error message\n     */\n    async deposit(wallet, args) {\n        const assets = new decimal_js_1.Decimal(args.assets);\n        if (assets.comparedTo(new decimal_js_1.Decimal(0.0)) != 1) {\n            return \"Error: Assets amount must be greater than 0\";\n        }\n        try {\n            const decimals = await wallet.readContract({\n                address: args.tokenAddress,\n                abi: constants_1.abi,\n                functionName: \"decimals\",\n                args: [],\n            });\n            const atomicAssets = (0, viem_1.parseUnits)(args.assets, decimals);\n            const approvalResult = await (0, utils_1.approve)(wallet, args.tokenAddress, args.vaultAddress, atomicAssets);\n            if (approvalResult.startsWith(\"Error\")) {\n                return `Error approving Morpho Vault as spender: ${approvalResult}`;\n            }\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_2.METAMORPHO_ABI,\n                functionName: \"deposit\",\n                args: [atomicAssets, args.receiver],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: args.vaultAddress,\n                data,\n            });\n            const receipt = await wallet.waitForTransactionReceipt(txHash);\n            return `Deposited ${args.assets} to Morpho Vault ${args.vaultAddress} with transaction hash: ${txHash}\\nTransaction receipt: ${JSON.stringify(receipt)}`;\n        }\n        catch (error) {\n            return `Error depositing to Morpho Vault: ${error}`;\n        }\n    }\n    /**\n     * Withdraws assets from a Morpho Vault\n     *\n     * @param wallet - The wallet instance to execute the transaction\n     * @param args - The input arguments for the action\n     * @returns A success message with transaction details or an error message\n     */\n    async withdraw(wallet, args) {\n        if (BigInt(args.assets) <= 0) {\n            return \"Error: Assets amount must be greater than 0\";\n        }\n        try {\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_2.METAMORPHO_ABI,\n                functionName: \"withdraw\",\n                args: [BigInt(args.assets), args.receiver, args.receiver],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: args.vaultAddress,\n                data,\n            });\n            const receipt = await wallet.waitForTransactionReceipt(txHash);\n            return `Withdrawn ${args.assets} from Morpho Vault ${args.vaultAddress} with transaction hash: ${txHash}\\nTransaction receipt: ${JSON.stringify(receipt)}`;\n        }\n        catch (error) {\n            return `Error withdrawing from Morpho Vault: ${error}`;\n        }\n    }\n}\nexports.MorphoActionProvider = MorphoActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"deposit\",\n        description: `\nThis tool allows depositing assets into a Morpho Vault. \n\nIt takes:\n- vaultAddress: The address of the Morpho Vault to deposit to\n- assets: The amount of assets to deposit in whole units\n  Examples for WETH:\n  - 1 WETH\n  - 0.1 WETH\n  - 0.01 WETH\n- receiver: The address to receive the shares\n- tokenAddress: The address of the token to approve\n\nImportant notes:\n- Make sure to use the exact amount provided. Do not convert units for assets for this action.\n- Please use a token address (example 0x4200000000000000000000000000000000000006) for the tokenAddress field.\n`,\n        schema: schemas_1.DepositSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], MorphoActionProvider.prototype, \"deposit\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"withdraw\",\n        description: `\nThis tool allows withdrawing assets from a Morpho Vault. It takes:\n\n- vaultAddress: The address of the Morpho Vault to withdraw from\n- assets: The amount of assets to withdraw in atomic units (wei)\n- receiver: The address to receive the shares\n`,\n        schema: schemas_1.WithdrawSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], MorphoActionProvider.prototype, \"withdraw\", null);\nconst morphoActionProvider = () => new MorphoActionProvider();\nexports.morphoActionProvider = morphoActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/morphoActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/morpho/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WithdrawSchema = exports.DepositSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for Morpho Vault deposit action.\n */\nexports.DepositSchema = zod_1.z\n    .object({\n    assets: zod_1.z\n        .string()\n        .regex(/^\\d+(\\.\\d+)?$/, \"Must be a valid integer or decimal value\")\n        .describe(\"The quantity of assets to deposit, in whole units\"),\n    receiver: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address that will own the position on the vault which will receive the shares\"),\n    tokenAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the assets token to approve for deposit\"),\n    vaultAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the Morpho Vault to deposit to\"),\n})\n    .describe(\"Input schema for Morpho Vault deposit action\");\n/**\n * Input schema for Morpho Vault withdraw action.\n */\nexports.WithdrawSchema = zod_1.z\n    .object({\n    vaultAddress: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address of the Morpho Vault to withdraw from\"),\n    assets: zod_1.z\n        .string()\n        .regex(/^\\d+$/, \"Must be a valid whole number\")\n        .describe(\"The amount of assets to withdraw in atomic units e.g. 1\"),\n    receiver: zod_1.z\n        .string()\n        .regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address format\")\n        .describe(\"The address to receive the shares\"),\n})\n    .strip()\n    .describe(\"Input schema for Morpho Vault withdraw action\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9tb3JwaG8vc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxxQkFBcUI7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL21vcnBoby9zY2hlbWFzLmpzP2EzZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldpdGhkcmF3U2NoZW1hID0gZXhwb3J0cy5EZXBvc2l0U2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIE1vcnBobyBWYXVsdCBkZXBvc2l0IGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5EZXBvc2l0U2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIGFzc2V0czogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyhcXC5cXGQrKT8kLywgXCJNdXN0IGJlIGEgdmFsaWQgaW50ZWdlciBvciBkZWNpbWFsIHZhbHVlXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBxdWFudGl0eSBvZiBhc3NldHMgdG8gZGVwb3NpdCwgaW4gd2hvbGUgdW5pdHNcIiksXG4gICAgcmVjZWl2ZXI6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYWRkcmVzcyB0aGF0IHdpbGwgb3duIHRoZSBwb3NpdGlvbiBvbiB0aGUgdmF1bHQgd2hpY2ggd2lsbCByZWNlaXZlIHRoZSBzaGFyZXNcIiksXG4gICAgdG9rZW5BZGRyZXNzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL14weFthLWZBLUYwLTldezQwfSQvLCBcIkludmFsaWQgRXRoZXJldW0gYWRkcmVzcyBmb3JtYXRcIilcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3Mgb2YgdGhlIGFzc2V0cyB0b2tlbiB0byBhcHByb3ZlIGZvciBkZXBvc2l0XCIpLFxuICAgIHZhdWx0QWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eMHhbYS1mQS1GMC05XXs0MH0kLywgXCJJbnZhbGlkIEV0aGVyZXVtIGFkZHJlc3MgZm9ybWF0XCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBhZGRyZXNzIG9mIHRoZSBNb3JwaG8gVmF1bHQgdG8gZGVwb3NpdCB0b1wiKSxcbn0pXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBNb3JwaG8gVmF1bHQgZGVwb3NpdCBhY3Rpb25cIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgTW9ycGhvIFZhdWx0IHdpdGhkcmF3IGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5XaXRoZHJhd1NjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICB2YXVsdEFkZHJlc3M6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXjB4W2EtZkEtRjAtOV17NDB9JC8sIFwiSW52YWxpZCBFdGhlcmV1bSBhZGRyZXNzIGZvcm1hdFwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYWRkcmVzcyBvZiB0aGUgTW9ycGhvIFZhdWx0IHRvIHdpdGhkcmF3IGZyb21cIiksXG4gICAgYXNzZXRzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL15cXGQrJC8sIFwiTXVzdCBiZSBhIHZhbGlkIHdob2xlIG51bWJlclwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJUaGUgYW1vdW50IG9mIGFzc2V0cyB0byB3aXRoZHJhdyBpbiBhdG9taWMgdW5pdHMgZS5nLiAxXCIpLFxuICAgIHJlY2VpdmVyOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAucmVnZXgoL14weFthLWZBLUYwLTldezQwfSQvLCBcIkludmFsaWQgRXRoZXJldW0gYWRkcmVzcyBmb3JtYXRcIilcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgc2hhcmVzXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIklucHV0IHNjaGVtYSBmb3IgTW9ycGhvIFZhdWx0IHdpdGhkcmF3IGFjdGlvblwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/morpho/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/onramp/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Exports for onramp action provider\n *\n * @module onramp\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./onrampActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/onrampActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBd0I7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLGtHQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvb25yYW1wL2luZGV4LmpzPzI4ODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEV4cG9ydHMgZm9yIG9ucmFtcCBhY3Rpb24gcHJvdmlkZXJcbiAqXG4gKiBAbW9kdWxlIG9ucmFtcFxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9vbnJhbXBBY3Rpb25Qcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/onrampActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/onramp/onrampActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Onramp Action Provider\n *\n * This file contains the implementation of the OnrampActionProvider,\n * which provides actions for onramp operations.\n *\n * @module onramp\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onrampActionProvider = exports.OnrampActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/schemas.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/utils.js\");\n/**\n * OnrampActionProvider provides actions for onramp operations.\n *\n * @description\n * This provider is designed to work with EvmWalletProvider for blockchain interactions.\n * It supports all evm networks.\n */\nclass OnrampActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the OnrampActionProvider.\n     *\n     * @param props - The props for the OnrampActionProvider\n     * @param props.projectId - The project ID for the OnrampActionProvider\n     */\n    constructor(props) {\n        super(\"onramp\", []);\n        this.projectId = props.projectId;\n    }\n    /**\n     * This action provides a link to buy more cryptocurrency (ETH, USDC, or BTC) using fiat currency (regular money like USD).\n     *\n     * @param walletProvider - The wallet provider instance for blockchain interactions\n     * @param _ - The arguments for the action (not used)\n     * @returns A promise that resolves to a string describing the action result\n     */\n    async getOnrampBuyUrl(walletProvider, _ = {}) {\n        const networkId = walletProvider.getNetwork().networkId;\n        if (!networkId) {\n            throw new Error(\"Network ID is not set\");\n        }\n        const network = (0, utils_1.convertNetworkIdToOnrampNetworkId)(networkId);\n        if (!network) {\n            throw new Error(\"Network ID is not supported. Make sure you are using a supported mainnet network.\");\n        }\n        return (0, utils_1.getOnrampBuyUrl)({\n            projectId: this.projectId,\n            addresses: {\n                [walletProvider.getAddress()]: [network],\n            },\n            defaultNetwork: network,\n        });\n    }\n    /**\n     * Checks if this provider supports the given network.\n     *\n     * @param network - The network to check support for\n     * @returns True if the network is supported\n     */\n    supportsNetwork(network) {\n        return Boolean(network.networkId &&\n            (0, utils_1.convertNetworkIdToOnrampNetworkId)(network.networkId) !== null &&\n            network.protocolFamily === \"evm\");\n    }\n}\nexports.OnrampActionProvider = OnrampActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_onramp_buy_url\",\n        description: `\n      Get a URL to purchase more cryptocurrency when funds are low. This action provides a link to buy more \n      cryptocurrency, defaulting to ETH, using fiat currency (regular money like USD). \n      \n      Use this when:\n      - You detect that the wallet has insufficient funds for a transaction\n      - You need to guide the user to purchase more cryptocurrency\n      - The user asks how to buy more crypto\n      \n      The URL will direct to a secure Coinbase-powered purchase interface.\n    `,\n        schema: schemas_1.GetOnrampBuyUrlActionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], OnrampActionProvider.prototype, \"getOnrampBuyUrl\", null);\n/**\n * Factory function to create a new OnrampActionProvider instance.\n *\n * @param props - The props for the OnrampActionProvider\n * @returns A new OnrampActionProvider instance\n */\nconst onrampActionProvider = (props) => new OnrampActionProvider(props);\nexports.onrampActionProvider = onrampActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvb25yYW1wQWN0aW9uUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFFBQVE7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRyw0QkFBNEI7QUFDM0QsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCLHlCQUF5QixtQkFBTyxDQUFDLDBHQUFtQjtBQUNwRCwwQkFBMEIsbUJBQU8sQ0FBQyw0R0FBb0I7QUFDdEQsMkJBQTJCLG1CQUFPLENBQUMsc0dBQXdCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLGtHQUFXO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL29ucmFtcC9vbnJhbXBBY3Rpb25Qcm92aWRlci5qcz82ZGJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBPbnJhbXAgQWN0aW9uIFByb3ZpZGVyXG4gKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgT25yYW1wQWN0aW9uUHJvdmlkZXIsXG4gKiB3aGljaCBwcm92aWRlcyBhY3Rpb25zIGZvciBvbnJhbXAgb3BlcmF0aW9ucy5cbiAqXG4gKiBAbW9kdWxlIG9ucmFtcFxuICovXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vbnJhbXBBY3Rpb25Qcm92aWRlciA9IGV4cG9ydHMuT25yYW1wQWN0aW9uUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBhY3Rpb25Qcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL2FjdGlvblByb3ZpZGVyXCIpO1xuY29uc3QgYWN0aW9uRGVjb3JhdG9yXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9uRGVjb3JhdG9yXCIpO1xuY29uc3Qgd2FsbGV0X3Byb3ZpZGVyc18xID0gcmVxdWlyZShcIi4uLy4uL3dhbGxldC1wcm92aWRlcnNcIik7XG5jb25zdCBzY2hlbWFzXzEgPSByZXF1aXJlKFwiLi9zY2hlbWFzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLyoqXG4gKiBPbnJhbXBBY3Rpb25Qcm92aWRlciBwcm92aWRlcyBhY3Rpb25zIGZvciBvbnJhbXAgb3BlcmF0aW9ucy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcHJvdmlkZXIgaXMgZGVzaWduZWQgdG8gd29yayB3aXRoIEV2bVdhbGxldFByb3ZpZGVyIGZvciBibG9ja2NoYWluIGludGVyYWN0aW9ucy5cbiAqIEl0IHN1cHBvcnRzIGFsbCBldm0gbmV0d29ya3MuXG4gKi9cbmNsYXNzIE9ucmFtcEFjdGlvblByb3ZpZGVyIGV4dGVuZHMgYWN0aW9uUHJvdmlkZXJfMS5BY3Rpb25Qcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBPbnJhbXBBY3Rpb25Qcm92aWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wcyAtIFRoZSBwcm9wcyBmb3IgdGhlIE9ucmFtcEFjdGlvblByb3ZpZGVyXG4gICAgICogQHBhcmFtIHByb3BzLnByb2plY3RJZCAtIFRoZSBwcm9qZWN0IElEIGZvciB0aGUgT25yYW1wQWN0aW9uUHJvdmlkZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihcIm9ucmFtcFwiLCBbXSk7XG4gICAgICAgIHRoaXMucHJvamVjdElkID0gcHJvcHMucHJvamVjdElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGFjdGlvbiBwcm92aWRlcyBhIGxpbmsgdG8gYnV5IG1vcmUgY3J5cHRvY3VycmVuY3kgKEVUSCwgVVNEQywgb3IgQlRDKSB1c2luZyBmaWF0IGN1cnJlbmN5IChyZWd1bGFyIG1vbmV5IGxpa2UgVVNEKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB3YWxsZXRQcm92aWRlciAtIFRoZSB3YWxsZXQgcHJvdmlkZXIgaW5zdGFuY2UgZm9yIGJsb2NrY2hhaW4gaW50ZXJhY3Rpb25zXG4gICAgICogQHBhcmFtIF8gLSBUaGUgYXJndW1lbnRzIGZvciB0aGUgYWN0aW9uIChub3QgdXNlZClcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSBhY3Rpb24gcmVzdWx0XG4gICAgICovXG4gICAgYXN5bmMgZ2V0T25yYW1wQnV5VXJsKHdhbGxldFByb3ZpZGVyLCBfID0ge30pIHtcbiAgICAgICAgY29uc3QgbmV0d29ya0lkID0gd2FsbGV0UHJvdmlkZXIuZ2V0TmV0d29yaygpLm5ldHdvcmtJZDtcbiAgICAgICAgaWYgKCFuZXR3b3JrSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5ldHdvcmsgSUQgaXMgbm90IHNldFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gKDAsIHV0aWxzXzEuY29udmVydE5ldHdvcmtJZFRvT25yYW1wTmV0d29ya0lkKShuZXR3b3JrSWQpO1xuICAgICAgICBpZiAoIW5ldHdvcmspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5ldHdvcmsgSUQgaXMgbm90IHN1cHBvcnRlZC4gTWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgYSBzdXBwb3J0ZWQgbWFpbm5ldCBuZXR3b3JrLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZ2V0T25yYW1wQnV5VXJsKSh7XG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHRoaXMucHJvamVjdElkLFxuICAgICAgICAgICAgYWRkcmVzc2VzOiB7XG4gICAgICAgICAgICAgICAgW3dhbGxldFByb3ZpZGVyLmdldEFkZHJlc3MoKV06IFtuZXR3b3JrXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0TmV0d29yazogbmV0d29yayxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGlzIHByb3ZpZGVyIHN1cHBvcnRzIHRoZSBnaXZlbiBuZXR3b3JrLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ldHdvcmsgLSBUaGUgbmV0d29yayB0byBjaGVjayBzdXBwb3J0IGZvclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIG5ldHdvcmsgaXMgc3VwcG9ydGVkXG4gICAgICovXG4gICAgc3VwcG9ydHNOZXR3b3JrKG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obmV0d29yay5uZXR3b3JrSWQgJiZcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmNvbnZlcnROZXR3b3JrSWRUb09ucmFtcE5ldHdvcmtJZCkobmV0d29yay5uZXR3b3JrSWQpICE9PSBudWxsICYmXG4gICAgICAgICAgICBuZXR3b3JrLnByb3RvY29sRmFtaWx5ID09PSBcImV2bVwiKTtcbiAgICB9XG59XG5leHBvcnRzLk9ucmFtcEFjdGlvblByb3ZpZGVyID0gT25yYW1wQWN0aW9uUHJvdmlkZXI7XG5fX2RlY29yYXRlKFtcbiAgICAoMCwgYWN0aW9uRGVjb3JhdG9yXzEuQ3JlYXRlQWN0aW9uKSh7XG4gICAgICAgIG5hbWU6IFwiZ2V0X29ucmFtcF9idXlfdXJsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgXG4gICAgICBHZXQgYSBVUkwgdG8gcHVyY2hhc2UgbW9yZSBjcnlwdG9jdXJyZW5jeSB3aGVuIGZ1bmRzIGFyZSBsb3cuIFRoaXMgYWN0aW9uIHByb3ZpZGVzIGEgbGluayB0byBidXkgbW9yZSBcbiAgICAgIGNyeXB0b2N1cnJlbmN5LCBkZWZhdWx0aW5nIHRvIEVUSCwgdXNpbmcgZmlhdCBjdXJyZW5jeSAocmVndWxhciBtb25leSBsaWtlIFVTRCkuIFxuICAgICAgXG4gICAgICBVc2UgdGhpcyB3aGVuOlxuICAgICAgLSBZb3UgZGV0ZWN0IHRoYXQgdGhlIHdhbGxldCBoYXMgaW5zdWZmaWNpZW50IGZ1bmRzIGZvciBhIHRyYW5zYWN0aW9uXG4gICAgICAtIFlvdSBuZWVkIHRvIGd1aWRlIHRoZSB1c2VyIHRvIHB1cmNoYXNlIG1vcmUgY3J5cHRvY3VycmVuY3lcbiAgICAgIC0gVGhlIHVzZXIgYXNrcyBob3cgdG8gYnV5IG1vcmUgY3J5cHRvXG4gICAgICBcbiAgICAgIFRoZSBVUkwgd2lsbCBkaXJlY3QgdG8gYSBzZWN1cmUgQ29pbmJhc2UtcG93ZXJlZCBwdXJjaGFzZSBpbnRlcmZhY2UuXG4gICAgYCxcbiAgICAgICAgc2NoZW1hOiBzY2hlbWFzXzEuR2V0T25yYW1wQnV5VXJsQWN0aW9uU2NoZW1hLFxuICAgIH0pLFxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbiksXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFt3YWxsZXRfcHJvdmlkZXJzXzEuRXZtV2FsbGV0UHJvdmlkZXIsIHZvaWQgMF0pLFxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLCBQcm9taXNlKVxuXSwgT25yYW1wQWN0aW9uUHJvdmlkZXIucHJvdG90eXBlLCBcImdldE9ucmFtcEJ1eVVybFwiLCBudWxsKTtcbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgT25yYW1wQWN0aW9uUHJvdmlkZXIgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHByb3BzIC0gVGhlIHByb3BzIGZvciB0aGUgT25yYW1wQWN0aW9uUHJvdmlkZXJcbiAqIEByZXR1cm5zIEEgbmV3IE9ucmFtcEFjdGlvblByb3ZpZGVyIGluc3RhbmNlXG4gKi9cbmNvbnN0IG9ucmFtcEFjdGlvblByb3ZpZGVyID0gKHByb3BzKSA9PiBuZXcgT25yYW1wQWN0aW9uUHJvdmlkZXIocHJvcHMpO1xuZXhwb3J0cy5vbnJhbXBBY3Rpb25Qcm92aWRlciA9IG9ucmFtcEFjdGlvblByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/onrampActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/onramp/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetOnrampBuyUrlActionSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Action schemas for the onramp action provider.\n *\n * This file contains the Zod schemas that define the shape and validation\n * rules for action parameters in the onramp action provider.\n */\n/**\n * Example action schema demonstrating various field types and validations.\n * Replace or modify this with your actual action schemas.\n */\nexports.GetOnrampBuyUrlActionSchema = zod_1.z.object({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQ0FBbUM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL29ucmFtcC9zY2hlbWFzLmpzPzI4ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdldE9ucmFtcEJ1eVVybEFjdGlvblNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbi8qKlxuICogQWN0aW9uIHNjaGVtYXMgZm9yIHRoZSBvbnJhbXAgYWN0aW9uIHByb3ZpZGVyLlxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgWm9kIHNjaGVtYXMgdGhhdCBkZWZpbmUgdGhlIHNoYXBlIGFuZCB2YWxpZGF0aW9uXG4gKiBydWxlcyBmb3IgYWN0aW9uIHBhcmFtZXRlcnMgaW4gdGhlIG9ucmFtcCBhY3Rpb24gcHJvdmlkZXIuXG4gKi9cbi8qKlxuICogRXhhbXBsZSBhY3Rpb24gc2NoZW1hIGRlbW9uc3RyYXRpbmcgdmFyaW91cyBmaWVsZCB0eXBlcyBhbmQgdmFsaWRhdGlvbnMuXG4gKiBSZXBsYWNlIG9yIG1vZGlmeSB0aGlzIHdpdGggeW91ciBhY3R1YWwgYWN0aW9uIHNjaGVtYXMuXG4gKi9cbmV4cG9ydHMuR2V0T25yYW1wQnV5VXJsQWN0aW9uU2NoZW1hID0gem9kXzEuei5vYmplY3Qoe30pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/onramp/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convertNetworkIdToOnrampNetworkId = void 0;\nexports.getOnrampBuyUrl = getOnrampBuyUrl;\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/version.js\");\n/**\n * Builds a Coinbase Onramp buy URL using the provided parameters.\n *\n * @param props - Configuration options for the Onramp buy URL\n * @param props.projectId - A projectId generated in the Coinbase Developer Portal\n * @returns The generated Onramp buy URL\n */\nfunction getOnrampBuyUrl({ projectId, ...props }) {\n    const url = new URL(version_1.ONRAMP_BUY_URL);\n    if (projectId !== undefined) {\n        // Coinbase Onramp requires projectId to be passed as appId\n        url.searchParams.append(\"appId\", projectId);\n    }\n    for (const key of Object.keys(props)) {\n        const value = props[key];\n        if (value !== undefined) {\n            if ([\"string\", \"number\", \"boolean\"].includes(typeof value)) {\n                url.searchParams.append(key, value.toString());\n            }\n            else {\n                url.searchParams.append(key, JSON.stringify(value));\n            }\n        }\n    }\n    url.searchParams.append(\"sdkVersion\", `onchainkit@${version_1.VERSION}`);\n    url.searchParams.sort();\n    return url.toString();\n}\n/**\n * Converts a network ID to an Onramp network ID.\n *\n * @param networkId - The network ID to convert\n * @returns The Onramp network ID or null if the network ID is not supported\n */\nconst convertNetworkIdToOnrampNetworkId = (networkId) => {\n    switch (networkId) {\n        case \"base-mainnet\":\n            return \"base\";\n        case \"ethereum-mainnet\":\n            return \"ethereum\";\n        case \"polygon-mainnet\":\n            return \"polygon\";\n        case \"optimism-mainnet\":\n            return \"optimism\";\n        case \"arbitrum-mainnet\":\n            return \"arbitrum\";\n        default:\n            return null;\n    }\n};\nexports.convertNetworkIdToOnrampNetworkId = convertNetworkIdToOnrampNetworkId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUNBQXlDO0FBQ3pDLHVCQUF1QjtBQUN2QixrQkFBa0IsbUJBQU8sQ0FBQyxrR0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvb25yYW1wL3V0aWxzLmpzPzgzMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnZlcnROZXR3b3JrSWRUb09ucmFtcE5ldHdvcmtJZCA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0T25yYW1wQnV5VXJsID0gZ2V0T25yYW1wQnV5VXJsO1xuY29uc3QgdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vdmVyc2lvblwiKTtcbi8qKlxuICogQnVpbGRzIGEgQ29pbmJhc2UgT25yYW1wIGJ1eSBVUkwgdXNpbmcgdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHByb3BzIC0gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgT25yYW1wIGJ1eSBVUkxcbiAqIEBwYXJhbSBwcm9wcy5wcm9qZWN0SWQgLSBBIHByb2plY3RJZCBnZW5lcmF0ZWQgaW4gdGhlIENvaW5iYXNlIERldmVsb3BlciBQb3J0YWxcbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgT25yYW1wIGJ1eSBVUkxcbiAqL1xuZnVuY3Rpb24gZ2V0T25yYW1wQnV5VXJsKHsgcHJvamVjdElkLCAuLi5wcm9wcyB9KSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCh2ZXJzaW9uXzEuT05SQU1QX0JVWV9VUkwpO1xuICAgIGlmIChwcm9qZWN0SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBDb2luYmFzZSBPbnJhbXAgcmVxdWlyZXMgcHJvamVjdElkIHRvIGJlIHBhc3NlZCBhcyBhcHBJZFxuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImFwcElkXCIsIHByb2plY3RJZCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHByb3BzKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiYm9vbGVhblwiXS5pbmNsdWRlcyh0eXBlb2YgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInNka1ZlcnNpb25cIiwgYG9uY2hhaW5raXRAJHt2ZXJzaW9uXzEuVkVSU0lPTn1gKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNvcnQoKTtcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgbmV0d29yayBJRCB0byBhbiBPbnJhbXAgbmV0d29yayBJRC5cbiAqXG4gKiBAcGFyYW0gbmV0d29ya0lkIC0gVGhlIG5ldHdvcmsgSUQgdG8gY29udmVydFxuICogQHJldHVybnMgVGhlIE9ucmFtcCBuZXR3b3JrIElEIG9yIG51bGwgaWYgdGhlIG5ldHdvcmsgSUQgaXMgbm90IHN1cHBvcnRlZFxuICovXG5jb25zdCBjb252ZXJ0TmV0d29ya0lkVG9PbnJhbXBOZXR3b3JrSWQgPSAobmV0d29ya0lkKSA9PiB7XG4gICAgc3dpdGNoIChuZXR3b3JrSWQpIHtcbiAgICAgICAgY2FzZSBcImJhc2UtbWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYmFzZVwiO1xuICAgICAgICBjYXNlIFwiZXRoZXJldW0tbWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJldW1cIjtcbiAgICAgICAgY2FzZSBcInBvbHlnb24tbWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicG9seWdvblwiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tbWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwib3B0aW1pc21cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtLW1haW5uZXRcIjpcbiAgICAgICAgICAgIHJldHVybiBcImFyYml0cnVtXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuZXhwb3J0cy5jb252ZXJ0TmV0d29ya0lkVG9PbnJhbXBOZXR3b3JrSWQgPSBjb252ZXJ0TmV0d29ya0lkVG9PbnJhbXBOZXR3b3JrSWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/onramp/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ONRAMP_BUY_URL = exports.VERSION = void 0;\nexports.VERSION = \"0.38.2\";\nexports.ONRAMP_BUY_URL = \"https://pay.coinbase.com/buy\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxlQUFlO0FBQ3hDLGVBQWU7QUFDZixzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vbnJhbXAvdmVyc2lvbi5qcz9lOTAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTlJBTVBfQlVZX1VSTCA9IGV4cG9ydHMuVkVSU0lPTiA9IHZvaWQgMDtcbmV4cG9ydHMuVkVSU0lPTiA9IFwiMC4zOC4yXCI7XG5leHBvcnRzLk9OUkFNUF9CVVlfVVJMID0gXCJodHRwczovL3BheS5jb2luYmFzZS5jb20vYnV5XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/onramp/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/opensea/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./openseaActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/openseaActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywrSEFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL2luZGV4LmpzP2JjOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9vcGVuc2VhQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/openseaActionProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/opensea/openseaActionProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.openseaActionProvider = exports.OpenseaActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/schemas.js\");\nconst opensea_js_1 = __webpack_require__(/*! opensea-js */ \"(rsc)/./node_modules/opensea-js/lib/index.js\");\nconst network_1 = __webpack_require__(/*! ../../network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/utils.js\");\n/**\n * OpenseaActionProvider is an action provider for OpenSea marketplace interactions.\n */\nclass OpenseaActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the OpenseaActionProvider class.\n     *\n     * @param config - The configuration options for the OpenseaActionProvider.\n     */\n    constructor(config = {}) {\n        super(\"opensea\", []);\n        /**\n         * Checks if the Opensea action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Opensea action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.chainId !== undefined && utils_1.supportedChains[network.chainId] !== undefined;\n        const apiKey = config.apiKey || process.env.OPENSEA_API_KEY;\n        if (!apiKey) {\n            throw new Error(\"OPENSEA_API_KEY is not configured.\");\n        }\n        this.apiKey = apiKey;\n        const chainId = network_1.NETWORK_ID_TO_CHAIN_ID[config.networkId || \"base-sepolia\"];\n        const provider = ethers_1.ethers.getDefaultProvider(parseInt(chainId));\n        const walletWithProvider = new ethers_1.Wallet(config.privateKey, provider);\n        this.walletWithProvider = walletWithProvider;\n        const openseaSDK = new opensea_js_1.OpenSeaSDK(walletWithProvider, {\n            chain: (0, utils_1.chainIdToOpenseaChain)(chainId),\n            apiKey: this.apiKey,\n        });\n        this.openseaSDK = openseaSDK;\n        this.openseaBaseUrl = this.openseaSDK.api.apiBaseUrl.replace(\"-api\", \"\").replace(\"api\", \"\");\n    }\n    /**\n     * Lists an NFT for sale on OpenSea.\n     *\n     * @param args - The input arguments for the action.\n     * @returns A message containing the listing details.\n     */\n    async listNft(args) {\n        try {\n            const expirationTime = Math.round(Date.now() / 1000 + args.expirationDays * 24 * 60 * 60);\n            await this.openseaSDK.createListing({\n                asset: {\n                    tokenId: args.tokenId,\n                    tokenAddress: args.contractAddress,\n                },\n                startAmount: args.price,\n                quantity: 1,\n                paymentTokenAddress: \"0x0000000000000000000000000000000000000000\", // ETH\n                expirationTime,\n                accountAddress: this.walletWithProvider.address,\n            });\n            const listingLink = `${this.openseaBaseUrl}/assets/${this.openseaSDK.chain}/${args.contractAddress}/${args.tokenId}`;\n            return `Successfully listed NFT ${args.contractAddress} token ${args.tokenId} for ${args.price} ETH, expiring in ${args.expirationDays} days. Listing on OpenSea: ${listingLink}.`;\n        }\n        catch (error) {\n            return `Error listing NFT ${args.contractAddress} token ${args.tokenId} for ${args.price} ETH using account ${this.walletWithProvider.address}: ${error}`;\n        }\n    }\n    /**\n     * Fetch NFTs of a specific wallet address.\n     *\n     * @param args - The input arguments for the action.\n     * @returns A JSON string containing the NFTs or error message\n     */\n    async getNftsByAccount(args) {\n        try {\n            const address = args.accountAddress || this.walletWithProvider.address;\n            const { nfts } = await this.openseaSDK.api.getNFTsByAccount(address);\n            return JSON.stringify(nfts);\n        }\n        catch (error) {\n            const address = args.accountAddress || this.walletWithProvider.address;\n            return `Error fetching NFTs for account ${address}: ${error}`;\n        }\n    }\n}\nexports.OpenseaActionProvider = OpenseaActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"list_nft\",\n        description: `\nThis tool will list an NFT for sale on the OpenSea marketplace. \nEVM networks are supported on mainnet and testnets.\n\nIt takes the following inputs:\n- contractAddress: The NFT contract address to list\n- tokenId: The ID of the NFT to list\n- price: The price in ETH for which the NFT will be listed\n- expirationDays: (Optional) Number of days the listing should be active for (default: 90)\n\nImportant notes:\n- The wallet must own the NFT\n- Price is in ETH (e.g., 1.5 for 1.5 ETH). This is the amount the seller will receive if the NFT is sold. It is not required to have this amount in the wallet.\n- Listing the NFT requires approval for OpenSea to manage the entire NFT collection:  \n  - If the collection is not already approved, an onchain transaction is required, which will incur gas fees.  \n  - If already approved, listing is gasless and does not require any onchain transaction. \n  - EVM networks are supported on mainnet and testnets, for example: base-mainnet and base-sepolia.\n  `,\n        schema: schemas_1.ListNftSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], OpenseaActionProvider.prototype, \"listNft\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_nfts_by_account\",\n        description: `\nThis tool will fetch NFTs owned by a specific wallet address on OpenSea.\n\nIt takes the following inputs:\n- accountAddress: (Optional) The wallet address to fetch NFTs for. If not provided, uses the connected wallet address.\n\nThe tool will return a JSON string containing the NFTs owned by the specified address.\n    `,\n        schema: schemas_1.GetNftsByAccountSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], OpenseaActionProvider.prototype, \"getNftsByAccount\", null);\nconst openseaActionProvider = (config) => new OpenseaActionProvider(config);\nexports.openseaActionProvider = openseaActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/openseaActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/opensea/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetNftsByAccountSchema = exports.ListNftSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for listing an NFT on OpenSea.\n */\nexports.ListNftSchema = zod_1.z\n    .object({\n    contractAddress: zod_1.z.string().nonempty().describe(\"The NFT contract address to list\"),\n    tokenId: zod_1.z.string().nonempty().describe(\"The tokenID of the NFT to list\"),\n    price: zod_1.z.number().positive().describe(\"The price in ETH to list the NFT for\"),\n    expirationDays: zod_1.z\n        .number()\n        .positive()\n        .optional()\n        .default(90)\n        .describe(\"Number of days the listing should be active for (default: 90)\"),\n})\n    .strip()\n    .describe(\"Input schema for listing an NFT on OpenSea\");\n/**\n * Input schema for getting NFTs from a specific wallet address.\n */\nexports.GetNftsByAccountSchema = zod_1.z\n    .object({\n    accountAddress: zod_1.z\n        .string()\n        .optional()\n        .describe(\"The wallet address to fetch NFTs for (defaults to connected wallet if not provided)\"),\n})\n    .strip()\n    .describe(\"Input schema for fetching NFTs by account\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcscUJBQXFCO0FBQ3RELGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL3NjaGVtYXMuanM/MzM3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0TmZ0c0J5QWNjb3VudFNjaGVtYSA9IGV4cG9ydHMuTGlzdE5mdFNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBsaXN0aW5nIGFuIE5GVCBvbiBPcGVuU2VhLlxuICovXG5leHBvcnRzLkxpc3ROZnRTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgY29udHJhY3RBZGRyZXNzOiB6b2RfMS56LnN0cmluZygpLm5vbmVtcHR5KCkuZGVzY3JpYmUoXCJUaGUgTkZUIGNvbnRyYWN0IGFkZHJlc3MgdG8gbGlzdFwiKSxcbiAgICB0b2tlbklkOiB6b2RfMS56LnN0cmluZygpLm5vbmVtcHR5KCkuZGVzY3JpYmUoXCJUaGUgdG9rZW5JRCBvZiB0aGUgTkZUIHRvIGxpc3RcIiksXG4gICAgcHJpY2U6IHpvZF8xLnoubnVtYmVyKCkucG9zaXRpdmUoKS5kZXNjcmliZShcIlRoZSBwcmljZSBpbiBFVEggdG8gbGlzdCB0aGUgTkZUIGZvclwiKSxcbiAgICBleHBpcmF0aW9uRGF5czogem9kXzEuelxuICAgICAgICAubnVtYmVyKClcbiAgICAgICAgLnBvc2l0aXZlKClcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLmRlZmF1bHQoOTApXG4gICAgICAgIC5kZXNjcmliZShcIk51bWJlciBvZiBkYXlzIHRoZSBsaXN0aW5nIHNob3VsZCBiZSBhY3RpdmUgZm9yIChkZWZhdWx0OiA5MClcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBsaXN0aW5nIGFuIE5GVCBvbiBPcGVuU2VhXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGdldHRpbmcgTkZUcyBmcm9tIGEgc3BlY2lmaWMgd2FsbGV0IGFkZHJlc3MuXG4gKi9cbmV4cG9ydHMuR2V0TmZ0c0J5QWNjb3VudFNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBhY2NvdW50QWRkcmVzczogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIHdhbGxldCBhZGRyZXNzIHRvIGZldGNoIE5GVHMgZm9yIChkZWZhdWx0cyB0byBjb25uZWN0ZWQgd2FsbGV0IGlmIG5vdCBwcm92aWRlZClcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBmZXRjaGluZyBORlRzIGJ5IGFjY291bnRcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/opensea/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.chainIdToOpenseaChain = exports.supportedChains = void 0;\nconst opensea_js_1 = __webpack_require__(/*! opensea-js */ \"(rsc)/./node_modules/opensea-js/lib/index.js\");\n/**\n * Supported Opensea chains\n */\nexports.supportedChains = {\n    \"1\": opensea_js_1.Chain.Mainnet,\n    \"137\": opensea_js_1.Chain.Polygon,\n    \"80002\": opensea_js_1.Chain.Amoy,\n    \"11155111\": opensea_js_1.Chain.Sepolia,\n    \"8217\": opensea_js_1.Chain.Klaytn,\n    \"1001\": opensea_js_1.Chain.Baobab,\n    \"43114\": opensea_js_1.Chain.Avalanche,\n    \"43113\": opensea_js_1.Chain.Fuji,\n    \"42161\": opensea_js_1.Chain.Arbitrum,\n    \"42170\": opensea_js_1.Chain.ArbitrumNova,\n    \"421614\": opensea_js_1.Chain.ArbitrumSepolia,\n    \"238\": opensea_js_1.Chain.Blast,\n    \"168587773\": opensea_js_1.Chain.BlastSepolia,\n    \"8453\": opensea_js_1.Chain.Base,\n    \"84532\": opensea_js_1.Chain.BaseSepolia,\n    \"10\": opensea_js_1.Chain.Optimism,\n    \"11155420\": opensea_js_1.Chain.OptimismSepolia,\n    \"7777777\": opensea_js_1.Chain.Zora,\n    \"999999999\": opensea_js_1.Chain.ZoraSepolia,\n    \"1329\": opensea_js_1.Chain.Sei,\n    \"1328\": opensea_js_1.Chain.SeiTestnet,\n    \"8333\": opensea_js_1.Chain.B3,\n    \"1993\": opensea_js_1.Chain.B3Sepolia,\n    \"80094\": opensea_js_1.Chain.BeraChain,\n};\n/**\n * Maps EVM chain IDs to Opensea chain\n *\n * @param chainId - The EVM chain ID to map\n * @returns The corresponding OpenSea Chain enum value\n */\nconst chainIdToOpenseaChain = (chainId) => {\n    const chain = exports.supportedChains[chainId];\n    if (!chain) {\n        throw new Error(`Unsupported chain ID on Opensea: ${chainId}`);\n    }\n    return chain;\n};\nexports.chainIdToOpenseaChain = chainIdToOpenseaChain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLHVCQUF1QjtBQUN2RCxxQkFBcUIsbUJBQU8sQ0FBQyxnRUFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsUUFBUTtBQUNwRTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9vcGVuc2VhL3V0aWxzLmpzPzVlYjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoYWluSWRUb09wZW5zZWFDaGFpbiA9IGV4cG9ydHMuc3VwcG9ydGVkQ2hhaW5zID0gdm9pZCAwO1xuY29uc3Qgb3BlbnNlYV9qc18xID0gcmVxdWlyZShcIm9wZW5zZWEtanNcIik7XG4vKipcbiAqIFN1cHBvcnRlZCBPcGVuc2VhIGNoYWluc1xuICovXG5leHBvcnRzLnN1cHBvcnRlZENoYWlucyA9IHtcbiAgICBcIjFcIjogb3BlbnNlYV9qc18xLkNoYWluLk1haW5uZXQsXG4gICAgXCIxMzdcIjogb3BlbnNlYV9qc18xLkNoYWluLlBvbHlnb24sXG4gICAgXCI4MDAwMlwiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uQW1veSxcbiAgICBcIjExMTU1MTExXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5TZXBvbGlhLFxuICAgIFwiODIxN1wiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uS2xheXRuLFxuICAgIFwiMTAwMVwiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uQmFvYmFiLFxuICAgIFwiNDMxMTRcIjogb3BlbnNlYV9qc18xLkNoYWluLkF2YWxhbmNoZSxcbiAgICBcIjQzMTEzXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5GdWppLFxuICAgIFwiNDIxNjFcIjogb3BlbnNlYV9qc18xLkNoYWluLkFyYml0cnVtLFxuICAgIFwiNDIxNzBcIjogb3BlbnNlYV9qc18xLkNoYWluLkFyYml0cnVtTm92YSxcbiAgICBcIjQyMTYxNFwiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uQXJiaXRydW1TZXBvbGlhLFxuICAgIFwiMjM4XCI6IG9wZW5zZWFfanNfMS5DaGFpbi5CbGFzdCxcbiAgICBcIjE2ODU4Nzc3M1wiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uQmxhc3RTZXBvbGlhLFxuICAgIFwiODQ1M1wiOiBvcGVuc2VhX2pzXzEuQ2hhaW4uQmFzZSxcbiAgICBcIjg0NTMyXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5CYXNlU2Vwb2xpYSxcbiAgICBcIjEwXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5PcHRpbWlzbSxcbiAgICBcIjExMTU1NDIwXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5PcHRpbWlzbVNlcG9saWEsXG4gICAgXCI3Nzc3Nzc3XCI6IG9wZW5zZWFfanNfMS5DaGFpbi5ab3JhLFxuICAgIFwiOTk5OTk5OTk5XCI6IG9wZW5zZWFfanNfMS5DaGFpbi5ab3JhU2Vwb2xpYSxcbiAgICBcIjEzMjlcIjogb3BlbnNlYV9qc18xLkNoYWluLlNlaSxcbiAgICBcIjEzMjhcIjogb3BlbnNlYV9qc18xLkNoYWluLlNlaVRlc3RuZXQsXG4gICAgXCI4MzMzXCI6IG9wZW5zZWFfanNfMS5DaGFpbi5CMyxcbiAgICBcIjE5OTNcIjogb3BlbnNlYV9qc18xLkNoYWluLkIzU2Vwb2xpYSxcbiAgICBcIjgwMDk0XCI6IG9wZW5zZWFfanNfMS5DaGFpbi5CZXJhQ2hhaW4sXG59O1xuLyoqXG4gKiBNYXBzIEVWTSBjaGFpbiBJRHMgdG8gT3BlbnNlYSBjaGFpblxuICpcbiAqIEBwYXJhbSBjaGFpbklkIC0gVGhlIEVWTSBjaGFpbiBJRCB0byBtYXBcbiAqIEByZXR1cm5zIFRoZSBjb3JyZXNwb25kaW5nIE9wZW5TZWEgQ2hhaW4gZW51bSB2YWx1ZVxuICovXG5jb25zdCBjaGFpbklkVG9PcGVuc2VhQ2hhaW4gPSAoY2hhaW5JZCkgPT4ge1xuICAgIGNvbnN0IGNoYWluID0gZXhwb3J0cy5zdXBwb3J0ZWRDaGFpbnNbY2hhaW5JZF07XG4gICAgaWYgKCFjaGFpbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGNoYWluIElEIG9uIE9wZW5zZWE6ICR7Y2hhaW5JZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYWluO1xufTtcbmV4cG9ydHMuY2hhaW5JZFRvT3BlbnNlYUNoYWluID0gY2hhaW5JZFRvT3BlbnNlYUNoYWluO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/opensea/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/pyth/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./pythActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/pythActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9weXRoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxzSEFBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLGdHQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvcHl0aC9pbmRleC5qcz8wZDI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcHl0aEFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/pythActionProvider.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/pyth/pythActionProvider.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pythActionProvider = exports.PythActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/schemas.js\");\n/**\n * PythActionProvider is an action provider for Pyth.\n */\nclass PythActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructs a new PythActionProvider.\n     */\n    constructor() {\n        super(\"pyth\", []);\n        /**\n         * Checks if the Pyth action provider supports the given network.\n         *\n         * @returns True if the Pyth action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = () => true;\n    }\n    /**\n     * Fetch the price feed ID for a given token symbol from Pyth.\n     *\n     * @param args - The arguments for the action.\n     * @returns The price feed ID as a string.\n     */\n    async fetchPriceFeed(args) {\n        const url = `https://hermes.pyth.network/v2/price_feeds?query=${args.tokenSymbol}&asset_type=crypto`;\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.length === 0) {\n            throw new Error(`No price feed found for ${args.tokenSymbol}`);\n        }\n        const filteredData = data.filter(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (item) => item.attributes.base.toLowerCase() === args.tokenSymbol.toLowerCase());\n        if (filteredData.length === 0) {\n            throw new Error(`No price feed found for ${args.tokenSymbol}`);\n        }\n        return filteredData[0].id;\n    }\n    /**\n     * Fetches the price from Pyth given a Pyth price feed ID.\n     *\n     * @param args - The arguments for the action.\n     * @returns The price as a string.\n     */\n    async fetchPrice(args) {\n        const url = `https://hermes.pyth.network/v2/updates/price/latest?ids[]=${args.priceFeedID}`;\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const parsedData = data.parsed;\n        if (parsedData.length === 0) {\n            throw new Error(`No price data found for ${args.priceFeedID}`);\n        }\n        const priceInfo = parsedData[0].price;\n        const price = BigInt(priceInfo.price);\n        const exponent = priceInfo.expo;\n        if (exponent < 0) {\n            const adjustedPrice = price * BigInt(100);\n            const divisor = BigInt(10) ** BigInt(-exponent);\n            const scaledPrice = adjustedPrice / BigInt(divisor);\n            const priceStr = scaledPrice.toString();\n            const formattedPrice = `${priceStr.slice(0, -2)}.${priceStr.slice(-2)}`;\n            return formattedPrice.startsWith(\".\") ? `0${formattedPrice}` : formattedPrice;\n        }\n        const scaledPrice = price / BigInt(10) ** BigInt(exponent);\n        return scaledPrice.toString();\n    }\n}\nexports.PythActionProvider = PythActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"fetch_price_feed\",\n        description: \"Fetch the price feed ID for a given token symbol from Pyth.\",\n        schema: schemas_1.PythFetchPriceFeedIDSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], PythActionProvider.prototype, \"fetchPriceFeed\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"fetch_price\",\n        description: `Fetch the price of a given price feed from Pyth.\n\nInputs:\n- Pyth price feed ID\n\nImportant notes:\n- Do not assume that a random ID is a Pyth price feed ID. If you are confused, ask a clarifying question.\n- This action only fetches price inputs from Pyth price feeds. No other source.\n- If you are asked to fetch the price from Pyth for a ticker symbol such as BTC, you must first use the pyth_fetch_price_feed_id\naction to retrieve the price feed ID before invoking the pyth_Fetch_price action\n`,\n        schema: schemas_1.PythFetchPriceSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], PythActionProvider.prototype, \"fetchPrice\", null);\nconst pythActionProvider = () => new PythActionProvider();\nexports.pythActionProvider = pythActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/pythActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/schemas.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/pyth/schemas.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PythFetchPriceSchema = exports.PythFetchPriceFeedIDSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for Pyth fetch price feed ID action.\n */\nexports.PythFetchPriceFeedIDSchema = zod_1.z\n    .object({\n    tokenSymbol: zod_1.z.string().describe(\"The token symbol to fetch the price feed ID for\"),\n})\n    .strict();\n/**\n * Input schema for Pyth fetch price action.\n */\nexports.PythFetchPriceSchema = zod_1.z\n    .object({\n    priceFeedID: zod_1.z.string().describe(\"The price feed ID to fetch the price for\"),\n})\n    .strict();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9weXRoL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsa0NBQWtDO0FBQ2pFLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvcHl0aC9zY2hlbWFzLmpzPzdmZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB5dGhGZXRjaFByaWNlU2NoZW1hID0gZXhwb3J0cy5QeXRoRmV0Y2hQcmljZUZlZWRJRFNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBQeXRoIGZldGNoIHByaWNlIGZlZWQgSUQgYWN0aW9uLlxuICovXG5leHBvcnRzLlB5dGhGZXRjaFByaWNlRmVlZElEU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHRva2VuU3ltYm9sOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIHRva2VuIHN5bWJvbCB0byBmZXRjaCB0aGUgcHJpY2UgZmVlZCBJRCBmb3JcIiksXG59KVxuICAgIC5zdHJpY3QoKTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBQeXRoIGZldGNoIHByaWNlIGFjdGlvbi5cbiAqL1xuZXhwb3J0cy5QeXRoRmV0Y2hQcmljZVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBwcmljZUZlZWRJRDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBwcmljZSBmZWVkIElEIHRvIGZldGNoIHRoZSBwcmljZSBmb3JcIiksXG59KVxuICAgIC5zdHJpY3QoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/pyth/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/spl/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./splActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/splActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9zcGwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1IQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL3NwbC9pbmRleC5qcz8yZGNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3BsQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/schemas.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/spl/schemas.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetBalanceSchema = exports.TransferTokenSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Schema for transferring SPL tokens to another address.\n */\nexports.TransferTokenSchema = zod_1.z\n    .object({\n    recipient: zod_1.z.string().describe(\"The recipient's Solana address\"),\n    mintAddress: zod_1.z.string().describe(\"The SPL token's mint address\"),\n    amount: zod_1.z.number().positive().describe(\"Amount of tokens to transfer\"),\n})\n    .describe(\"Transfer SPL tokens to another Solana address\");\n/**\n * Schema for getting SPL token balance.\n */\nexports.GetBalanceSchema = zod_1.z\n    .object({\n    mintAddress: zod_1.z.string().describe(\"The SPL token's mint address\"),\n    address: zod_1.z\n        .string()\n        .optional()\n        .describe(\"Optional address to check balance for. If not provided, uses the wallet's address\"),\n})\n    .describe(\"Get SPL token balance for an address\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9zcGwvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRywyQkFBMkI7QUFDdEQsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy9zcGwvc2NoZW1hcy5qcz84MTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZXRCYWxhbmNlU2NoZW1hID0gZXhwb3J0cy5UcmFuc2ZlclRva2VuU2NoZW1hID0gdm9pZCAwO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuLyoqXG4gKiBTY2hlbWEgZm9yIHRyYW5zZmVycmluZyBTUEwgdG9rZW5zIHRvIGFub3RoZXIgYWRkcmVzcy5cbiAqL1xuZXhwb3J0cy5UcmFuc2ZlclRva2VuU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHJlY2lwaWVudDogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSByZWNpcGllbnQncyBTb2xhbmEgYWRkcmVzc1wiKSxcbiAgICBtaW50QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBTUEwgdG9rZW4ncyBtaW50IGFkZHJlc3NcIiksXG4gICAgYW1vdW50OiB6b2RfMS56Lm51bWJlcigpLnBvc2l0aXZlKCkuZGVzY3JpYmUoXCJBbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyXCIpLFxufSlcbiAgICAuZGVzY3JpYmUoXCJUcmFuc2ZlciBTUEwgdG9rZW5zIHRvIGFub3RoZXIgU29sYW5hIGFkZHJlc3NcIik7XG4vKipcbiAqIFNjaGVtYSBmb3IgZ2V0dGluZyBTUEwgdG9rZW4gYmFsYW5jZS5cbiAqL1xuZXhwb3J0cy5HZXRCYWxhbmNlU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIG1pbnRBZGRyZXNzOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIFNQTCB0b2tlbidzIG1pbnQgYWRkcmVzc1wiKSxcbiAgICBhZGRyZXNzOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAuZGVzY3JpYmUoXCJPcHRpb25hbCBhZGRyZXNzIHRvIGNoZWNrIGJhbGFuY2UgZm9yLiBJZiBub3QgcHJvdmlkZWQsIHVzZXMgdGhlIHdhbGxldCdzIGFkZHJlc3NcIiksXG59KVxuICAgIC5kZXNjcmliZShcIkdldCBTUEwgdG9rZW4gYmFsYW5jZSBmb3IgYW4gYWRkcmVzc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/splActionProvider.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/spl/splActionProvider.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.splActionProvider = exports.SplActionProvider = void 0;\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst svmWalletProvider_1 = __webpack_require__(/*! ../../wallet-providers/svmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/schemas.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(rsc)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/**\n * SplActionProvider serves as a provider for SPL token actions.\n * It provides SPL token transfer functionality.\n */\nclass SplActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Creates a new SplActionProvider instance.\n     */\n    constructor() {\n        super(\"spl\", []);\n    }\n    /**\n     * Get the balance of SPL tokens for an address.\n     *\n     * @param walletProvider - The wallet provider to use\n     * @param args - Parameters including mint address and optional target address\n     * @returns A message indicating the token balance\n     */\n    async getBalance(walletProvider, args) {\n        try {\n            if (!args.address) {\n                args.address = walletProvider.getAddress();\n            }\n            const connection = walletProvider.getConnection();\n            const mintPubkey = new web3_js_1.PublicKey(args.mintAddress);\n            const ownerPubkey = new web3_js_1.PublicKey(args.address);\n            const { getMint, getAssociatedTokenAddress, getAccount, TokenAccountNotFoundError } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/bignumber.js\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\")]).then(__webpack_require__.bind(__webpack_require__, /*! @solana/spl-token */ \"(rsc)/./node_modules/@solana/spl-token/lib/esm/index.js\"));\n            let mintInfo;\n            try {\n                mintInfo = await getMint(connection, mintPubkey);\n            }\n            catch (error) {\n                return `Failed to fetch mint info for mint address ${args.mintAddress}. Error: ${error}`;\n            }\n            try {\n                const ata = await getAssociatedTokenAddress(mintPubkey, ownerPubkey);\n                const account = await getAccount(connection, ata);\n                const balance = Number(account.amount) / Math.pow(10, mintInfo.decimals);\n                return `Balance for ${args.address} is ${balance} tokens`;\n            }\n            catch (error) {\n                if (error instanceof TokenAccountNotFoundError) {\n                    return `Balance for ${args.address} is 0 tokens`;\n                }\n                throw error;\n            }\n        }\n        catch (error) {\n            return `Error getting SPL token balance: ${error}`;\n        }\n    }\n    /**\n     * Transfer SPL tokens to another address.\n     *\n     * @param walletProvider - The wallet provider to use for the transfer\n     * @param args - Transfer parameters including recipient address, mint address, and amount\n     * @returns A message indicating success or failure with transaction details\n     */\n    async transfer(walletProvider, args) {\n        try {\n            const connection = walletProvider.getConnection();\n            const fromPubkey = walletProvider.getPublicKey();\n            const toPubkey = new web3_js_1.PublicKey(args.recipient);\n            const mintPubkey = new web3_js_1.PublicKey(args.mintAddress);\n            const { getMint, getAssociatedTokenAddress, getAccount, createAssociatedTokenAccountInstruction, createTransferCheckedInstruction, } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/bignumber.js\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\")]).then(__webpack_require__.bind(__webpack_require__, /*! @solana/spl-token */ \"(rsc)/./node_modules/@solana/spl-token/lib/esm/index.js\"));\n            let mintInfo;\n            try {\n                mintInfo = await getMint(connection, mintPubkey);\n            }\n            catch (error) {\n                return `Failed to fetch mint info for mint address ${args.mintAddress}. Error: ${error}`;\n            }\n            const adjustedAmount = args.amount * Math.pow(10, mintInfo.decimals);\n            const sourceAta = await getAssociatedTokenAddress(mintPubkey, fromPubkey);\n            const destinationAta = await getAssociatedTokenAddress(mintPubkey, toPubkey);\n            const instructions = [];\n            const sourceAccount = await getAccount(connection, sourceAta);\n            if (sourceAccount.amount < BigInt(adjustedAmount)) {\n                throw new Error(`Insufficient token balance. Have ${sourceAccount.amount}, need ${adjustedAmount}`);\n            }\n            try {\n                await getAccount(connection, destinationAta);\n            }\n            catch {\n                instructions.push(createAssociatedTokenAccountInstruction(fromPubkey, destinationAta, toPubkey, mintPubkey));\n            }\n            instructions.push(createTransferCheckedInstruction(sourceAta, mintPubkey, destinationAta, fromPubkey, adjustedAmount, mintInfo.decimals));\n            const tx = new web3_js_1.VersionedTransaction(web3_js_1.MessageV0.compile({\n                payerKey: fromPubkey,\n                instructions: instructions,\n                recentBlockhash: (await connection.getLatestBlockhash()).blockhash,\n            }));\n            const signature = await walletProvider.signAndSendTransaction(tx);\n            await walletProvider.waitForSignatureResult(signature);\n            return [\n                `Successfully transferred ${args.amount} tokens to ${args.recipient}`,\n                `Token mint: ${args.mintAddress}`,\n                `Signature: ${signature}`,\n            ].join(\"\\n\");\n        }\n        catch (error) {\n            return `Error transferring SPL tokens: ${error}`;\n        }\n    }\n    /**\n     * Checks if the action provider supports the given network.\n     * Only supports Solana networks.\n     *\n     * @param network - The network to check support for\n     * @returns True if the network is a Solana network\n     */\n    supportsNetwork(network) {\n        return network.protocolFamily === \"svm\";\n    }\n}\nexports.SplActionProvider = SplActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_balance\",\n        description: `\n    This tool will get the balance of SPL tokens for an address.\n    - Mint address must be a valid SPL token mint\n    - If no address is provided, uses the connected wallet's address\n    - Returns the token balance in token units (not raw)\n    `,\n        schema: schemas_1.GetBalanceSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [svmWalletProvider_1.SvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], SplActionProvider.prototype, \"getBalance\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"transfer\",\n        description: `\n    This tool will transfer SPL tokens to another address.\n    - Amount should be specified in token units (not raw)\n    - Recipient must be a valid Solana address\n    - Mint address must be a valid SPL token mint\n    - Ensures sufficient token balance before transfer\n    - Returns transaction details\n    `,\n        schema: schemas_1.TransferTokenSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [svmWalletProvider_1.SvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], SplActionProvider.prototype, \"transfer\", null);\n/**\n * Factory function to create a new SplActionProvider instance.\n *\n * @returns A new SplActionProvider instance\n */\nconst splActionProvider = () => new SplActionProvider();\nexports.splActionProvider = splActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/spl/splActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/twitter/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./twitterActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/twitterActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy90d2l0dGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxtR0FBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsK0hBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvdHdpdHRlci9pbmRleC5qcz82MjU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHdpdHRlckFjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/schemas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/twitter/schemas.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TwitterPostTweetReplySchema = exports.TwitterPostTweetSchema = exports.TwitterAccountMentionsSchema = exports.TwitterAccountDetailsSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Input schema for retrieving account details.\n */\nexports.TwitterAccountDetailsSchema = zod_1.z\n    .object({})\n    .strip()\n    .describe(\"Input schema for retrieving account details\");\n/**\n * Input schema for retrieving account mentions.\n */\nexports.TwitterAccountMentionsSchema = zod_1.z\n    .object({\n    userId: zod_1.z\n        .string()\n        .min(1, \"Account ID is required.\")\n        .describe(\"The Twitter (X) user id to return mentions for\"),\n})\n    .strip()\n    .describe(\"Input schema for retrieving account mentions\");\n/**\n * Input schema for posting a tweet.\n */\nexports.TwitterPostTweetSchema = zod_1.z\n    .object({\n    tweet: zod_1.z.string().max(280, \"Tweet must be a maximum of 280 characters.\"),\n})\n    .strip()\n    .describe(\"Input schema for posting a tweet\");\n/**\n * Input schema for posting a tweet reply.\n */\nexports.TwitterPostTweetReplySchema = zod_1.z\n    .object({\n    tweetId: zod_1.z.string().describe(\"The id of the tweet to reply to\"),\n    tweetReply: zod_1.z\n        .string()\n        .max(280, \"The reply to the tweet which must be a maximum of 280 characters.\"),\n})\n    .strip()\n    .describe(\"Input schema for posting a tweet reply\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy90d2l0dGVyL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLEdBQUcsOEJBQThCLEdBQUcsb0NBQW9DLEdBQUcsbUNBQW1DO0FBQ2pKLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy90d2l0dGVyL3NjaGVtYXMuanM/ODRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHdpdHRlclBvc3RUd2VldFJlcGx5U2NoZW1hID0gZXhwb3J0cy5Ud2l0dGVyUG9zdFR3ZWV0U2NoZW1hID0gZXhwb3J0cy5Ud2l0dGVyQWNjb3VudE1lbnRpb25zU2NoZW1hID0gZXhwb3J0cy5Ud2l0dGVyQWNjb3VudERldGFpbHNTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgcmV0cmlldmluZyBhY2NvdW50IGRldGFpbHMuXG4gKi9cbmV4cG9ydHMuVHdpdHRlckFjY291bnREZXRhaWxzU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe30pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIHJldHJpZXZpbmcgYWNjb3VudCBkZXRhaWxzXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHJldHJpZXZpbmcgYWNjb3VudCBtZW50aW9ucy5cbiAqL1xuZXhwb3J0cy5Ud2l0dGVyQWNjb3VudE1lbnRpb25zU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHVzZXJJZDogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLm1pbigxLCBcIkFjY291bnQgSUQgaXMgcmVxdWlyZWQuXCIpXG4gICAgICAgIC5kZXNjcmliZShcIlRoZSBUd2l0dGVyIChYKSB1c2VyIGlkIHRvIHJldHVybiBtZW50aW9ucyBmb3JcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciByZXRyaWV2aW5nIGFjY291bnQgbWVudGlvbnNcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgcG9zdGluZyBhIHR3ZWV0LlxuICovXG5leHBvcnRzLlR3aXR0ZXJQb3N0VHdlZXRTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgdHdlZXQ6IHpvZF8xLnouc3RyaW5nKCkubWF4KDI4MCwgXCJUd2VldCBtdXN0IGJlIGEgbWF4aW11bSBvZiAyODAgY2hhcmFjdGVycy5cIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5wdXQgc2NoZW1hIGZvciBwb3N0aW5nIGEgdHdlZXRcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgcG9zdGluZyBhIHR3ZWV0IHJlcGx5LlxuICovXG5leHBvcnRzLlR3aXR0ZXJQb3N0VHdlZXRSZXBseVNjaGVtYSA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICB0d2VldElkOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIGlkIG9mIHRoZSB0d2VldCB0byByZXBseSB0b1wiKSxcbiAgICB0d2VldFJlcGx5OiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAubWF4KDI4MCwgXCJUaGUgcmVwbHkgdG8gdGhlIHR3ZWV0IHdoaWNoIG11c3QgYmUgYSBtYXhpbXVtIG9mIDI4MCBjaGFyYWN0ZXJzLlwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnB1dCBzY2hlbWEgZm9yIHBvc3RpbmcgYSB0d2VldCByZXBseVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/twitterActionProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/twitter/twitterActionProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.twitterActionProvider = exports.TwitterActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst twitter_api_v2_1 = __webpack_require__(/*! twitter-api-v2 */ \"(rsc)/./node_modules/twitter-api-v2/dist/esm/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/schemas.js\");\n/**\n * TwitterActionProvider is an action provider for Twitter (X) interactions.\n *\n * @augments ActionProvider\n */\nclass TwitterActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the TwitterActionProvider class.\n     *\n     * @param config - The configuration options for the TwitterActionProvider\n     */\n    constructor(config = {}) {\n        super(\"twitter\", []);\n        config.apiKey || (config.apiKey = process.env.TWITTER_API_KEY);\n        config.apiSecret || (config.apiSecret = process.env.TWITTER_API_SECRET);\n        config.accessToken || (config.accessToken = process.env.TWITTER_ACCESS_TOKEN);\n        config.accessTokenSecret || (config.accessTokenSecret = process.env.TWITTER_ACCESS_TOKEN_SECRET);\n        if (!config.apiKey) {\n            throw new Error(\"TWITTER_API_KEY is not configured.\");\n        }\n        if (!config.apiSecret) {\n            throw new Error(\"TWITTER_API_SECRET is not configured.\");\n        }\n        if (!config.accessToken) {\n            throw new Error(\"TWITTER_ACCESS_TOKEN is not configured.\");\n        }\n        if (!config.accessTokenSecret) {\n            throw new Error(\"TWITTER_ACCESS_TOKEN_SECRET is not configured.\");\n        }\n        this.client = new twitter_api_v2_1.TwitterApi({\n            appKey: config.apiKey,\n            appSecret: config.apiSecret,\n            accessToken: config.accessToken,\n            accessSecret: config.accessTokenSecret,\n        });\n    }\n    /**\n     * Get account details for the currently authenticated Twitter (X) user.\n     *\n     * @param _ - Empty parameter object (not used)\n     * @returns A JSON string containing the account details or error message\n     */\n    async accountDetails(_) {\n        try {\n            const response = await this.client.v2.me();\n            response.data.url = `https://x.com/${response.data.username}`;\n            return `Successfully retrieved authenticated user account details:\\n${JSON.stringify(response)}`;\n        }\n        catch (error) {\n            return `Error retrieving authenticated user account details: ${error}`;\n        }\n    }\n    /**\n     * Get mentions for a specified Twitter (X) user.\n     *\n     * @param args - The arguments containing userId\n     * @returns A JSON string containing the mentions or error message\n     */\n    async accountMentions(args) {\n        try {\n            const response = await this.client.v2.userMentionTimeline(args.userId);\n            return `Successfully retrieved account mentions:\\n${JSON.stringify(response)}`;\n        }\n        catch (error) {\n            return `Error retrieving authenticated account mentions: ${error}`;\n        }\n    }\n    /**\n     * Post a tweet on Twitter (X).\n     *\n     * @param args - The arguments containing the tweet text\n     * @returns A JSON string containing the posted tweet details or error message\n     */\n    async postTweet(args) {\n        try {\n            const response = await this.client.v2.tweet(args.tweet);\n            return `Successfully posted to Twitter:\\n${JSON.stringify(response)}`;\n        }\n        catch (error) {\n            return `Error posting to Twitter:\\n${error}`;\n        }\n    }\n    /**\n     * Post a reply to a tweet on Twitter (X).\n     *\n     * @param args - The arguments containing the reply text and tweet ID\n     * @returns A JSON string containing the posted reply details or error message\n     */\n    async postTweetReply(args) {\n        try {\n            const response = await this.client.v2.tweet(args.tweetReply, {\n                reply: { in_reply_to_tweet_id: args.tweetId },\n            });\n            return `Successfully posted reply to Twitter:\\n${JSON.stringify(response)}`;\n        }\n        catch (error) {\n            return `Error posting reply to Twitter: ${error}`;\n        }\n    }\n    /**\n     * Checks if the Twitter action provider supports the given network.\n     * Twitter actions don't depend on blockchain networks, so always return true.\n     *\n     * @param _ - The network to check (not used)\n     * @returns Always returns true as Twitter actions are network-independent\n     */\n    supportsNetwork(_) {\n        return true;\n    }\n}\nexports.TwitterActionProvider = TwitterActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"account_details\",\n        description: `\nThis tool will return account details for the currently authenticated Twitter (X) user context.\n\nA successful response will return a message with the api response as a json payload:\n    {\"data\": {\"id\": \"1853889445319331840\", \"name\": \"CDP AgentKit\", \"username\": \"CDPAgentKit\"}}\n\nA failure response will return a message with a Twitter API request error:\n    Error retrieving authenticated user account: 429 Too Many Requests`,\n        schema: schemas_1.TwitterAccountDetailsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], TwitterActionProvider.prototype, \"accountDetails\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"account_mentions\",\n        description: `\nThis tool will return mentions for the specified Twitter (X) user id.\n\nA successful response will return a message with the API response as a JSON payload:\n    {\"data\": [{\"id\": \"1857479287504584856\", \"text\": \"@CDPAgentKit reply\"}]}\n\nA failure response will return a message with the Twitter API request error:\n    Error retrieving user mentions: 429 Too Many Requests`,\n        schema: schemas_1.TwitterAccountMentionsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], TwitterActionProvider.prototype, \"accountMentions\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"post_tweet\",\n        description: `\nThis tool will post a tweet on Twitter. The tool takes the text of the tweet as input. Tweets can be maximum 280 characters.\n\nA successful response will return a message with the API response as a JSON payload:\n    {\"data\": {\"text\": \"hello, world!\", \"id\": \"0123456789012345678\", \"edit_history_tweet_ids\": [\"0123456789012345678\"]}}\n\nA failure response will return a message with the Twitter API request error:\n    You are not allowed to create a Tweet with duplicate content.`,\n        schema: schemas_1.TwitterPostTweetSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], TwitterActionProvider.prototype, \"postTweet\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"post_tweet_reply\",\n        description: `\nThis tool will post a tweet on Twitter. The tool takes the text of the tweet as input. Tweets can be maximum 280 characters.\n\nA successful response will return a message with the API response as a JSON payload:\n    {\"data\": {\"text\": \"hello, world!\", \"id\": \"0123456789012345678\", \"edit_history_tweet_ids\": [\"0123456789012345678\"]}}\n\nA failure response will return a message with the Twitter API request error:\n    You are not allowed to create a Tweet with duplicate content.`,\n        schema: schemas_1.TwitterPostTweetReplySchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [void 0]),\n    __metadata(\"design:returntype\", Promise)\n], TwitterActionProvider.prototype, \"postTweetReply\", null);\n/**\n * Factory function to create a new TwitterActionProvider instance.\n *\n * @param config - The configuration options for the TwitterActionProvider\n * @returns A new instance of TwitterActionProvider\n */\nconst twitterActionProvider = (config = {}) => new TwitterActionProvider(config);\nexports.twitterActionProvider = twitterActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/twitter/twitterActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/actions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/actions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchVaultActions = fetchVaultActions;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js\");\n/**\n * Fetches a list of actions for a vault from the vaultsfyi API.\n *\n * @param root0 - The fetch parameters\n * @param root0.action - The action to fetch\n * @param root0.args - The action parameters\n * @param root0.sender - The sender address\n * @param root0.apiKey - The vaultsfyi API key\n * @returns The list of actions\n */\nasync function fetchVaultActions({ action, args, sender, apiKey, }) {\n    const params = (0, utils_1.createSearchParams)({\n        ...args,\n        sender,\n    });\n    const response = await fetch(`${constants_1.VAULTS_API_URL}/transactions/vaults/${action}?${params}`, {\n        method: \"GET\",\n        headers: {\n            \"x-api-key\": apiKey,\n        },\n    });\n    return (await response.json());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvYXBpL2FjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLGtHQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDBHQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLCtCQUErQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0NBQW9DLDJCQUEyQix1QkFBdUIsT0FBTyxHQUFHLE9BQU87QUFDdkc7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvdmF1bHRzZnlpL2FwaS9hY3Rpb25zLmpzPzNjYmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZldGNoVmF1bHRBY3Rpb25zID0gZmV0Y2hWYXVsdEFjdGlvbnM7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBGZXRjaGVzIGEgbGlzdCBvZiBhY3Rpb25zIGZvciBhIHZhdWx0IGZyb20gdGhlIHZhdWx0c2Z5aSBBUEkuXG4gKlxuICogQHBhcmFtIHJvb3QwIC0gVGhlIGZldGNoIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSByb290MC5hY3Rpb24gLSBUaGUgYWN0aW9uIHRvIGZldGNoXG4gKiBAcGFyYW0gcm9vdDAuYXJncyAtIFRoZSBhY3Rpb24gcGFyYW1ldGVyc1xuICogQHBhcmFtIHJvb3QwLnNlbmRlciAtIFRoZSBzZW5kZXIgYWRkcmVzc1xuICogQHBhcmFtIHJvb3QwLmFwaUtleSAtIFRoZSB2YXVsdHNmeWkgQVBJIGtleVxuICogQHJldHVybnMgVGhlIGxpc3Qgb2YgYWN0aW9uc1xuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFZhdWx0QWN0aW9ucyh7IGFjdGlvbiwgYXJncywgc2VuZGVyLCBhcGlLZXksIH0pIHtcbiAgICBjb25zdCBwYXJhbXMgPSAoMCwgdXRpbHNfMS5jcmVhdGVTZWFyY2hQYXJhbXMpKHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgc2VuZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Y29uc3RhbnRzXzEuVkFVTFRTX0FQSV9VUkx9L3RyYW5zYWN0aW9ucy92YXVsdHMvJHthY3Rpb259PyR7cGFyYW1zfWAsIHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIngtYXBpLWtleVwiOiBhcGlLZXksXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIChhd2FpdCByZXNwb25zZS5qc29uKCkpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/actions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/vaults.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/vaults.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchVaults = fetchVaults;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js\");\n/**\n * Fetches a list of vaults from the vaultsfyi API.\n *\n * @param args - The action parameters\n * @param apiKey - The vaultsfyi API key\n * @returns The list of vaults\n */\nasync function fetchVaults(args, apiKey) {\n    const vaults = [];\n    const params = (0, utils_1.createSearchParams)({\n        per_page: 250,\n        token: args.token,\n        network: args.network,\n        tvl_min: args.minTvl ?? 100000,\n        transactional_only: true,\n    });\n    for (let i = 0; i < 10; i++) {\n        const response = await fetch(`${constants_1.VAULTS_API_URL}/detailed/vaults?${params}`, {\n            method: \"GET\",\n            headers: {\n                \"x-api-key\": apiKey,\n            },\n        });\n        const data = (await response.json());\n        if (\"error\" in data)\n            return data;\n        vaults.push(...data.data);\n        if (!data.next_page)\n            break;\n        else\n            params.set(\"page\", data.next_page);\n    }\n    return vaults;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvYXBpL3ZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0JBQWdCLG1CQUFPLENBQUMsa0dBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsMEdBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLG9CQUFvQixRQUFRO0FBQzVCLHdDQUF3QywyQkFBMkIsbUJBQW1CLE9BQU87QUFDN0Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvdmF1bHRzZnlpL2FwaS92YXVsdHMuanM/MzE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hWYXVsdHMgPSBmZXRjaFZhdWx0cztcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG4vKipcbiAqIEZldGNoZXMgYSBsaXN0IG9mIHZhdWx0cyBmcm9tIHRoZSB2YXVsdHNmeWkgQVBJLlxuICpcbiAqIEBwYXJhbSBhcmdzIC0gVGhlIGFjdGlvbiBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0gYXBpS2V5IC0gVGhlIHZhdWx0c2Z5aSBBUEkga2V5XG4gKiBAcmV0dXJucyBUaGUgbGlzdCBvZiB2YXVsdHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hWYXVsdHMoYXJncywgYXBpS2V5KSB7XG4gICAgY29uc3QgdmF1bHRzID0gW107XG4gICAgY29uc3QgcGFyYW1zID0gKDAsIHV0aWxzXzEuY3JlYXRlU2VhcmNoUGFyYW1zKSh7XG4gICAgICAgIHBlcl9wYWdlOiAyNTAsXG4gICAgICAgIHRva2VuOiBhcmdzLnRva2VuLFxuICAgICAgICBuZXR3b3JrOiBhcmdzLm5ldHdvcmssXG4gICAgICAgIHR2bF9taW46IGFyZ3MubWluVHZsID8/IDEwMDAwMCxcbiAgICAgICAgdHJhbnNhY3Rpb25hbF9vbmx5OiB0cnVlLFxuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2NvbnN0YW50c18xLlZBVUxUU19BUElfVVJMfS9kZXRhaWxlZC92YXVsdHM/JHtwYXJhbXN9YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwieC1hcGkta2V5XCI6IGFwaUtleSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBkYXRhID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIGlmIChcImVycm9yXCIgaW4gZGF0YSlcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB2YXVsdHMucHVzaCguLi5kYXRhLmRhdGEpO1xuICAgICAgICBpZiAoIWRhdGEubmV4dF9wYWdlKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoXCJwYWdlXCIsIGRhdGEubmV4dF9wYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhdWx0cztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/vaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VAULTSFYI_SUPPORTED_CHAINS = exports.VAULTS_API_URL = void 0;\nexports.VAULTS_API_URL = \"https://api.vaults.fyi/v1\";\nexports.VAULTSFYI_SUPPORTED_CHAINS = {\n    1: \"mainnet\",\n    42161: \"arbitrum\",\n    10: \"optimism\",\n    137: \"polygon\",\n    100: \"gnosis\",\n    8453: \"base\",\n    130: \"unichain\",\n    1923: \"swellchain\",\n    42220: \"celo\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxHQUFHLHNCQUFzQjtBQUMzRCxzQkFBc0I7QUFDdEIsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvdmF1bHRzZnlpL2NvbnN0YW50cy5qcz8yYjc0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WQVVMVFNGWUlfU1VQUE9SVEVEX0NIQUlOUyA9IGV4cG9ydHMuVkFVTFRTX0FQSV9VUkwgPSB2b2lkIDA7XG5leHBvcnRzLlZBVUxUU19BUElfVVJMID0gXCJodHRwczovL2FwaS52YXVsdHMuZnlpL3YxXCI7XG5leHBvcnRzLlZBVUxUU0ZZSV9TVVBQT1JURURfQ0hBSU5TID0ge1xuICAgIDE6IFwibWFpbm5ldFwiLFxuICAgIDQyMTYxOiBcImFyYml0cnVtXCIsXG4gICAgMTA6IFwib3B0aW1pc21cIixcbiAgICAxMzc6IFwicG9seWdvblwiLFxuICAgIDEwMDogXCJnbm9zaXNcIixcbiAgICA4NDUzOiBcImJhc2VcIixcbiAgICAxMzA6IFwidW5pY2hhaW5cIixcbiAgICAxOTIzOiBcInN3ZWxsY2hhaW5cIixcbiAgICA0MjIyMDogXCJjZWxvXCIsXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/index.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Exports for vaultsfyi action provider\n *\n * @module vaultsfyi\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./vaultsfyiActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/vaultsfyiActionProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/schemas.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxxSUFBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLHFHQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvdmF1bHRzZnlpL2luZGV4LmpzPzhmN2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEV4cG9ydHMgZm9yIHZhdWx0c2Z5aSBhY3Rpb24gcHJvdmlkZXJcbiAqXG4gKiBAbW9kdWxlIHZhdWx0c2Z5aVxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YXVsdHNmeWlBY3Rpb25Qcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/schemas.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/schemas.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.claimActionSchema = exports.redeemActionSchema = exports.depositActionSchema = exports.VaultsActionSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js\");\n/**\n * Action schemas for the vaultsfyi action provider.\n *\n * This file contains the Zod schemas that define the shape and validation\n * rules for action parameters in the vaultsfyi action provider.\n */\nconst NetworkSchema = zod_1.z.enum(Object.values(constants_1.VAULTSFYI_SUPPORTED_CHAINS));\n/**\n * Vaults list action schema.\n */\nexports.VaultsActionSchema = zod_1.z.object({\n    token: zod_1.z\n        .string()\n        .optional()\n        .describe(\"Optional: Name or symbol of the token to filter vaults by\"),\n    protocol: zod_1.z.string().optional().describe(\"Optional: Protocol to filter vaults by\"),\n    network: NetworkSchema.optional().describe(\"Optional: Network name to filter vaults by. Supported networks: mainnet, arbitrum, optimism, polygon, base, gnosis, unichain\"),\n    minTvl: zod_1.z.number().optional().describe(\"Optional: Minimum TVL to filter vaults by\"),\n    sort: zod_1.z\n        .object({\n        field: zod_1.z.enum([\"tvl\", \"apy\", \"name\"]).optional().describe(\"Sort field\"),\n        direction: zod_1.z.enum([\"asc\", \"desc\"]).optional().describe(\"Sort direction\"),\n    })\n        .optional()\n        .describe(\"Sort options\"),\n    take: zod_1.z.number().optional().describe(\"Optional: Limit the number of results\"),\n    page: zod_1.z.number().optional().describe(\"Optional: Page number\"),\n});\n/**\n * Base transaction params schema.\n */\nconst TransactionActionSchema = zod_1.z.object({\n    vaultAddress: zod_1.z.string().describe(\"The address of the vault to interact with\"),\n    assetAddress: zod_1.z.string().describe(\"The address of the vault's underlying token\"),\n    network: NetworkSchema.describe(\"The network of the vault\"),\n    amount: zod_1.z.number().describe(\"The amount of assets to use\"),\n});\nexports.depositActionSchema = TransactionActionSchema;\nexports.redeemActionSchema = TransactionActionSchema.extend({\n    all: zod_1.z.boolean().optional().describe(\"Should redeem all assets\"),\n});\nexports.claimActionSchema = TransactionActionSchema.omit({\n    amount: true,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRywwQkFBMEIsR0FBRywyQkFBMkIsR0FBRywwQkFBMEI7QUFDakgsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCLG9CQUFvQixtQkFBTyxDQUFDLHlHQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCO0FBQ0EsQ0FBQztBQUNELHlCQUF5QjtBQUN6QjtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvc2NoZW1hcy5qcz81NjllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbGFpbUFjdGlvblNjaGVtYSA9IGV4cG9ydHMucmVkZWVtQWN0aW9uU2NoZW1hID0gZXhwb3J0cy5kZXBvc2l0QWN0aW9uU2NoZW1hID0gZXhwb3J0cy5WYXVsdHNBY3Rpb25TY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8qKlxuICogQWN0aW9uIHNjaGVtYXMgZm9yIHRoZSB2YXVsdHNmeWkgYWN0aW9uIHByb3ZpZGVyLlxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgWm9kIHNjaGVtYXMgdGhhdCBkZWZpbmUgdGhlIHNoYXBlIGFuZCB2YWxpZGF0aW9uXG4gKiBydWxlcyBmb3IgYWN0aW9uIHBhcmFtZXRlcnMgaW4gdGhlIHZhdWx0c2Z5aSBhY3Rpb24gcHJvdmlkZXIuXG4gKi9cbmNvbnN0IE5ldHdvcmtTY2hlbWEgPSB6b2RfMS56LmVudW0oT2JqZWN0LnZhbHVlcyhjb25zdGFudHNfMS5WQVVMVFNGWUlfU1VQUE9SVEVEX0NIQUlOUykpO1xuLyoqXG4gKiBWYXVsdHMgbGlzdCBhY3Rpb24gc2NoZW1hLlxuICovXG5leHBvcnRzLlZhdWx0c0FjdGlvblNjaGVtYSA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICB0b2tlbjogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLmRlc2NyaWJlKFwiT3B0aW9uYWw6IE5hbWUgb3Igc3ltYm9sIG9mIHRoZSB0b2tlbiB0byBmaWx0ZXIgdmF1bHRzIGJ5XCIpLFxuICAgIHByb3RvY29sOiB6b2RfMS56LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJPcHRpb25hbDogUHJvdG9jb2wgdG8gZmlsdGVyIHZhdWx0cyBieVwiKSxcbiAgICBuZXR3b3JrOiBOZXR3b3JrU2NoZW1hLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJPcHRpb25hbDogTmV0d29yayBuYW1lIHRvIGZpbHRlciB2YXVsdHMgYnkuIFN1cHBvcnRlZCBuZXR3b3JrczogbWFpbm5ldCwgYXJiaXRydW0sIG9wdGltaXNtLCBwb2x5Z29uLCBiYXNlLCBnbm9zaXMsIHVuaWNoYWluXCIpLFxuICAgIG1pblR2bDogem9kXzEuei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiT3B0aW9uYWw6IE1pbmltdW0gVFZMIHRvIGZpbHRlciB2YXVsdHMgYnlcIiksXG4gICAgc29ydDogem9kXzEuelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgZmllbGQ6IHpvZF8xLnouZW51bShbXCJ0dmxcIiwgXCJhcHlcIiwgXCJuYW1lXCJdKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiU29ydCBmaWVsZFwiKSxcbiAgICAgICAgZGlyZWN0aW9uOiB6b2RfMS56LmVudW0oW1wiYXNjXCIsIFwiZGVzY1wiXSkub3B0aW9uYWwoKS5kZXNjcmliZShcIlNvcnQgZGlyZWN0aW9uXCIpLFxuICAgIH0pXG4gICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgIC5kZXNjcmliZShcIlNvcnQgb3B0aW9uc1wiKSxcbiAgICB0YWtlOiB6b2RfMS56Lm51bWJlcigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJPcHRpb25hbDogTGltaXQgdGhlIG51bWJlciBvZiByZXN1bHRzXCIpLFxuICAgIHBhZ2U6IHpvZF8xLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcIk9wdGlvbmFsOiBQYWdlIG51bWJlclwiKSxcbn0pO1xuLyoqXG4gKiBCYXNlIHRyYW5zYWN0aW9uIHBhcmFtcyBzY2hlbWEuXG4gKi9cbmNvbnN0IFRyYW5zYWN0aW9uQWN0aW9uU2NoZW1hID0gem9kXzEuei5vYmplY3Qoe1xuICAgIHZhdWx0QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBhZGRyZXNzIG9mIHRoZSB2YXVsdCB0byBpbnRlcmFjdCB3aXRoXCIpLFxuICAgIGFzc2V0QWRkcmVzczogem9kXzEuei5zdHJpbmcoKS5kZXNjcmliZShcIlRoZSBhZGRyZXNzIG9mIHRoZSB2YXVsdCdzIHVuZGVybHlpbmcgdG9rZW5cIiksXG4gICAgbmV0d29yazogTmV0d29ya1NjaGVtYS5kZXNjcmliZShcIlRoZSBuZXR3b3JrIG9mIHRoZSB2YXVsdFwiKSxcbiAgICBhbW91bnQ6IHpvZF8xLnoubnVtYmVyKCkuZGVzY3JpYmUoXCJUaGUgYW1vdW50IG9mIGFzc2V0cyB0byB1c2VcIiksXG59KTtcbmV4cG9ydHMuZGVwb3NpdEFjdGlvblNjaGVtYSA9IFRyYW5zYWN0aW9uQWN0aW9uU2NoZW1hO1xuZXhwb3J0cy5yZWRlZW1BY3Rpb25TY2hlbWEgPSBUcmFuc2FjdGlvbkFjdGlvblNjaGVtYS5leHRlbmQoe1xuICAgIGFsbDogem9kXzEuei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZXNjcmliZShcIlNob3VsZCByZWRlZW0gYWxsIGFzc2V0c1wiKSxcbn0pO1xuZXhwb3J0cy5jbGFpbUFjdGlvblNjaGVtYSA9IFRyYW5zYWN0aW9uQWN0aW9uU2NoZW1hLm9taXQoe1xuICAgIGFtb3VudDogdHJ1ZSxcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getVaultsLink = getVaultsLink;\nexports.executeActions = executeActions;\nexports.createSearchParams = createSearchParams;\nexports.parseAssetAmount = parseAssetAmount;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\n/**\n * Get the link to the vaults.fyi page for a vault\n *\n * @param vault - The vault\n * @returns The link to the vaults.fyi page\n */\nfunction getVaultsLink(vault) {\n    if (vault.isTransactional) {\n        return `https://app.vaults.fyi/opportunity/${vault.network}/${vault.address}`;\n    }\n    else {\n        return `https://analytics.vaults.fyi/vaults/${vault.network}/${vault.address}`;\n    }\n}\n/**\n * Execute a list of actions\n *\n * @param wallet - The wallet provider\n * @param actions - The list of actions to execute\n * @returns nothing\n */\nasync function executeActions(wallet, actions) {\n    for (let i = actions.currentActionIndex; i < actions.actions.length; i++) {\n        const action = actions.actions[i];\n        const txHash = await wallet.sendTransaction({\n            ...action.tx,\n            value: action.tx.value ? BigInt(action.tx.value) : undefined,\n        });\n        await wallet.waitForTransactionReceipt(txHash);\n    }\n}\n/**\n * Create a URLSearchParams object from an object\n *\n * @param obj - The object to convert\n * @returns The URLSearchParams object\n */\nfunction createSearchParams(obj) {\n    const params = new URLSearchParams();\n    for (const key in obj) {\n        if (obj[key] !== undefined) {\n            params.append(key, obj[key].toString());\n        }\n    }\n    return params;\n}\n/**\n * Parse an asset amount with decimals\n *\n * @param wallet - The wallet provider\n * @param assetAddress - The address of the asset\n * @param amount - The amount to parse\n * @returns The parsed amount\n */\nasync function parseAssetAmount(wallet, assetAddress, amount) {\n    const decimals = await wallet.readContract({\n        address: assetAddress,\n        abi: viem_1.erc20Abi,\n        functionName: \"decimals\",\n    });\n    return Math.floor(amount * 10 ** decimals);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLGVBQWUsbUJBQU8sQ0FBQyxxREFBTTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGNBQWMsR0FBRyxjQUFjO0FBQ3BGO0FBQ0E7QUFDQSxzREFBc0QsY0FBYyxHQUFHLGNBQWM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsNEJBQTRCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy92YXVsdHNmeWkvdXRpbHMuanM/ZWM5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VmF1bHRzTGluayA9IGdldFZhdWx0c0xpbms7XG5leHBvcnRzLmV4ZWN1dGVBY3Rpb25zID0gZXhlY3V0ZUFjdGlvbnM7XG5leHBvcnRzLmNyZWF0ZVNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcztcbmV4cG9ydHMucGFyc2VBc3NldEFtb3VudCA9IHBhcnNlQXNzZXRBbW91bnQ7XG5jb25zdCB2aWVtXzEgPSByZXF1aXJlKFwidmllbVwiKTtcbi8qKlxuICogR2V0IHRoZSBsaW5rIHRvIHRoZSB2YXVsdHMuZnlpIHBhZ2UgZm9yIGEgdmF1bHRcbiAqXG4gKiBAcGFyYW0gdmF1bHQgLSBUaGUgdmF1bHRcbiAqIEByZXR1cm5zIFRoZSBsaW5rIHRvIHRoZSB2YXVsdHMuZnlpIHBhZ2VcbiAqL1xuZnVuY3Rpb24gZ2V0VmF1bHRzTGluayh2YXVsdCkge1xuICAgIGlmICh2YXVsdC5pc1RyYW5zYWN0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovL2FwcC52YXVsdHMuZnlpL29wcG9ydHVuaXR5LyR7dmF1bHQubmV0d29ya30vJHt2YXVsdC5hZGRyZXNzfWA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYGh0dHBzOi8vYW5hbHl0aWNzLnZhdWx0cy5meWkvdmF1bHRzLyR7dmF1bHQubmV0d29ya30vJHt2YXVsdC5hZGRyZXNzfWA7XG4gICAgfVxufVxuLyoqXG4gKiBFeGVjdXRlIGEgbGlzdCBvZiBhY3Rpb25zXG4gKlxuICogQHBhcmFtIHdhbGxldCAtIFRoZSB3YWxsZXQgcHJvdmlkZXJcbiAqIEBwYXJhbSBhY3Rpb25zIC0gVGhlIGxpc3Qgb2YgYWN0aW9ucyB0byBleGVjdXRlXG4gKiBAcmV0dXJucyBub3RoaW5nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVBY3Rpb25zKHdhbGxldCwgYWN0aW9ucykge1xuICAgIGZvciAobGV0IGkgPSBhY3Rpb25zLmN1cnJlbnRBY3Rpb25JbmRleDsgaSA8IGFjdGlvbnMuYWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zLmFjdGlvbnNbaV07XG4gICAgICAgIGNvbnN0IHR4SGFzaCA9IGF3YWl0IHdhbGxldC5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgLi4uYWN0aW9uLnR4LFxuICAgICAgICAgICAgdmFsdWU6IGFjdGlvbi50eC52YWx1ZSA/IEJpZ0ludChhY3Rpb24udHgudmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgd2FsbGV0LndhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgZnJvbSBhbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBUaGUgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMob2JqKSB7XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zLmFwcGVuZChrZXksIG9ialtrZXldLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG4vKipcbiAqIFBhcnNlIGFuIGFzc2V0IGFtb3VudCB3aXRoIGRlY2ltYWxzXG4gKlxuICogQHBhcmFtIHdhbGxldCAtIFRoZSB3YWxsZXQgcHJvdmlkZXJcbiAqIEBwYXJhbSBhc3NldEFkZHJlc3MgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYXNzZXRcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IHRvIHBhcnNlXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGFtb3VudFxuICovXG5hc3luYyBmdW5jdGlvbiBwYXJzZUFzc2V0QW1vdW50KHdhbGxldCwgYXNzZXRBZGRyZXNzLCBhbW91bnQpIHtcbiAgICBjb25zdCBkZWNpbWFscyA9IGF3YWl0IHdhbGxldC5yZWFkQ29udHJhY3Qoe1xuICAgICAgICBhZGRyZXNzOiBhc3NldEFkZHJlc3MsXG4gICAgICAgIGFiaTogdmllbV8xLmVyYzIwQWJpLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwiZGVjaW1hbHNcIixcbiAgICB9KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihhbW91bnQgKiAxMCAqKiBkZWNpbWFscyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/vaultsfyiActionProvider.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/vaultsfyiActionProvider.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Vaultsfyi Action Provider\n *\n * This file contains the implementation of the VaultsfyiActionProvider,\n * which provides actions for vaultsfyi operations.\n *\n * @module vaultsfyi\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.vaultsfyiActionProvider = exports.VaultsfyiActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/schemas.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/utils.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/constants.js\");\nconst actions_1 = __webpack_require__(/*! ./api/actions */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/actions.js\");\nconst vaults_1 = __webpack_require__(/*! ./api/vaults */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/api/vaults.js\");\n/**\n * VaultsfyiActionProvider provides actions for vaultsfyi operations.\n *\n * @description\n * This provider is designed to work with EvmWalletProvider for blockchain interactions.\n * It supports all evm networks.\n */\nclass VaultsfyiActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the VaultsfyiActionProvider.\n     *\n     * @param config - Configuration options for the provider\n     */\n    constructor(config = {}) {\n        super(\"vaultsfyi\", []);\n        const apiKey = config.apiKey || process.env.VAULTSFYI_API_KEY;\n        if (!apiKey) {\n            throw new Error(\"VAULTSFYI_API_KEY is not configured.\");\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * vaults action\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @param args - Input arguments: token, network, transactionalOnly...\n     * @returns A list of vaults.\n     */\n    async vaults(wallet, args) {\n        const vaults = await (0, vaults_1.fetchVaults)(args, this.apiKey);\n        if (\"error\" in vaults) {\n            return `Failed to fetch vaults: ${vaults.error}, ${vaults.message}`;\n        }\n        if (args.protocol && !vaults.find(vault => vault.protocol === args.protocol)) {\n            const supportedProtocols = vaults\n                .map(vault => vault.protocol)\n                .filter((value, index, self) => self.indexOf(value) === index);\n            return `Protocol ${args.protocol} is not supported. Supported protocols are: ${supportedProtocols.join(\", \")}`;\n        }\n        const transformedVaults = vaults.map(vault => ({\n            name: vault.name,\n            address: vault.address,\n            network: vault.network,\n            protocol: vault.protocol,\n            tvlInUsd: Number(vault.tvlDetails.tvlUsd),\n            apy: {\n                base: vault.apy.base[\"7day\"] / 100,\n                rewards: vault.apy.rewards?.[\"7day\"] ? vault.apy.rewards[\"7day\"] / 100 : undefined,\n                total: vault.apy.total[\"7day\"] / 100,\n            },\n            token: {\n                address: vault.token.assetAddress,\n                name: vault.token.name,\n                symbol: vault.token.symbol,\n            },\n            link: (0, utils_1.getVaultsLink)(vault),\n        }));\n        const filteredVaults = transformedVaults.filter(vault => args.protocol ? vault.protocol === args.protocol : true);\n        const sortedVaults = filteredVaults.sort((a, b) => {\n            if (args.sort?.field === \"tvl\") {\n                return args.sort.direction === \"asc\" ? a.tvlInUsd - b.tvlInUsd : b.tvlInUsd - a.tvlInUsd;\n            }\n            else if (args.sort?.field === \"apy\") {\n                return args.sort.direction === \"asc\"\n                    ? a.apy.total - b.apy.total\n                    : b.apy.total - a.apy.total;\n            }\n            return a.name.localeCompare(b.name);\n        });\n        const take = args.take || 10;\n        const page = args.page || 1;\n        const start = (page - 1) * take;\n        const end = start + take;\n        const results = sortedVaults.slice(start, end);\n        return JSON.stringify({\n            totalResults: sortedVaults.length,\n            nextPage: end < sortedVaults.length,\n            results,\n        });\n    }\n    /**\n     * Deposit action\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @param args - Input arguments\n     * @returns A result message\n     */\n    async deposit(wallet, args) {\n        const actions = await (0, actions_1.fetchVaultActions)({\n            action: \"deposit\",\n            args: { ...args, amount: await (0, utils_1.parseAssetAmount)(wallet, args.assetAddress, args.amount) },\n            sender: wallet.getAddress(),\n            apiKey: this.apiKey,\n        });\n        if (\"error\" in actions) {\n            return `Failed to fetch deposit transactions: ${actions.error}, ${actions.message}`;\n        }\n        await (0, utils_1.executeActions)(wallet, actions);\n        return \"Deposit successful\";\n    }\n    /**\n     * Redeem action\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @param args - Input arguments\n     * @returns A result message\n     */\n    async redeem(wallet, args) {\n        const actions = await (0, actions_1.fetchVaultActions)({\n            action: \"redeem\",\n            args: { ...args, amount: await (0, utils_1.parseAssetAmount)(wallet, args.assetAddress, args.amount) },\n            sender: wallet.getAddress(),\n            apiKey: this.apiKey,\n        });\n        if (\"error\" in actions) {\n            return `Failed to fetch redeem transactions: ${actions.error}, ${actions.message}`;\n        }\n        await (0, utils_1.executeActions)(wallet, actions);\n        return \"Redeem successful\";\n    }\n    /**\n     * Claim rewards action\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @param args - Input arguments\n     * @returns A result message\n     */\n    async claim(wallet, args) {\n        const actions = await (0, actions_1.fetchVaultActions)({\n            action: \"claim-rewards\",\n            args,\n            sender: wallet.getAddress(),\n            apiKey: this.apiKey,\n        });\n        if (\"error\" in actions) {\n            return `Failed to fetch claim transactions: ${actions.error}, ${actions.message}`;\n        }\n        await (0, utils_1.executeActions)(wallet, actions);\n        return \"Claim successful\";\n    }\n    /**\n     * Returns the users wallet token balances.\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @returns A record of the users balances\n     */\n    async balances(wallet) {\n        const params = new URLSearchParams({\n            account: wallet.getAddress(),\n        });\n        const result = await fetch(`${constants_1.VAULTS_API_URL}/portfolio/wallet-balances?${params.toString()}`, {\n            method: \"GET\",\n            headers: {\n                \"x-api-key\": this.apiKey,\n            },\n        });\n        const balances = (await result.json());\n        if (\"error\" in balances) {\n            return `Failed to fetch wallet balances: ${balances.error}, ${balances.message}`;\n        }\n        const entries = Object.entries(balances).map(([network, balances]) => {\n            return [\n                network,\n                balances.map(balance => ({\n                    address: balance.address,\n                    name: balance.name,\n                    symbol: balance.symbol,\n                    balance: Number(balance.balance) / 10 ** balance.decimals,\n                })),\n            ];\n        });\n        return JSON.stringify(Object.fromEntries(entries));\n    }\n    /**\n     * Returns the users positions.\n     *\n     * @param wallet - The wallet provider instance for blockchain interactions\n     * @returns A record of the users positions\n     */\n    async positions(wallet) {\n        const result = await fetch(`${constants_1.VAULTS_API_URL}/portfolio/positions/${wallet.getAddress()}`, {\n            method: \"GET\",\n            headers: {\n                \"x-api-key\": this.apiKey,\n            },\n        });\n        const positions = (await result.json());\n        if (\"error\" in positions) {\n            return `Failed to fetch positions: ${positions.error}, ${positions.message}`;\n        }\n        const entries = Object.entries(positions).map(([network, positions]) => {\n            return [\n                network,\n                positions.map(position => ({\n                    name: position.vaultName,\n                    vaultAddress: position.vaultAddress,\n                    asset: {\n                        address: position.asset.assetAddress,\n                        name: position.asset.name,\n                        symbol: position.asset.symbol,\n                    },\n                    underlyingTokenBalance: Number(position.balanceNative) / 10 ** position.asset.decimals,\n                    lpTokenBalance: Number(position.balanceLp) / 10 ** position.asset.decimals,\n                    unclaimedRewards: Number(position.unclaimedUsd) > 0,\n                    apy: {\n                        base: position.apy.base / 100,\n                        rewards: position.apy.rewards / 100,\n                        total: position.apy.total / 100,\n                    },\n                })),\n            ];\n        });\n        return JSON.stringify(Object.fromEntries(entries));\n    }\n    /**\n     * Checks if this provider supports the given network.\n     *\n     * @param network - The network to check support for\n     * @returns True if the network is supported\n     */\n    supportsNetwork(network) {\n        return (network.protocolFamily == \"evm\" &&\n            (network.chainId ? Object.keys(constants_1.VAULTSFYI_SUPPORTED_CHAINS).includes(network.chainId) : false));\n    }\n}\nexports.VaultsfyiActionProvider = VaultsfyiActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"vaults\",\n        description: `\n      This action returns a list of available vaults.\n      Small vaults (under 100k TVL) are probably best avoided as they may be more risky. Unless the user is looking for high-risk, high-reward opportunities, don't include them.\n      When the user asks for best vaults, optimize for apy, and if the user asks for safest/reliable vaults, optimize for TVL.\n      Try to take a reasonable number of results so its easier to analyze the data.\n      Format result apys as: x% (base: x%, rewards: x%) if rewards apy is available, otherwise: x%\n      Examples:\n      User: \"Show me the best vaults\"\n      args: { sort: { field: 'apy', direction: 'desc' }, take: 5 }\n      User: \"Show me the safest vaults\"\n      args: { sort: { field: 'tvl', direction: 'desc' }, take: 5 }\n      User: \"Show me the best vaults on Arbitrum\"\n      args: { network: 'arbitrum', sort: { field: 'apy', direction: 'desc' }, take: 5 }\n      User: \"I want to earn yield on my usdc on base!\"\n      args: { token: 'usdc', network: 'base', sort: { field: 'apy', direction: 'desc' }, take: 5 }\n      User: \"What are some of the most profitable degen vaults on polygon\"\n      args: { network: 'polygon', sort: { field: 'apy', direction: 'desc' }, take: 5, minTvl: 0 }\n      User: \"Show me some more of those\"\n      args: { network: 'polygon', sort: { field: 'apy', direction: 'desc' }, take: 5, minTvl: 0, page: 2 }\n    `,\n        schema: schemas_1.VaultsActionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"vaults\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"deposit\",\n        description: `\n      This action deposits assets into a selected vault. Before depositing make sure you have the required assets in your wallet using the wallet-balances action.\n      Even if you received the balance from some other source, double-check the user balance.\n      Use examples:\n      User: \"Deposit 1000 USDC into the vault\"\n      actions:\n       - check wallet balance for USDC\n       - deposit USDC into the vault if balance is sufficient\n      User: \"I want more yield on my DAI\"\n      actions:\n       - check positions that the user already has for dai\n       - find high yield vaults for dai\n       - if there is a vault with higher yield available, redeem from the current vault and deposit into the new vault\n       - if users dai wasn't in a vault to begin with, deposit into the new vault\n      User: \"I want to create a diversified yield strategy\"\n      actions:\n       - check wallet balances for all assets\n       - find a couple vaults for each asset, preferably from different protocols\n       - create a diversified strategy using the users assets\n       - propose the strategy to the user before executing\n    `,\n        schema: schemas_1.depositActionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"deposit\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"redeem\",\n        description: `\n      This action redeems assets from a selected vault. Before redeeming make sure you have the required lp tokens in your wallet using the positions action.\n      Even if you received the lp tokens from some other source, double-check the amount before redeeming.\n      lp tokens aren't always 1:1 with the underlying asset, so make sure to check the amount of lp tokens you have before redeeming even if you know the amount of the underlying asset you want to redeem.\n    `,\n        schema: schemas_1.redeemActionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"redeem\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"claim_rewards\",\n        description: `\n      This action claims rewards from a selected vault.\n      assetAddress is the address of the vaults underlying token.\n      If you're not sure what vaults have rewards claimable, use the positions action.\n    `,\n        schema: schemas_1.claimActionSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"claim\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"user_wallet_balances\",\n        description: `\n    This action returns the users wallet balances of all tokens supported by vaults.fyi. Useful when you don't know token addresses but want to check if the user has an asset.\n    Example queries:\n    User: \"What tokens do I have?\"\n    User: \"What tokens do I have on Arbitrum?\"\n    User: \"Whats my balance of USDC?\"\n    `,\n        schema: zod_1.z.object({}),\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"balances\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"positions\",\n        description: `\n      This action returns the users positions in vaults.\n      Example queries:\n      User: \"Show me my positions\"\n      User: \"What vaults am i invested in?\"\n      User: \"What's my average yield?\"\n      User: \"What vaults do I have rewards in?\"\n    `,\n        schema: zod_1.z.object({}),\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider]),\n    __metadata(\"design:returntype\", Promise)\n], VaultsfyiActionProvider.prototype, \"positions\", null);\n/**\n * Factory function to create a new VaultsfyiActionProvider instance.\n *\n * @param config - Configuration options for the provider\n * @returns A new VaultsfyiActionProvider instance\n */\nconst vaultsfyiActionProvider = (config) => new VaultsfyiActionProvider(config);\nexports.vaultsfyiActionProvider = vaultsfyiActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/vaultsfyi/vaultsfyiActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wallet/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./walletActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/walletActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93YWxsZXQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL3dhbGxldC9pbmRleC5qcz85NjBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2FsbGV0QWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/schemas.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wallet/schemas.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NativeTransferSchema = exports.GetWalletDetailsSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\n/**\n * Schema for the get_wallet_details action.\n * This action doesn't require any input parameters, so we use an empty object schema.\n */\nexports.GetWalletDetailsSchema = zod_1.z.object({});\n/**\n * Input schema for native transfer action.\n */\nexports.NativeTransferSchema = zod_1.z\n    .object({\n    to: zod_1.z.string().describe(\"The destination address to receive the funds\"),\n    value: zod_1.z.string().describe(\"The amount to transfer in whole units e.g. 1 ETH or 0.00001 ETH\"),\n})\n    .strip()\n    .describe(\"Instructions for transferring native tokens\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93YWxsZXQvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRyw4QkFBOEI7QUFDN0QsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93YWxsZXQvc2NoZW1hcy5qcz8zZWE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OYXRpdmVUcmFuc2ZlclNjaGVtYSA9IGV4cG9ydHMuR2V0V2FsbGV0RGV0YWlsc1NjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbi8qKlxuICogU2NoZW1hIGZvciB0aGUgZ2V0X3dhbGxldF9kZXRhaWxzIGFjdGlvbi5cbiAqIFRoaXMgYWN0aW9uIGRvZXNuJ3QgcmVxdWlyZSBhbnkgaW5wdXQgcGFyYW1ldGVycywgc28gd2UgdXNlIGFuIGVtcHR5IG9iamVjdCBzY2hlbWEuXG4gKi9cbmV4cG9ydHMuR2V0V2FsbGV0RGV0YWlsc1NjaGVtYSA9IHpvZF8xLnoub2JqZWN0KHt9KTtcbi8qKlxuICogSW5wdXQgc2NoZW1hIGZvciBuYXRpdmUgdHJhbnNmZXIgYWN0aW9uLlxuICovXG5leHBvcnRzLk5hdGl2ZVRyYW5zZmVyU2NoZW1hID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHRvOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIGRlc3RpbmF0aW9uIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgZnVuZHNcIiksXG4gICAgdmFsdWU6IHpvZF8xLnouc3RyaW5nKCkuZGVzY3JpYmUoXCJUaGUgYW1vdW50IHRvIHRyYW5zZmVyIGluIHdob2xlIHVuaXRzIGUuZy4gMSBFVEggb3IgMC4wMDAwMSBFVEhcIiksXG59KVxuICAgIC5zdHJpcCgpXG4gICAgLmRlc2NyaWJlKFwiSW5zdHJ1Y3Rpb25zIGZvciB0cmFuc2ZlcnJpbmcgbmF0aXZlIHRva2Vuc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/walletActionProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wallet/walletActionProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.walletActionProvider = exports.WalletActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/schemas.js\");\nconst PROTOCOL_FAMILY_TO_TERMINOLOGY = {\n    evm: { unit: \"WEI\", displayUnit: \"ETH\", type: \"Transaction hash\", verb: \"transaction\" },\n    svm: { unit: \"LAMPORTS\", displayUnit: \"SOL\", type: \"Signature\", verb: \"transfer\" },\n};\nconst DEFAULT_TERMINOLOGY = { unit: \"\", displayUnit: \"\", type: \"Hash\", verb: \"transfer\" };\n/**\n * WalletActionProvider provides actions for getting basic wallet information.\n */\nclass WalletActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the WalletActionProvider.\n     */\n    constructor() {\n        super(\"wallet\", []);\n        /**\n         * Checks if the wallet action provider supports the given network.\n         * Since wallet actions are network-agnostic, this always returns true.\n         *\n         * @param _ - The network to check.\n         * @returns True, as wallet actions are supported on all networks.\n         */\n        this.supportsNetwork = (_) => true;\n    }\n    /**\n     * Gets the details of the connected wallet including address, network, and balance.\n     *\n     * @param walletProvider - The wallet provider to get the details from.\n     * @param _ - Empty args object (not used).\n     * @returns A formatted string containing the wallet details.\n     */\n    async getWalletDetails(walletProvider, _) {\n        try {\n            const address = walletProvider.getAddress();\n            const network = walletProvider.getNetwork();\n            const balance = await walletProvider.getBalance();\n            const name = walletProvider.getName();\n            const terminology = PROTOCOL_FAMILY_TO_TERMINOLOGY[network.protocolFamily] || DEFAULT_TERMINOLOGY;\n            return [\n                \"Wallet Details:\",\n                `- Provider: ${name}`,\n                `- Address: ${address}`,\n                \"- Network:\",\n                `  * Protocol Family: ${network.protocolFamily}`,\n                `  * Network ID: ${network.networkId || \"N/A\"}`,\n                `  * Chain ID: ${network.chainId || \"N/A\"}`,\n                `- Native Balance: ${balance.toString()} ${terminology.unit}`,\n            ].join(\"\\n\");\n        }\n        catch (error) {\n            return `Error getting wallet details: ${error}`;\n        }\n    }\n    /**\n     * Transfers a specified amount of native currency to a destination onchain.\n     *\n     * @param walletProvider - The wallet provider to transfer from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the transfer details.\n     */\n    async nativeTransfer(walletProvider, args) {\n        try {\n            const { protocolFamily } = walletProvider.getNetwork();\n            const terminology = PROTOCOL_FAMILY_TO_TERMINOLOGY[protocolFamily] || DEFAULT_TERMINOLOGY;\n            if (protocolFamily === \"evm\" && !args.to.startsWith(\"0x\")) {\n                args.to = `0x${args.to}`;\n            }\n            const result = await walletProvider.nativeTransfer(args.to, args.value);\n            return [\n                `Transferred ${args.value} ${terminology.displayUnit} to ${args.to}`,\n                `${terminology.type}: ${result}`,\n            ].join(\"\\n\");\n        }\n        catch (error) {\n            const { protocolFamily } = walletProvider.getNetwork();\n            const terminology = PROTOCOL_FAMILY_TO_TERMINOLOGY[protocolFamily] || DEFAULT_TERMINOLOGY;\n            return `Error during ${terminology.verb}: ${error}`;\n        }\n    }\n}\nexports.WalletActionProvider = WalletActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"get_wallet_details\",\n        description: `\n    This tool will return the details of the connected wallet including:\n    - Wallet address\n    - Network information (protocol family, network ID, chain ID)\n    - Native token balance (ETH for EVM networks, SOL for Solana networks)\n    - Wallet provider name\n    `,\n        schema: schemas_1.GetWalletDetailsSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.WalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WalletActionProvider.prototype, \"getWalletDetails\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"native_transfer\",\n        description: `\nThis tool will transfer native tokens from the wallet to another onchain address.\n\nIt takes the following inputs:\n- amount: The amount to transfer in whole units (e.g. 1 ETH, 0.1 SOL)\n- destination: The address to receive the funds\n\nImportant notes:\n- Ensure sufficient balance of the input asset before transferring\n- Ensure there is sufficient native token balance for gas fees\n`,\n        schema: schemas_1.NativeTransferSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.WalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WalletActionProvider.prototype, \"nativeTransfer\", null);\n/**\n * Factory function to create a new WalletActionProvider instance.\n *\n * @returns A new WalletActionProvider instance.\n */\nconst walletActionProvider = () => new WalletActionProvider();\nexports.walletActionProvider = walletActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wallet/walletActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/weth/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WETH_ABI = exports.WETH_ADDRESS = void 0;\nexports.WETH_ADDRESS = \"0x4200000000000000000000000000000000000006\";\nexports.WETH_ABI = [\n    {\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxvQkFBb0I7QUFDdkMsb0JBQW9CO0FBQ3BCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL3dldGgvY29uc3RhbnRzLmpzP2VjYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldFVEhfQUJJID0gZXhwb3J0cy5XRVRIX0FERFJFU1MgPSB2b2lkIDA7XG5leHBvcnRzLldFVEhfQUREUkVTUyA9IFwiMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2XCI7XG5leHBvcnRzLldFVEhfQUJJID0gW1xuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJkZXBvc2l0XCIsXG4gICAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJiYWxhbmNlT2ZcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/weth/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./wethActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/wethActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxzSEFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL2luZGV4LmpzPzY0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93ZXRoQWN0aW9uUHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/schemas.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/weth/schemas.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WrapEthSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nexports.WrapEthSchema = zod_1.z\n    .object({\n    amountToWrap: zod_1.z.string().describe(\"Amount of ETH to wrap in wei\"),\n})\n    .strip()\n    .describe(\"Instructions for wrapping ETH to WETH\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL3NjaGVtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FjdGlvbi1wcm92aWRlcnMvd2V0aC9zY2hlbWFzLmpzP2FiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldyYXBFdGhTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5leHBvcnRzLldyYXBFdGhTY2hlbWEgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgYW1vdW50VG9XcmFwOiB6b2RfMS56LnN0cmluZygpLmRlc2NyaWJlKFwiQW1vdW50IG9mIEVUSCB0byB3cmFwIGluIHdlaVwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnN0cnVjdGlvbnMgZm9yIHdyYXBwaW5nIEVUSCB0byBXRVRIXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/wethActionProvider.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/weth/wethActionProvider.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wethActionProvider = exports.WethActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/schemas.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/constants.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\n/**\n * WethActionProvider is an action provider for WETH.\n */\nclass WethActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the WethActionProvider.\n     */\n    constructor() {\n        super(\"weth\", []);\n        /**\n         * Checks if the Weth action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Weth action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.networkId === \"base-mainnet\" || network.networkId === \"base-sepolia\";\n    }\n    /**\n     * Wraps ETH to WETH.\n     *\n     * @param walletProvider - The wallet provider to use for the action.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the transaction hash.\n     */\n    async wrapEth(walletProvider, args) {\n        try {\n            const hash = await walletProvider.sendTransaction({\n                to: constants_1.WETH_ADDRESS,\n                data: (0, viem_1.encodeFunctionData)({\n                    abi: constants_1.WETH_ABI,\n                    functionName: \"deposit\",\n                }),\n                value: BigInt(args.amountToWrap),\n            });\n            await walletProvider.waitForTransactionReceipt(hash);\n            return `Wrapped ETH with transaction hash: ${hash}`;\n        }\n        catch (error) {\n            return `Error wrapping ETH: ${error}`;\n        }\n    }\n}\nexports.WethActionProvider = WethActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"wrap_eth\",\n        description: `\n    This tool can only be used to wrap ETH to WETH.\nDo not use this tool for any other purpose, or trading other assets.\n\nInputs:\n- Amount of ETH to wrap.\n\nImportant notes:\n- The amount is a string and cannot have any decimal points, since the unit of measurement is wei.\n- Make sure to use the exact amount provided, and if there's any doubt, check by getting more information before continuing with the action.\n- 1 wei = 0.000000000000000001 WETH\n- Minimum purchase amount is 100000000000000 wei (0.0000001 WETH)\n- Only supported on the following networks:\n  - Base Sepolia (ie, 'base-sepolia')\n  - Base Mainnet (ie, 'base', 'base-mainnet')\n`,\n        schema: schemas_1.WrapEthSchema,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WethActionProvider.prototype, \"wrapEth\", null);\nconst wethActionProvider = () => new WethActionProvider();\nexports.wethActionProvider = wethActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL3dldGhBY3Rpb25Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsMEJBQTBCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQyxrREFBSztBQUMzQix5QkFBeUIsbUJBQU8sQ0FBQywwR0FBbUI7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMsNEdBQW9CO0FBQ3RELGtCQUFrQixtQkFBTyxDQUFDLGdHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyxxREFBTTtBQUM3QiwyQkFBMkIsbUJBQU8sQ0FBQyxzR0FBd0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQSx5REFBeUQsS0FBSztBQUM5RDtBQUNBO0FBQ0EsMENBQTBDLE1BQU07QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93ZXRoL3dldGhBY3Rpb25Qcm92aWRlci5qcz9kNjI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2V0aEFjdGlvblByb3ZpZGVyID0gZXhwb3J0cy5XZXRoQWN0aW9uUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBhY3Rpb25Qcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL2FjdGlvblByb3ZpZGVyXCIpO1xuY29uc3QgYWN0aW9uRGVjb3JhdG9yXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9uRGVjb3JhdG9yXCIpO1xuY29uc3Qgc2NoZW1hc18xID0gcmVxdWlyZShcIi4vc2NoZW1hc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdmllbV8xID0gcmVxdWlyZShcInZpZW1cIik7XG5jb25zdCB3YWxsZXRfcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vd2FsbGV0LXByb3ZpZGVyc1wiKTtcbi8qKlxuICogV2V0aEFjdGlvblByb3ZpZGVyIGlzIGFuIGFjdGlvbiBwcm92aWRlciBmb3IgV0VUSC5cbiAqL1xuY2xhc3MgV2V0aEFjdGlvblByb3ZpZGVyIGV4dGVuZHMgYWN0aW9uUHJvdmlkZXJfMS5BY3Rpb25Qcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBXZXRoQWN0aW9uUHJvdmlkZXIuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwid2V0aFwiLCBbXSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3MgaWYgdGhlIFdldGggYWN0aW9uIHByb3ZpZGVyIHN1cHBvcnRzIHRoZSBnaXZlbiBuZXR3b3JrLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gbmV0d29yayAtIFRoZSBuZXR3b3JrIHRvIGNoZWNrLlxuICAgICAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBXZXRoIGFjdGlvbiBwcm92aWRlciBzdXBwb3J0cyB0aGUgbmV0d29yaywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdXBwb3J0c05ldHdvcmsgPSAobmV0d29yaykgPT4gbmV0d29yay5uZXR3b3JrSWQgPT09IFwiYmFzZS1tYWlubmV0XCIgfHwgbmV0d29yay5uZXR3b3JrSWQgPT09IFwiYmFzZS1zZXBvbGlhXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXBzIEVUSCB0byBXRVRILlxuICAgICAqXG4gICAgICogQHBhcmFtIHdhbGxldFByb3ZpZGVyIC0gVGhlIHdhbGxldCBwcm92aWRlciB0byB1c2UgZm9yIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgaW5wdXQgYXJndW1lbnRzIGZvciB0aGUgYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgbWVzc2FnZSBjb250YWluaW5nIHRoZSB0cmFuc2FjdGlvbiBoYXNoLlxuICAgICAqL1xuICAgIGFzeW5jIHdyYXBFdGgod2FsbGV0UHJvdmlkZXIsIGFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB3YWxsZXRQcm92aWRlci5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgICAgIHRvOiBjb25zdGFudHNfMS5XRVRIX0FERFJFU1MsXG4gICAgICAgICAgICAgICAgZGF0YTogKDAsIHZpZW1fMS5lbmNvZGVGdW5jdGlvbkRhdGEpKHtcbiAgICAgICAgICAgICAgICAgICAgYWJpOiBjb25zdGFudHNfMS5XRVRIX0FCSSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBcImRlcG9zaXRcIixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogQmlnSW50KGFyZ3MuYW1vdW50VG9XcmFwKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgd2FsbGV0UHJvdmlkZXIud2FpdEZvclRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKTtcbiAgICAgICAgICAgIHJldHVybiBgV3JhcHBlZCBFVEggd2l0aCB0cmFuc2FjdGlvbiBoYXNoOiAke2hhc2h9YDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBgRXJyb3Igd3JhcHBpbmcgRVRIOiAke2Vycm9yfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLldldGhBY3Rpb25Qcm92aWRlciA9IFdldGhBY3Rpb25Qcm92aWRlcjtcbl9fZGVjb3JhdGUoW1xuICAgICgwLCBhY3Rpb25EZWNvcmF0b3JfMS5DcmVhdGVBY3Rpb24pKHtcbiAgICAgICAgbmFtZTogXCJ3cmFwX2V0aFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFxuICAgIFRoaXMgdG9vbCBjYW4gb25seSBiZSB1c2VkIHRvIHdyYXAgRVRIIHRvIFdFVEguXG5EbyBub3QgdXNlIHRoaXMgdG9vbCBmb3IgYW55IG90aGVyIHB1cnBvc2UsIG9yIHRyYWRpbmcgb3RoZXIgYXNzZXRzLlxuXG5JbnB1dHM6XG4tIEFtb3VudCBvZiBFVEggdG8gd3JhcC5cblxuSW1wb3J0YW50IG5vdGVzOlxuLSBUaGUgYW1vdW50IGlzIGEgc3RyaW5nIGFuZCBjYW5ub3QgaGF2ZSBhbnkgZGVjaW1hbCBwb2ludHMsIHNpbmNlIHRoZSB1bml0IG9mIG1lYXN1cmVtZW50IGlzIHdlaS5cbi0gTWFrZSBzdXJlIHRvIHVzZSB0aGUgZXhhY3QgYW1vdW50IHByb3ZpZGVkLCBhbmQgaWYgdGhlcmUncyBhbnkgZG91YnQsIGNoZWNrIGJ5IGdldHRpbmcgbW9yZSBpbmZvcm1hdGlvbiBiZWZvcmUgY29udGludWluZyB3aXRoIHRoZSBhY3Rpb24uXG4tIDEgd2VpID0gMC4wMDAwMDAwMDAwMDAwMDAwMDEgV0VUSFxuLSBNaW5pbXVtIHB1cmNoYXNlIGFtb3VudCBpcyAxMDAwMDAwMDAwMDAwMDAgd2VpICgwLjAwMDAwMDEgV0VUSClcbi0gT25seSBzdXBwb3J0ZWQgb24gdGhlIGZvbGxvd2luZyBuZXR3b3JrczpcbiAgLSBCYXNlIFNlcG9saWEgKGllLCAnYmFzZS1zZXBvbGlhJylcbiAgLSBCYXNlIE1haW5uZXQgKGllLCAnYmFzZScsICdiYXNlLW1haW5uZXQnKVxuYCxcbiAgICAgICAgc2NoZW1hOiBzY2hlbWFzXzEuV3JhcEV0aFNjaGVtYSxcbiAgICB9KSxcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRnVuY3Rpb24pLFxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbd2FsbGV0X3Byb3ZpZGVyc18xLkV2bVdhbGxldFByb3ZpZGVyLCB2b2lkIDBdKSxcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnJldHVybnR5cGVcIiwgUHJvbWlzZSlcbl0sIFdldGhBY3Rpb25Qcm92aWRlci5wcm90b3R5cGUsIFwid3JhcEV0aFwiLCBudWxsKTtcbmNvbnN0IHdldGhBY3Rpb25Qcm92aWRlciA9ICgpID0+IG5ldyBXZXRoQWN0aW9uUHJvdmlkZXIoKTtcbmV4cG9ydHMud2V0aEFjdGlvblByb3ZpZGVyID0gd2V0aEFjdGlvblByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/weth/wethActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GENERIC_TOKEN_METADATA_URI = exports.ADDRESSES = exports.WOW_FACTORY_CONTRACT_ADDRESSES = exports.WOW_ABI = exports.WOW_FACTORY_ABI = exports.SUPPORTED_NETWORKS = void 0;\nexports.getFactoryAddress = getFactoryAddress;\nexports.SUPPORTED_NETWORKS = [\"base-mainnet\", \"base-sepolia\"];\nexports.WOW_FACTORY_ABI = [\n    {\n        type: \"constructor\",\n        inputs: [\n            { name: \"_tokenImplementation\", type: \"address\", internalType: \"address\" },\n            { name: \"_bondingCurve\", type: \"address\", internalType: \"address\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"UPGRADE_INTERFACE_VERSION\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"string\", internalType: \"string\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"bondingCurve\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"deploy\",\n        inputs: [\n            { name: \"_tokenCreator\", type: \"address\", internalType: \"address\" },\n            { name: \"_platformReferrer\", type: \"address\", internalType: \"address\" },\n            { name: \"_tokenURI\", type: \"string\", internalType: \"string\" },\n            { name: \"_name\", type: \"string\", internalType: \"string\" },\n            { name: \"_symbol\", type: \"string\", internalType: \"string\" },\n        ],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"implementation\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"initialize\",\n        inputs: [{ name: \"_owner\", type: \"address\", internalType: \"address\" }],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"owner\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"proxiableUUID\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"bytes32\", internalType: \"bytes32\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"renounceOwnership\",\n        inputs: [],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"tokenImplementation\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"transferOwnership\",\n        inputs: [{ name: \"newOwner\", type: \"address\", internalType: \"address\" }],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"upgradeToAndCall\",\n        inputs: [\n            { name: \"newImplementation\", type: \"address\", internalType: \"address\" },\n            { name: \"data\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"event\",\n        name: \"Initialized\",\n        inputs: [{ name: \"version\", type: \"uint64\", indexed: false, internalType: \"uint64\" }],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"OwnershipTransferred\",\n        inputs: [\n            { name: \"previousOwner\", type: \"address\", indexed: true, internalType: \"address\" },\n            { name: \"newOwner\", type: \"address\", indexed: true, internalType: \"address\" },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"Upgraded\",\n        inputs: [{ name: \"implementation\", type: \"address\", indexed: true, internalType: \"address\" }],\n        anonymous: false,\n    },\n    {\n        type: \"error\",\n        name: \"AddressEmptyCode\",\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\n    },\n    { type: \"error\", name: \"ERC1167FailedCreateClone\", inputs: [] },\n    {\n        type: \"error\",\n        name: \"ERC1967InvalidImplementation\",\n        inputs: [{ name: \"implementation\", type: \"address\", internalType: \"address\" }],\n    },\n    { type: \"error\", name: \"ERC1967NonPayable\", inputs: [] },\n    { type: \"error\", name: \"FailedInnerCall\", inputs: [] },\n    { type: \"error\", name: \"InvalidInitialization\", inputs: [] },\n    { type: \"error\", name: \"NotInitializing\", inputs: [] },\n    {\n        type: \"error\",\n        name: \"OwnableInvalidOwner\",\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        type: \"error\",\n        name: \"OwnableUnauthorizedAccount\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    { type: \"error\", name: \"ReentrancyGuardReentrantCall\", inputs: [] },\n    { type: \"error\", name: \"UUPSUnauthorizedCallContext\", inputs: [] },\n    {\n        type: \"error\",\n        name: \"UUPSUnsupportedProxiableUUID\",\n        inputs: [{ name: \"slot\", type: \"bytes32\", internalType: \"bytes32\" }],\n    },\n];\nexports.WOW_ABI = [\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_protocolFeeRecipient\", type: \"address\" },\n            { internalType: \"address\", name: \"_protocolRewards\", type: \"address\" },\n            { internalType: \"address\", name: \"_weth\", type: \"address\" },\n            { internalType: \"address\", name: \"_nonfungiblePositionManager\", type: \"address\" },\n            { internalType: \"address\", name: \"_swapRouter\", type: \"address\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"target\", type: \"address\" }],\n        name: \"AddressEmptyCode\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"AddressInsufficientBalance\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"AddressZero\", type: \"error\" },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"spender\", type: \"address\" },\n            { internalType: \"uint256\", name: \"allowance\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"needed\", type: \"uint256\" },\n        ],\n        name: \"ERC20InsufficientAllowance\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"sender\", type: \"address\" },\n            { internalType: \"uint256\", name: \"balance\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"needed\", type: \"uint256\" },\n        ],\n        name: \"ERC20InsufficientBalance\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"approver\", type: \"address\" }],\n        name: \"ERC20InvalidApprover\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"receiver\", type: \"address\" }],\n        name: \"ERC20InvalidReceiver\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"sender\", type: \"address\" }],\n        name: \"ERC20InvalidSender\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"spender\", type: \"address\" }],\n        name: \"ERC20InvalidSpender\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"EthAmountTooSmall\", type: \"error\" },\n    { inputs: [], name: \"EthTransferFailed\", type: \"error\" },\n    { inputs: [], name: \"FailedInnerCall\", type: \"error\" },\n    { inputs: [], name: \"InitialOrderSizeTooLarge\", type: \"error\" },\n    { inputs: [], name: \"InsufficientFunds\", type: \"error\" },\n    { inputs: [], name: \"InsufficientLiquidity\", type: \"error\" },\n    { inputs: [], name: \"InvalidInitialization\", type: \"error\" },\n    { inputs: [], name: \"InvalidMarketType\", type: \"error\" },\n    { inputs: [], name: \"MarketAlreadyGraduated\", type: \"error\" },\n    { inputs: [], name: \"MarketNotGraduated\", type: \"error\" },\n    { inputs: [], name: \"NotInitializing\", type: \"error\" },\n    { inputs: [], name: \"OnlyPool\", type: \"error\" },\n    { inputs: [], name: \"OnlyWeth\", type: \"error\" },\n    { inputs: [], name: \"ReentrancyGuardReentrantCall\", type: \"error\" },\n    {\n        inputs: [{ internalType: \"address\", name: \"token\", type: \"address\" }],\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"SlippageBoundsExceeded\", type: \"error\" },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"owner\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"spender\", type: \"address\" },\n            { indexed: false, internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [{ indexed: false, internalType: \"uint64\", name: \"version\", type: \"uint64\" }],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n            { indexed: false, internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"tokenAddress\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"poolAddress\", type: \"address\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalEthLiquidity\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalTokenLiquidity\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"lpPositionId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IWow.MarketType\",\n                name: \"marketType\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"WowMarketGraduated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"buyer\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"recipient\", type: \"address\" },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"orderReferrer\",\n                type: \"address\",\n            },\n            { indexed: false, internalType: \"uint256\", name: \"totalEth\", type: \"uint256\" },\n            { indexed: false, internalType: \"uint256\", name: \"ethFee\", type: \"uint256\" },\n            { indexed: false, internalType: \"uint256\", name: \"ethSold\", type: \"uint256\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"tokensBought\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"buyerTokenBalance\",\n                type: \"uint256\",\n            },\n            { indexed: false, internalType: \"string\", name: \"comment\", type: \"string\" },\n            {\n                indexed: false,\n                internalType: \"enum IWow.MarketType\",\n                name: \"marketType\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"WowTokenBuy\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"factoryAddress\",\n                type: \"address\",\n            },\n            { indexed: true, internalType: \"address\", name: \"tokenCreator\", type: \"address\" },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"platformReferrer\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"protocolFeeRecipient\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"bondingCurve\",\n                type: \"address\",\n            },\n            { indexed: false, internalType: \"string\", name: \"tokenURI\", type: \"string\" },\n            { indexed: false, internalType: \"string\", name: \"name\", type: \"string\" },\n            { indexed: false, internalType: \"string\", name: \"symbol\", type: \"string\" },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"tokenAddress\",\n                type: \"address\",\n            },\n            { indexed: false, internalType: \"address\", name: \"poolAddress\", type: \"address\" },\n        ],\n        name: \"WowTokenCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"tokenCreator\", type: \"address\" },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"platformReferrer\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"orderReferrer\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"protocolFeeRecipient\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"tokenCreatorFee\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"platformReferrerFee\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"orderReferrerFee\",\n                type: \"uint256\",\n            },\n            { indexed: false, internalType: \"uint256\", name: \"protocolFee\", type: \"uint256\" },\n        ],\n        name: \"WowTokenFees\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"seller\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"recipient\", type: \"address\" },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"orderReferrer\",\n                type: \"address\",\n            },\n            { indexed: false, internalType: \"uint256\", name: \"totalEth\", type: \"uint256\" },\n            { indexed: false, internalType: \"uint256\", name: \"ethFee\", type: \"uint256\" },\n            { indexed: false, internalType: \"uint256\", name: \"ethBought\", type: \"uint256\" },\n            { indexed: false, internalType: \"uint256\", name: \"tokensSold\", type: \"uint256\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"sellerTokenBalance\",\n                type: \"uint256\",\n            },\n            { indexed: false, internalType: \"string\", name: \"comment\", type: \"string\" },\n            {\n                indexed: false,\n                internalType: \"enum IWow.MarketType\",\n                name: \"marketType\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"WowTokenSell\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n            { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"fromTokenBalance\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"toTokenBalance\",\n                type: \"uint256\",\n            },\n            { indexed: false, internalType: \"uint256\", name: \"totalSupply\", type: \"uint256\" },\n        ],\n        name: \"WowTokenTransfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MAX_TOTAL_SUPPLY\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MIN_ORDER_SIZE\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ORDER_REFERRER_FEE_BPS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PLATFORM_REFERRER_FEE_BPS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROTOCOL_FEE_BPS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_CREATOR_FEE_BPS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOTAL_FEE_BPS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"WETH\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"owner\", type: \"address\" },\n            { internalType: \"address\", name: \"spender\", type: \"address\" },\n        ],\n        name: \"allowance\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"spender\", type: \"address\" },\n            { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n        ],\n        name: \"approve\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"bondingCurve\",\n        outputs: [{ internalType: \"contract BondingCurve\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"tokensToBurn\", type: \"uint256\" }],\n        name: \"burn\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"recipient\", type: \"address\" },\n            { internalType: \"address\", name: \"refundRecipient\", type: \"address\" },\n            { internalType: \"address\", name: \"orderReferrer\", type: \"address\" },\n            { internalType: \"string\", name: \"comment\", type: \"string\" },\n            { internalType: \"enum IWow.MarketType\", name: \"expectedMarketType\", type: \"uint8\" },\n            { internalType: \"uint256\", name: \"minOrderSize\", type: \"uint256\" },\n            { internalType: \"uint160\", name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n        ],\n        name: \"buy\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"currentExchangeRate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"ethOrderSize\", type: \"uint256\" }],\n        name: \"getEthBuyQuote\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"ethOrderSize\", type: \"uint256\" }],\n        name: \"getEthSellQuote\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"tokenOrderSize\", type: \"uint256\" }],\n        name: \"getTokenBuyQuote\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"tokenOrderSize\", type: \"uint256\" }],\n        name: \"getTokenSellQuote\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_tokenCreator\", type: \"address\" },\n            { internalType: \"address\", name: \"_platformReferrer\", type: \"address\" },\n            { internalType: \"address\", name: \"_bondingCurve\", type: \"address\" },\n            { internalType: \"string\", name: \"_tokenURI\", type: \"string\" },\n            { internalType: \"string\", name: \"_name\", type: \"string\" },\n            { internalType: \"string\", name: \"_symbol\", type: \"string\" },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"marketType\",\n        outputs: [{ internalType: \"enum IWow.MarketType\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"nonfungiblePositionManager\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"\", type: \"address\" },\n            { internalType: \"address\", name: \"\", type: \"address\" },\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"\", type: \"bytes\" },\n        ],\n        name: \"onERC721Received\",\n        outputs: [{ internalType: \"bytes4\", name: \"\", type: \"bytes4\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"platformReferrer\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"poolAddress\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"protocolFeeRecipient\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"protocolRewards\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"tokensToSell\", type: \"uint256\" },\n            { internalType: \"address\", name: \"recipient\", type: \"address\" },\n            { internalType: \"address\", name: \"orderReferrer\", type: \"address\" },\n            { internalType: \"string\", name: \"comment\", type: \"string\" },\n            { internalType: \"enum IWow.MarketType\", name: \"expectedMarketType\", type: \"uint8\" },\n            { internalType: \"uint256\", name: \"minPayoutSize\", type: \"uint256\" },\n            { internalType: \"uint160\", name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n        ],\n        name: \"sell\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"enum IWow.MarketType\", name: \"marketType\", type: \"uint8\" },\n                    { internalType: \"address\", name: \"marketAddress\", type: \"address\" },\n                ],\n                internalType: \"struct IWow.MarketState\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"swapRouter\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"tokenCreator\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"tokenURI\",\n        outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n        ],\n        name: \"transfer\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"from\", type: \"address\" },\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n        ],\n        name: \"transferFrom\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"int256\", name: \"amount0Delta\", type: \"int256\" },\n            { internalType: \"int256\", name: \"amount1Delta\", type: \"int256\" },\n            { internalType: \"bytes\", name: \"\", type: \"bytes\" },\n        ],\n        name: \"uniswapV3SwapCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n];\nexports.WOW_FACTORY_CONTRACT_ADDRESSES = {\n    \"base-sepolia\": \"0x04870e22fa217Cb16aa00501D7D5253B8838C1eA\",\n    \"base-mainnet\": \"0x997020E5F59cCB79C74D527Be492Cc610CB9fA2B\",\n};\nexports.ADDRESSES = {\n    \"base-sepolia\": {\n        WowFactory: \"0xB09c0b1b18369Ef62e896D5a49Af8d65EFa0A404\",\n        WowFactoryImpl: \"0xB522291f22FE7FA45D56797F7A685D5c637Edc32\",\n        Wow: \"0x15ba66e376856F3F6FE53dE9eeAb10dEF10E8C92\",\n        BondingCurve: \"0xCE00c75B9807A2aA87B2297cA7Dc1C0190137D6F\",\n        NonfungiblePositionManager: \"0x27F971cb582BF9E50F397e4d29a5C7A34f11faA2\",\n        SwapRouter02: \"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4\",\n        WETH: \"0x4200000000000000000000000000000000000006\",\n        UniswapQuoter: \"0xC5290058841028F1614F3A6F0F5816cAd0df5E27\",\n    },\n    \"base-mainnet\": {\n        WowFactory: \"0xA06262157905913f855573f53AD48DE2D4ba1F4A\",\n        WowFactoryImpl: \"0xe4c17055048aEe01D0d122804816fEe5E6ac4A67\",\n        Wow: \"0x293997C6a1f2A1cA3aB971f548c4D95585E46282\",\n        BondingCurve: \"0x264ece5D58A576cc775B719bf182F2946076bE78\",\n        NonfungiblePositionManager: \"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1\",\n        SwapRouter02: \"0x2626664c2603336E57B271c5C0b26F421741e481\",\n        WETH: \"0x4200000000000000000000000000000000000006\",\n        UniswapQuoter: \"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a\",\n    },\n};\nexports.GENERIC_TOKEN_METADATA_URI = \"ipfs://QmY1GqprFYvojCcUEKgqHeDj9uhZD9jmYGrQTfA9vAE78J\";\n/**\n * Gets the Zora Wow ERC20 Factory contract address for the specified network.\n *\n * @param network - The network ID to get the contract address for\n * @returns The contract address for the specified network\n * @throws Error if the specified network is not supported\n */\nfunction getFactoryAddress(network) {\n    const normalizedNetwork = network.toLowerCase();\n    if (!(normalizedNetwork in exports.WOW_FACTORY_CONTRACT_ADDRESSES)) {\n        throw new Error(`Invalid network: ${network}. Valid networks are: ${Object.keys(exports.WOW_FACTORY_CONTRACT_ADDRESSES).join(\", \")}`);\n    }\n    return exports.WOW_FACTORY_CONTRACT_ADDRESSES[normalizedNetwork];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wowActionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/wowActionProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLCtGQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxtSEFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvaW5kZXguanM/NzM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dvd0FjdGlvblByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/schemas.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/schemas.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WowSellTokenInput = exports.WowCreateTokenInput = exports.WowBuyTokenInput = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst ethereumAddress = zod_1.z.custom(val => typeof val === \"string\" && (0, viem_1.isAddress)(val), \"Invalid address\");\n/**\n * Input schema for buying WOW tokens.\n */\nexports.WowBuyTokenInput = zod_1.z\n    .object({\n    contractAddress: ethereumAddress.describe(\"The WOW token contract address\"),\n    amountEthInWei: zod_1.z\n        .string()\n        .regex(/^\\d+$/, \"Must be a valid wei amount\")\n        .describe(\"Amount of ETH to spend (in wei)\"),\n})\n    .strip()\n    .describe(\"Instructions for buying WOW tokens\");\n/**\n * Input schema for creating WOW tokens.\n */\nexports.WowCreateTokenInput = zod_1.z\n    .object({\n    name: zod_1.z.string().min(1).describe(\"The name of the token to create, e.g. WowCoin\"),\n    symbol: zod_1.z.string().min(1).describe(\"The symbol of the token to create, e.g. WOW\"),\n    tokenUri: zod_1.z\n        .string()\n        .url()\n        .optional()\n        .describe(\"The URI of the token metadata to store on IPFS, e.g. ipfs://QmY1GqprFYvojCcUEKgqHeDj9uhZD9jmYGrQTfA9vAE78J\"),\n})\n    .strip()\n    .describe(\"Instructions for creating a WOW token\");\n/**\n * Input schema for selling WOW tokens.\n */\nexports.WowSellTokenInput = zod_1.z\n    .object({\n    contractAddress: ethereumAddress.describe(\"The WOW token contract address, such as `0x036CbD53842c5426634e7929541eC2318f3dCF7e`\"),\n    amountTokensInWei: zod_1.z\n        .string()\n        .regex(/^\\d+$/, \"Must be a valid wei amount\")\n        .describe(\"Amount of tokens to sell (in wei), meaning 1 is 1 wei or 0.000000000000000001 of the token\"),\n})\n    .strip()\n    .describe(\"Instructions for selling WOW tokens\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRywyQkFBMkIsR0FBRyx3QkFBd0I7QUFDbEYsY0FBYyxtQkFBTyxDQUFDLGtEQUFLO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxxREFBTTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvc2NoZW1hcy5qcz9hNjUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xb3dTZWxsVG9rZW5JbnB1dCA9IGV4cG9ydHMuV293Q3JlYXRlVG9rZW5JbnB1dCA9IGV4cG9ydHMuV293QnV5VG9rZW5JbnB1dCA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IHZpZW1fMSA9IHJlcXVpcmUoXCJ2aWVtXCIpO1xuY29uc3QgZXRoZXJldW1BZGRyZXNzID0gem9kXzEuei5jdXN0b20odmFsID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgJiYgKDAsIHZpZW1fMS5pc0FkZHJlc3MpKHZhbCksIFwiSW52YWxpZCBhZGRyZXNzXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIGJ1eWluZyBXT1cgdG9rZW5zLlxuICovXG5leHBvcnRzLldvd0J1eVRva2VuSW5wdXQgPSB6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgY29udHJhY3RBZGRyZXNzOiBldGhlcmV1bUFkZHJlc3MuZGVzY3JpYmUoXCJUaGUgV09XIHRva2VuIGNvbnRyYWN0IGFkZHJlc3NcIiksXG4gICAgYW1vdW50RXRoSW5XZWk6IHpvZF8xLnpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXlxcZCskLywgXCJNdXN0IGJlIGEgdmFsaWQgd2VpIGFtb3VudFwiKVxuICAgICAgICAuZGVzY3JpYmUoXCJBbW91bnQgb2YgRVRIIHRvIHNwZW5kIChpbiB3ZWkpXCIpLFxufSlcbiAgICAuc3RyaXAoKVxuICAgIC5kZXNjcmliZShcIkluc3RydWN0aW9ucyBmb3IgYnV5aW5nIFdPVyB0b2tlbnNcIik7XG4vKipcbiAqIElucHV0IHNjaGVtYSBmb3IgY3JlYXRpbmcgV09XIHRva2Vucy5cbiAqL1xuZXhwb3J0cy5Xb3dDcmVhdGVUb2tlbklucHV0ID0gem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIG5hbWU6IHpvZF8xLnouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKFwiVGhlIG5hbWUgb2YgdGhlIHRva2VuIHRvIGNyZWF0ZSwgZS5nLiBXb3dDb2luXCIpLFxuICAgIHN5bWJvbDogem9kXzEuei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoXCJUaGUgc3ltYm9sIG9mIHRoZSB0b2tlbiB0byBjcmVhdGUsIGUuZy4gV09XXCIpLFxuICAgIHRva2VuVXJpOiB6b2RfMS56XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAudXJsKClcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLmRlc2NyaWJlKFwiVGhlIFVSSSBvZiB0aGUgdG9rZW4gbWV0YWRhdGEgdG8gc3RvcmUgb24gSVBGUywgZS5nLiBpcGZzOi8vUW1ZMUdxcHJGWXZvakNjVUVLZ3FIZURqOXVoWkQ5am1ZR3JRVGZBOXZBRTc4SlwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnN0cnVjdGlvbnMgZm9yIGNyZWF0aW5nIGEgV09XIHRva2VuXCIpO1xuLyoqXG4gKiBJbnB1dCBzY2hlbWEgZm9yIHNlbGxpbmcgV09XIHRva2Vucy5cbiAqL1xuZXhwb3J0cy5Xb3dTZWxsVG9rZW5JbnB1dCA9IHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICBjb250cmFjdEFkZHJlc3M6IGV0aGVyZXVtQWRkcmVzcy5kZXNjcmliZShcIlRoZSBXT1cgdG9rZW4gY29udHJhY3QgYWRkcmVzcywgc3VjaCBhcyBgMHgwMzZDYkQ1Mzg0MmM1NDI2NjM0ZTc5Mjk1NDFlQzIzMThmM2RDRjdlYFwiKSxcbiAgICBhbW91bnRUb2tlbnNJbldlaTogem9kXzEuelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eXFxkKyQvLCBcIk11c3QgYmUgYSB2YWxpZCB3ZWkgYW1vdW50XCIpXG4gICAgICAgIC5kZXNjcmliZShcIkFtb3VudCBvZiB0b2tlbnMgdG8gc2VsbCAoaW4gd2VpKSwgbWVhbmluZyAxIGlzIDEgd2VpIG9yIDAuMDAwMDAwMDAwMDAwMDAwMDAxIG9mIHRoZSB0b2tlblwiKSxcbn0pXG4gICAgLnN0cmlwKClcbiAgICAuZGVzY3JpYmUoXCJJbnN0cnVjdGlvbnMgZm9yIHNlbGxpbmcgV09XIHRva2Vuc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/constants.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/constants.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UNISWAP_V3_ABI = exports.UNISWAP_QUOTER_ABI = void 0;\nexports.UNISWAP_QUOTER_ABI = [\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n                    { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n                    { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n                    { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                    { internalType: \"uint160\", name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n                ],\n                internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactInputSingle\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n            { internalType: \"uint160\", name: \"sqrtPriceX96After\", type: \"uint160\" },\n            { internalType: \"uint32\", name: \"initializedTicksCrossed\", type: \"uint32\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n                    { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n                    { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n                    { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n                    { internalType: \"uint160\", name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n                ],\n                internalType: \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n                name: \"params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"quoteExactOutputSingle\",\n        outputs: [\n            { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n            { internalType: \"uint160\", name: \"sqrtPriceX96After\", type: \"uint160\" },\n            { internalType: \"uint32\", name: \"initializedTicksCrossed\", type: \"uint32\" },\n            { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nexports.UNISWAP_V3_ABI = [\n    {\n        inputs: [],\n        name: \"fee\",\n        outputs: [{ internalType: \"uint24\", name: \"\", type: \"uint24\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"liquidity\",\n        outputs: [{ internalType: \"uint128\", name: \"\", type: \"uint128\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"slot0\",\n        outputs: [\n            { internalType: \"uint160\", name: \"sqrtPriceX96\", type: \"uint160\" },\n            { internalType: \"int24\", name: \"tick\", type: \"int24\" },\n            { internalType: \"uint16\", name: \"observationIndex\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"observationCardinality\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"observationCardinalityNext\", type: \"uint16\" },\n            { internalType: \"uint8\", name: \"feeProtocol\", type: \"uint8\" },\n            { internalType: \"bool\", name: \"unlocked\", type: \"bool\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token0\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token1\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvdW5pc3dhcC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsMEJBQTBCO0FBQ25ELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyREFBMkQ7QUFDakYsc0JBQXNCLDREQUE0RDtBQUNsRixzQkFBc0IsNERBQTREO0FBQ2xGLHNCQUFzQixxREFBcUQ7QUFDM0Usc0JBQXNCLHFFQUFxRTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZEQUE2RDtBQUMzRSxjQUFjLHFFQUFxRTtBQUNuRixjQUFjLHlFQUF5RTtBQUN2RixjQUFjLCtEQUErRDtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkRBQTJEO0FBQ2pGLHNCQUFzQiw0REFBNEQ7QUFDbEYsc0JBQXNCLDBEQUEwRDtBQUNoRixzQkFBc0IscURBQXFEO0FBQzNFLHNCQUFzQixxRUFBcUU7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsY0FBYyw0REFBNEQ7QUFDMUUsY0FBYyxxRUFBcUU7QUFDbkYsY0FBYyx5RUFBeUU7QUFDdkYsY0FBYywrREFBK0Q7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrREFBa0Q7QUFDdEU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQW9EO0FBQ3hFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdFQUFnRTtBQUM5RSxjQUFjLG9EQUFvRDtBQUNsRSxjQUFjLGtFQUFrRTtBQUNoRixjQUFjLHdFQUF3RTtBQUN0RixjQUFjLDRFQUE0RTtBQUMxRixjQUFjLDJEQUEyRDtBQUN6RSxjQUFjLHNEQUFzRDtBQUNwRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFvRDtBQUN4RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvREFBb0Q7QUFDeEU7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hY3Rpb24tcHJvdmlkZXJzL3dvdy91bmlzd2FwL2NvbnN0YW50cy5qcz83YTgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VTklTV0FQX1YzX0FCSSA9IGV4cG9ydHMuVU5JU1dBUF9RVU9URVJfQUJJID0gdm9pZCAwO1xuZXhwb3J0cy5VTklTV0FQX1FVT1RFUl9BQkkgPSBbXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJ0b2tlbkluXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJ0b2tlbk91dFwiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwiYW1vdW50SW5cIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDI0XCIsIG5hbWU6IFwiZmVlXCIsIHR5cGU6IFwidWludDI0XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDE2MFwiLCBuYW1lOiBcInNxcnRQcmljZUxpbWl0WDk2XCIsIHR5cGU6IFwidWludDE2MFwiIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElRdW90ZXJWMi5RdW90ZUV4YWN0SW5wdXRTaW5nbGVQYXJhbXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInBhcmFtc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwicXVvdGVFeGFjdElucHV0U2luZ2xlXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIiwgbmFtZTogXCJhbW91bnRPdXRcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcInVpbnQxNjBcIiwgbmFtZTogXCJzcXJ0UHJpY2VYOTZBZnRlclwiLCB0eXBlOiBcInVpbnQxNjBcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDMyXCIsIG5hbWU6IFwiaW5pdGlhbGl6ZWRUaWNrc0Nyb3NzZWRcIiwgdHlwZTogXCJ1aW50MzJcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcImdhc0VzdGltYXRlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwidG9rZW5JblwiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwidG9rZW5PdXRcIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcImFtb3VudFwiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MjRcIiwgbmFtZTogXCJmZWVcIiwgdHlwZTogXCJ1aW50MjRcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MTYwXCIsIG5hbWU6IFwic3FydFByaWNlTGltaXRYOTZcIiwgdHlwZTogXCJ1aW50MTYwXCIgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgSVF1b3RlclYyLlF1b3RlRXhhY3RPdXRwdXRTaW5nbGVQYXJhbXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInBhcmFtc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwicXVvdGVFeGFjdE91dHB1dFNpbmdsZVwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwiYW1vdW50SW5cIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcInVpbnQxNjBcIiwgbmFtZTogXCJzcXJ0UHJpY2VYOTZBZnRlclwiLCB0eXBlOiBcInVpbnQxNjBcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDMyXCIsIG5hbWU6IFwiaW5pdGlhbGl6ZWRUaWNrc0Nyb3NzZWRcIiwgdHlwZTogXCJ1aW50MzJcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcImdhc0VzdGltYXRlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuXTtcbmV4cG9ydHMuVU5JU1dBUF9WM19BQkkgPSBbXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBuYW1lOiBcImZlZVwiLFxuICAgICAgICBvdXRwdXRzOiBbeyBpbnRlcm5hbFR5cGU6IFwidWludDI0XCIsIG5hbWU6IFwiXCIsIHR5cGU6IFwidWludDI0XCIgfV0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJsaXF1aWRpdHlcIixcbiAgICAgICAgb3V0cHV0czogW3sgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIiwgbmFtZTogXCJcIiwgdHlwZTogXCJ1aW50MTI4XCIgfV0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJzbG90MFwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MTYwXCIsIG5hbWU6IFwic3FydFByaWNlWDk2XCIsIHR5cGU6IFwidWludDE2MFwiIH0sXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJpbnQyNFwiLCBuYW1lOiBcInRpY2tcIiwgdHlwZTogXCJpbnQyNFwiIH0sXG4gICAgICAgICAgICB7IGludGVybmFsVHlwZTogXCJ1aW50MTZcIiwgbmFtZTogXCJvYnNlcnZhdGlvbkluZGV4XCIsIHR5cGU6IFwidWludDE2XCIgfSxcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcInVpbnQxNlwiLCBuYW1lOiBcIm9ic2VydmF0aW9uQ2FyZGluYWxpdHlcIiwgdHlwZTogXCJ1aW50MTZcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDE2XCIsIG5hbWU6IFwib2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRcIiwgdHlwZTogXCJ1aW50MTZcIiB9LFxuICAgICAgICAgICAgeyBpbnRlcm5hbFR5cGU6IFwidWludDhcIiwgbmFtZTogXCJmZWVQcm90b2NvbFwiLCB0eXBlOiBcInVpbnQ4XCIgfSxcbiAgICAgICAgICAgIHsgaW50ZXJuYWxUeXBlOiBcImJvb2xcIiwgbmFtZTogXCJ1bmxvY2tlZFwiLCB0eXBlOiBcImJvb2xcIiB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwidG9rZW4wXCIsXG4gICAgICAgIG91dHB1dHM6IFt7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwiXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH1dLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwidG9rZW4xXCIsXG4gICAgICAgIG91dHB1dHM6IFt7IGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwiXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH1dLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createPriceInfo = createPriceInfo;\nexports.getPoolInfo = getPoolInfo;\nexports.exactInputSingle = exactInputSingle;\nexports.getUniswapQuote = getUniswapQuote;\nexports.getHasGraduated = getHasGraduated;\nexports.getPoolAddress = getPoolAddress;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/constants.js\");\n/**\n * Creates a PriceInfo object from wei amount and ETH price.\n *\n * @param weiAmount - Amount in wei\n * @param ethPriceInUsd - Current ETH price in USD\n * @returns A PriceInfo object containing the amount in ETH and USD\n */\nfunction createPriceInfo(weiAmount, ethPriceInUsd) {\n    const amountInEth = (0, viem_1.formatEther)(BigInt(weiAmount));\n    const usd = Number(amountInEth) * ethPriceInUsd;\n    return {\n        eth: weiAmount,\n        usd,\n    };\n}\n/**\n * Gets pool info for a given uniswap v3 pool address.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param poolAddress - Uniswap v3 pool address\n * @returns A PoolInfo object containing pool details\n */\nasync function getPoolInfo(wallet, poolAddress) {\n    try {\n        const results = await Promise.all([\n            wallet.readContract({\n                address: poolAddress,\n                functionName: \"token0\",\n                args: [],\n                abi: constants_2.UNISWAP_V3_ABI,\n            }),\n            wallet.readContract({\n                address: poolAddress,\n                functionName: \"token1\",\n                args: [],\n                abi: constants_2.UNISWAP_V3_ABI,\n            }),\n            wallet.readContract({\n                address: poolAddress,\n                functionName: \"fee\",\n                args: [],\n                abi: constants_2.UNISWAP_V3_ABI,\n            }),\n            wallet.readContract({\n                address: poolAddress,\n                functionName: \"liquidity\",\n                args: [],\n                abi: constants_2.UNISWAP_V3_ABI,\n            }),\n            wallet.readContract({\n                address: poolAddress,\n                functionName: \"slot0\",\n                args: [],\n                abi: constants_2.UNISWAP_V3_ABI,\n            }),\n        ]);\n        const [token0Result, token1Result, fee, liquidity, slot0] = results;\n        const [balance0, balance1] = await Promise.all([\n            wallet.readContract({\n                address: token0Result,\n                functionName: \"balanceOf\",\n                args: [poolAddress],\n                abi: constants_1.WOW_ABI,\n            }),\n            wallet.readContract({\n                address: token1Result,\n                functionName: \"balanceOf\",\n                args: [poolAddress],\n                abi: constants_1.WOW_ABI,\n            }),\n        ]);\n        return {\n            token0: token0Result,\n            balance0: Number(balance0),\n            token1: token1Result,\n            balance1: Number(balance1),\n            fee: Number(fee),\n            liquidity: Number(liquidity),\n            sqrtPriceX96: Number(slot0[0]),\n        };\n    }\n    catch (error) {\n        throw new Error(`Failed to fetch pool information: ${error}`);\n    }\n}\n/**\n * Gets exact input quote from Uniswap.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenIn - Token address to swap from\n * @param tokenOut - Token address to swap to\n * @param amountIn - Amount of tokens to swap (in Wei)\n * @param fee - Fee for the swap\n * @returns Amount of tokens to receive (in Wei)\n */\nasync function exactInputSingle(wallet, tokenIn, tokenOut, amountIn, fee) {\n    try {\n        const networkId = wallet.getNetwork().networkId;\n        const amount = await wallet.readContract({\n            address: constants_1.ADDRESSES[networkId].UniswapQuoter,\n            functionName: \"quoteExactInputSingle\",\n            args: [\n                {\n                    tokenIn: (0, viem_1.getAddress)(tokenIn),\n                    tokenOut: (0, viem_1.getAddress)(tokenOut),\n                    fee,\n                    amountIn,\n                    sqrtPriceLimitX96: 0,\n                },\n            ],\n            abi: constants_2.UNISWAP_QUOTER_ABI,\n        });\n        return Number(amount);\n    }\n    catch (error) {\n        console.error(\"Quoter error:\", error);\n        return 0;\n    }\n}\n/**\n * Gets Uniswap quote for buying or selling tokens.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - Token address\n * @param amount - Amount of tokens (in Wei)\n * @param quoteType - 'buy' or 'sell'\n * @returns A Quote object containing quote details\n */\nasync function getUniswapQuote(wallet, tokenAddress, amount, quoteType) {\n    let pool = null;\n    let tokens = null;\n    let balances = null;\n    let quoteResult = null;\n    const utilization = 0;\n    const networkId = wallet.getNetwork().networkId;\n    const poolAddress = await getPoolAddress(wallet, tokenAddress);\n    const invalidPoolError = !poolAddress ? \"Invalid pool address\" : null;\n    try {\n        pool = await getPoolInfo(wallet, poolAddress);\n        const { token0, token1, balance0, balance1, fee } = pool;\n        tokens = [token0, token1];\n        balances = [balance0, balance1];\n        const isToken0Weth = token0.toLowerCase() === constants_1.ADDRESSES[networkId].WETH.toLowerCase();\n        const tokenIn = (quoteType === \"buy\" && isToken0Weth) || (quoteType === \"sell\" && !isToken0Weth)\n            ? token0\n            : token1;\n        const [tokenOut, balanceOut] = tokenIn === token0 ? [token1, balance1] : [token0, balance0];\n        const isInsufficientLiquidity = quoteType === \"buy\" && amount > balanceOut;\n        if (!isInsufficientLiquidity) {\n            quoteResult = await exactInputSingle(wallet, tokenIn, tokenOut, String(amount), String(fee));\n        }\n    }\n    catch (error) {\n        console.error(\"Error fetching quote:\", error);\n    }\n    const insufficientLiquidity = (quoteType === \"sell\" && pool && !quoteResult) || false;\n    let errorMsg = null;\n    if (!pool) {\n        errorMsg = \"Failed fetching pool\";\n    }\n    else if (insufficientLiquidity) {\n        errorMsg = \"Insufficient liquidity\";\n    }\n    else if (!quoteResult && utilization >= 0.9) {\n        errorMsg = \"Price impact too high\";\n    }\n    else if (!quoteResult) {\n        errorMsg = \"Failed fetching quote\";\n    }\n    const balanceResult = tokens && balances\n        ? {\n            erc20z: String(balances[tokens[0].toLowerCase() === constants_1.ADDRESSES[networkId].WETH.toLowerCase() ? 1 : 0]),\n            weth: String(balances[tokens[0].toLowerCase() === constants_1.ADDRESSES[networkId].WETH.toLowerCase() ? 0 : 1]),\n        }\n        : null;\n    return {\n        amountIn: Number(amount),\n        amountOut: quoteResult || 0,\n        balance: balanceResult,\n        fee: pool?.fee ? pool.fee / 1000000 : null,\n        error: invalidPoolError || errorMsg,\n    };\n}\n/**\n * Checks if a token has graduated from the Zora Wow protocol.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - Token address\n * @returns True if the token has graduated, false otherwise\n */\nasync function getHasGraduated(wallet, tokenAddress) {\n    const marketType = await wallet.readContract({\n        address: tokenAddress,\n        functionName: \"marketType\",\n        args: [],\n        abi: constants_1.WOW_ABI,\n    });\n    return marketType === 1;\n}\n/**\n * Fetches the uniswap v3 pool address for a given token.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - The address of the token contract\n * @returns The uniswap v3 pool address associated with the token\n */\nasync function getPoolAddress(wallet, tokenAddress) {\n    const poolAddress = await wallet.readContract({\n        address: tokenAddress,\n        functionName: \"poolAddress\",\n        args: [],\n        abi: constants_1.WOW_ABI,\n    });\n    return poolAddress;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCurrentSupply = getCurrentSupply;\nexports.getBuyQuote = getBuyQuote;\nexports.getSellQuote = getSellQuote;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./uniswap/utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/utils.js\");\n/**\n * Gets the current supply of a token.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - Address of the token contract\n * @returns The current token supply\n */\nasync function getCurrentSupply(wallet, tokenAddress) {\n    const supply = await wallet.readContract({\n        address: tokenAddress,\n        abi: constants_1.WOW_ABI,\n        functionName: \"totalSupply\",\n        args: [],\n    });\n    return supply;\n}\n/**\n * Gets quote for buying tokens.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - Address of the token contract\n * @param amountEthInWei - Amount of ETH to buy (in wei)\n * @returns The buy quote amount\n */\nasync function getBuyQuote(wallet, tokenAddress, amountEthInWei) {\n    const hasGraduated = await (0, utils_1.getHasGraduated)(wallet, tokenAddress);\n    const tokenQuote = (hasGraduated\n        ? (await (0, utils_1.getUniswapQuote)(wallet, tokenAddress, Number(amountEthInWei), \"buy\")).amountOut\n        : await wallet.readContract({\n            address: tokenAddress,\n            abi: constants_1.WOW_ABI,\n            functionName: \"getEthBuyQuote\",\n            args: [amountEthInWei],\n        }));\n    return tokenQuote.toString();\n}\n/**\n * Gets quote for selling tokens.\n *\n * @param wallet - The wallet provider to use for contract calls\n * @param tokenAddress - Address of the token contract\n * @param amountTokensInWei - Amount of tokens to sell (in wei)\n * @returns The sell quote amount\n */\nasync function getSellQuote(wallet, tokenAddress, amountTokensInWei) {\n    const hasGraduated = await (0, utils_1.getHasGraduated)(wallet, tokenAddress);\n    const tokenQuote = (hasGraduated\n        ? (await (0, utils_1.getUniswapQuote)(wallet, tokenAddress, Number(amountTokensInWei), \"sell\")).amountOut\n        : await wallet.readContract({\n            address: tokenAddress,\n            abi: constants_1.WOW_ABI,\n            functionName: \"getTokenSellQuote\",\n            args: [amountTokensInWei],\n        }));\n    return tokenQuote.toString();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQixvQkFBb0I7QUFDcEIsb0JBQW9CLG1CQUFPLENBQUMsbUdBQWE7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsMkdBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWN0aW9uLXByb3ZpZGVycy93b3cvdXRpbHMuanM/NjU5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Q3VycmVudFN1cHBseSA9IGdldEN1cnJlbnRTdXBwbHk7XG5leHBvcnRzLmdldEJ1eVF1b3RlID0gZ2V0QnV5UXVvdGU7XG5leHBvcnRzLmdldFNlbGxRdW90ZSA9IGdldFNlbGxRdW90ZTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3VuaXN3YXAvdXRpbHNcIik7XG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgc3VwcGx5IG9mIGEgdG9rZW4uXG4gKlxuICogQHBhcmFtIHdhbGxldCAtIFRoZSB3YWxsZXQgcHJvdmlkZXIgdG8gdXNlIGZvciBjb250cmFjdCBjYWxsc1xuICogQHBhcmFtIHRva2VuQWRkcmVzcyAtIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0XG4gKiBAcmV0dXJucyBUaGUgY3VycmVudCB0b2tlbiBzdXBwbHlcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudFN1cHBseSh3YWxsZXQsIHRva2VuQWRkcmVzcykge1xuICAgIGNvbnN0IHN1cHBseSA9IGF3YWl0IHdhbGxldC5yZWFkQ29udHJhY3Qoe1xuICAgICAgICBhZGRyZXNzOiB0b2tlbkFkZHJlc3MsXG4gICAgICAgIGFiaTogY29uc3RhbnRzXzEuV09XX0FCSSxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiBcInRvdGFsU3VwcGx5XCIsXG4gICAgICAgIGFyZ3M6IFtdLFxuICAgIH0pO1xuICAgIHJldHVybiBzdXBwbHk7XG59XG4vKipcbiAqIEdldHMgcXVvdGUgZm9yIGJ1eWluZyB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHdhbGxldCAtIFRoZSB3YWxsZXQgcHJvdmlkZXIgdG8gdXNlIGZvciBjb250cmFjdCBjYWxsc1xuICogQHBhcmFtIHRva2VuQWRkcmVzcyAtIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0XG4gKiBAcGFyYW0gYW1vdW50RXRoSW5XZWkgLSBBbW91bnQgb2YgRVRIIHRvIGJ1eSAoaW4gd2VpKVxuICogQHJldHVybnMgVGhlIGJ1eSBxdW90ZSBhbW91bnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QnV5UXVvdGUod2FsbGV0LCB0b2tlbkFkZHJlc3MsIGFtb3VudEV0aEluV2VpKSB7XG4gICAgY29uc3QgaGFzR3JhZHVhdGVkID0gYXdhaXQgKDAsIHV0aWxzXzEuZ2V0SGFzR3JhZHVhdGVkKSh3YWxsZXQsIHRva2VuQWRkcmVzcyk7XG4gICAgY29uc3QgdG9rZW5RdW90ZSA9IChoYXNHcmFkdWF0ZWRcbiAgICAgICAgPyAoYXdhaXQgKDAsIHV0aWxzXzEuZ2V0VW5pc3dhcFF1b3RlKSh3YWxsZXQsIHRva2VuQWRkcmVzcywgTnVtYmVyKGFtb3VudEV0aEluV2VpKSwgXCJidXlcIikpLmFtb3VudE91dFxuICAgICAgICA6IGF3YWl0IHdhbGxldC5yZWFkQ29udHJhY3Qoe1xuICAgICAgICAgICAgYWRkcmVzczogdG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgYWJpOiBjb25zdGFudHNfMS5XT1dfQUJJLFxuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBcImdldEV0aEJ1eVF1b3RlXCIsXG4gICAgICAgICAgICBhcmdzOiBbYW1vdW50RXRoSW5XZWldLFxuICAgICAgICB9KSk7XG4gICAgcmV0dXJuIHRva2VuUXVvdGUudG9TdHJpbmcoKTtcbn1cbi8qKlxuICogR2V0cyBxdW90ZSBmb3Igc2VsbGluZyB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHdhbGxldCAtIFRoZSB3YWxsZXQgcHJvdmlkZXIgdG8gdXNlIGZvciBjb250cmFjdCBjYWxsc1xuICogQHBhcmFtIHRva2VuQWRkcmVzcyAtIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0XG4gKiBAcGFyYW0gYW1vdW50VG9rZW5zSW5XZWkgLSBBbW91bnQgb2YgdG9rZW5zIHRvIHNlbGwgKGluIHdlaSlcbiAqIEByZXR1cm5zIFRoZSBzZWxsIHF1b3RlIGFtb3VudFxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTZWxsUXVvdGUod2FsbGV0LCB0b2tlbkFkZHJlc3MsIGFtb3VudFRva2Vuc0luV2VpKSB7XG4gICAgY29uc3QgaGFzR3JhZHVhdGVkID0gYXdhaXQgKDAsIHV0aWxzXzEuZ2V0SGFzR3JhZHVhdGVkKSh3YWxsZXQsIHRva2VuQWRkcmVzcyk7XG4gICAgY29uc3QgdG9rZW5RdW90ZSA9IChoYXNHcmFkdWF0ZWRcbiAgICAgICAgPyAoYXdhaXQgKDAsIHV0aWxzXzEuZ2V0VW5pc3dhcFF1b3RlKSh3YWxsZXQsIHRva2VuQWRkcmVzcywgTnVtYmVyKGFtb3VudFRva2Vuc0luV2VpKSwgXCJzZWxsXCIpKS5hbW91bnRPdXRcbiAgICAgICAgOiBhd2FpdCB3YWxsZXQucmVhZENvbnRyYWN0KHtcbiAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgIGFiaTogY29uc3RhbnRzXzEuV09XX0FCSSxcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogXCJnZXRUb2tlblNlbGxRdW90ZVwiLFxuICAgICAgICAgICAgYXJnczogW2Ftb3VudFRva2Vuc0luV2VpXSxcbiAgICAgICAgfSkpO1xuICAgIHJldHVybiB0b2tlblF1b3RlLnRvU3RyaW5nKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/wowActionProvider.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/action-providers/wow/wowActionProvider.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wowActionProvider = exports.WowActionProvider = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst actionProvider_1 = __webpack_require__(/*! ../actionProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionProvider.js\");\nconst wallet_providers_1 = __webpack_require__(/*! ../../wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst actionDecorator_1 = __webpack_require__(/*! ../actionDecorator */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/actionDecorator.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/utils.js\");\nconst utils_2 = __webpack_require__(/*! ./uniswap/utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/uniswap/utils.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst schemas_1 = __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/schemas.js\");\n/**\n * WowActionProvider is an action provider for Wow protocol interactions.\n */\nclass WowActionProvider extends actionProvider_1.ActionProvider {\n    /**\n     * Constructor for the WowActionProvider class.\n     */\n    constructor() {\n        super(\"wow\", []);\n        /**\n         * Checks if the Wow action provider supports the given network.\n         *\n         * @param network - The network to check.\n         * @returns True if the Wow action provider supports the network, false otherwise.\n         */\n        this.supportsNetwork = (network) => network.protocolFamily === \"evm\" && constants_1.SUPPORTED_NETWORKS.includes(network.networkId);\n    }\n    /**\n     * Buys a Zora Wow ERC20 memecoin with ETH.\n     *\n     * @param walletProvider - The wallet to create the token from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the token purchase details.\n     */\n    async buyToken(walletProvider, args) {\n        try {\n            const tokenQuote = await (0, utils_1.getBuyQuote)(walletProvider, args.contractAddress, args.amountEthInWei);\n            // Multiply by 99/100 and floor to get 99% of quote as minimum\n            const minTokens = BigInt(Math.floor(Number(tokenQuote) * 99)) / BigInt(100);\n            const hasGraduated = await (0, utils_2.getHasGraduated)(walletProvider, args.contractAddress);\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.WOW_ABI,\n                functionName: \"buy\",\n                args: [\n                    walletProvider.getAddress(),\n                    walletProvider.getAddress(),\n                    \"0x0000000000000000000000000000000000000000\",\n                    \"\",\n                    hasGraduated ? 1n : 0n,\n                    minTokens,\n                    0n,\n                ],\n            });\n            const txHash = await walletProvider.sendTransaction({\n                to: args.contractAddress,\n                data,\n                value: BigInt(args.amountEthInWei),\n            });\n            await walletProvider.waitForTransactionReceipt(txHash);\n            return `Purchased WoW ERC20 memecoin with transaction hash: ${txHash}`;\n        }\n        catch (error) {\n            return `Error buying Zora Wow ERC20 memecoin: ${error}`;\n        }\n    }\n    /**\n     * Creates a Zora Wow ERC20 memecoin.\n     *\n     * @param wallet - The wallet to create the token from.\n     * @param args - The input arguments for the action.\n     * @returns A message containing the token creation details.\n     */\n    async createToken(wallet, args) {\n        const factoryAddress = (0, constants_1.getFactoryAddress)(wallet.getNetwork().networkId);\n        try {\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.WOW_FACTORY_ABI,\n                functionName: \"deploy\",\n                args: [\n                    wallet.getAddress(),\n                    \"0x0000000000000000000000000000000000000000\",\n                    args.tokenUri || constants_1.GENERIC_TOKEN_METADATA_URI,\n                    args.name,\n                    args.symbol,\n                ],\n            });\n            const txHash = await wallet.sendTransaction({\n                to: factoryAddress,\n                data,\n            });\n            await wallet.waitForTransactionReceipt(txHash);\n            return `Created WoW ERC20 memecoin ${args.name} with symbol ${args.symbol} on network ${wallet.getNetwork().networkId}.\\nTransaction hash: ${txHash}`;\n        }\n        catch (error) {\n            return `Error creating Zora Wow ERC20 memecoin: ${error}`;\n        }\n    }\n    /**\n     * Sells WOW tokens for ETH.\n     *\n     * @param walletProvider - The wallet to sell the tokens from.\n     * @param args - The input arguments for the action.\n     * @returns A message confirming the sale with the transaction hash.\n     */\n    async sellToken(walletProvider, args) {\n        try {\n            const ethQuote = await (0, utils_1.getSellQuote)(walletProvider, args.contractAddress, args.amountTokensInWei);\n            const hasGraduated = await (0, utils_2.getHasGraduated)(walletProvider, args.contractAddress);\n            // Multiply by 98/100 and floor to get 98% of quote as minimum\n            const minEth = BigInt(Math.floor(Number(ethQuote) * 98)) / BigInt(100);\n            const data = (0, viem_1.encodeFunctionData)({\n                abi: constants_1.WOW_ABI,\n                functionName: \"sell\",\n                args: [\n                    BigInt(args.amountTokensInWei),\n                    walletProvider.getAddress(),\n                    \"0x0000000000000000000000000000000000000000\",\n                    \"\",\n                    hasGraduated ? 1n : 0n,\n                    minEth,\n                    0n,\n                ],\n            });\n            const txHash = await walletProvider.sendTransaction({\n                to: args.contractAddress,\n                data,\n            });\n            await walletProvider.waitForTransactionReceipt(txHash);\n            return `Sold WoW ERC20 memecoin with transaction hash: ${txHash}`;\n        }\n        catch (error) {\n            return `Error selling Zora Wow ERC20 memecoin: ${error}`;\n        }\n    }\n}\nexports.WowActionProvider = WowActionProvider;\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"buy_token\",\n        description: `\nThis tool can only be used to buy a Zora Wow ERC20 memecoin (also can be referred to as a bonding curve token) with ETH.\nDo not use this tool for any other purpose, or trading other assets.\n\nInputs:\n- WOW token contract address\n- Address to receive the tokens  \n- Amount of ETH to spend (in wei)\n\nImportant notes:\n- The amount is a string and cannot have any decimal points, since the unit of measurement is wei.\n- Make sure to use the exact amount provided, and if there's any doubt, check by getting more information before continuing with the action. \n- 1 wei = 0.000000000000000001 ETH\n- Minimum purchase amount is 100000000000000 wei (0.0000001 ETH)\n- Only supported on the following networks:\n  - Base Sepolia (ie, 'base-sepolia')\n  - Base Mainnet (ie, 'base', 'base-mainnet')`,\n        schema: schemas_1.WowBuyTokenInput,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WowActionProvider.prototype, \"buyToken\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"create_token\",\n        description: `\nThis tool can only be used to create a Zora Wow ERC20 memecoin (also can be referred to as a bonding curve token) using the WoW factory.\nDo not use this tool for any other purpose, or for creating other types of tokens.\n\nInputs:\n- Token name (e.g. WowCoin)\n- Token symbol (e.g. WOW) \n- Token URI (optional) - Contains metadata about the token\n\nImportant notes:\n- Uses a bonding curve - no upfront liquidity needed\n- Only supported on the following networks:\n  - Base Sepolia (ie, 'base-sepolia')\n  - Base Mainnet (ie, 'base', 'base-mainnet')`,\n        schema: schemas_1.WowCreateTokenInput,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WowActionProvider.prototype, \"createToken\", null);\n__decorate([\n    (0, actionDecorator_1.CreateAction)({\n        name: \"sell_token\",\n        description: `\nThis tool can only be used to sell a Zora Wow ERC20 memecoin (also can be referred to as a bonding curve token) for ETH.\nDo not use this tool for any other purpose, or trading other assets.\n\nInputs:\n- WOW token contract address\n- Amount of tokens to sell (in wei)\n\nImportant notes:\n- The amount is a string and cannot have any decimal points, since the unit of measurement is wei.\n- Make sure to use the exact amount provided, and if there's any doubt, check by getting more information before continuing with the action. \n- 1 wei = 0.000000000000000001 ETH\n- Minimum purchase amount is 100000000000000 wei (0.0000001 ETH)\n- Only supported on the following networks:\n  - Base Sepolia (ie, 'base-sepolia')\n  - Base Mainnet (ie, 'base', 'base-mainnet')`,\n        schema: schemas_1.WowSellTokenInput,\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [wallet_providers_1.EvmWalletProvider, void 0]),\n    __metadata(\"design:returntype\", Promise)\n], WowActionProvider.prototype, \"sellToken\", null);\nconst wowActionProvider = () => new WowActionProvider();\nexports.wowActionProvider = wowActionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/wow/wowActionProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/agentkit.js":
/*!**********************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/agentkit.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AgentKit = void 0;\nconst wallet_providers_1 = __webpack_require__(/*! ./wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\");\nconst action_providers_1 = __webpack_require__(/*! ./action-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/index.js\");\n/**\n * AgentKit\n */\nclass AgentKit {\n    /**\n     * Initializes a new AgentKit instance\n     *\n     * @param config - Configuration options for the AgentKit\n     * @param config.walletProvider - The wallet provider to use\n     * @param config.actionProviders - The action providers to use\n     * @param config.actions - The actions to use\n     */\n    constructor(config) {\n        this.walletProvider = config.walletProvider;\n        this.actionProviders = config.actionProviders || [(0, action_providers_1.walletActionProvider)()];\n    }\n    /**\n     * Initializes a new AgentKit instance\n     *\n     * @param config - Configuration options for the AgentKit\n     * @param config.walletProvider - The wallet provider to use\n     * @param config.actionProviders - The action providers to use\n     * @param config.actions - The actions to use\n     *\n     * @returns A new AgentKit instance\n     */\n    static async from(config = { actionProviders: [(0, action_providers_1.walletActionProvider)()] }) {\n        let walletProvider = config.walletProvider;\n        if (!config.walletProvider) {\n            if (!config.cdpApiKeyName || !config.cdpApiKeyPrivateKey) {\n                throw new Error(\"cdpApiKeyName and cdpApiKeyPrivateKey are required if not providing a walletProvider\");\n            }\n            walletProvider = await wallet_providers_1.CdpWalletProvider.configureWithWallet({\n                apiKeyName: config.cdpApiKeyName,\n                apiKeyPrivateKey: config.cdpApiKeyPrivateKey,\n            });\n        }\n        return new AgentKit({ ...config, walletProvider: walletProvider });\n    }\n    /**\n     * Returns the actions available to the AgentKit.\n     *\n     * @returns An array of actions\n     */\n    getActions() {\n        const actions = [];\n        const unsupported = [];\n        for (const actionProvider of this.actionProviders) {\n            if (actionProvider.supportsNetwork(this.walletProvider.getNetwork())) {\n                actions.push(...actionProvider.getActions(this.walletProvider));\n            }\n            else {\n                unsupported.push(actionProvider.name);\n            }\n        }\n        if (unsupported.length > 0) {\n            console.log(`Warning: The following action providers are not supported on the current network and will be unavailable: ${unsupported.join(\", \")}`);\n            console.log(\"Current network:\", this.walletProvider.getNetwork());\n        }\n        return actions;\n    }\n}\nexports.AgentKit = AgentKit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYWdlbnRraXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLDJCQUEyQixtQkFBTyxDQUFDLGtHQUFvQjtBQUN2RCwyQkFBMkIsbUJBQU8sQ0FBQyxrR0FBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtRUFBbUU7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhCQUE4QiwyQ0FBMkM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUlBQXFJLHVCQUF1QjtBQUM1SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L2FnZW50a2l0LmpzP2QzMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFnZW50S2l0ID0gdm9pZCAwO1xuY29uc3Qgd2FsbGV0X3Byb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vd2FsbGV0LXByb3ZpZGVyc1wiKTtcbmNvbnN0IGFjdGlvbl9wcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuL2FjdGlvbi1wcm92aWRlcnNcIik7XG4vKipcbiAqIEFnZW50S2l0XG4gKi9cbmNsYXNzIEFnZW50S2l0IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBBZ2VudEtpdCBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEFnZW50S2l0XG4gICAgICogQHBhcmFtIGNvbmZpZy53YWxsZXRQcm92aWRlciAtIFRoZSB3YWxsZXQgcHJvdmlkZXIgdG8gdXNlXG4gICAgICogQHBhcmFtIGNvbmZpZy5hY3Rpb25Qcm92aWRlcnMgLSBUaGUgYWN0aW9uIHByb3ZpZGVycyB0byB1c2VcbiAgICAgKiBAcGFyYW0gY29uZmlnLmFjdGlvbnMgLSBUaGUgYWN0aW9ucyB0byB1c2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy53YWxsZXRQcm92aWRlciA9IGNvbmZpZy53YWxsZXRQcm92aWRlcjtcbiAgICAgICAgdGhpcy5hY3Rpb25Qcm92aWRlcnMgPSBjb25maWcuYWN0aW9uUHJvdmlkZXJzIHx8IFsoMCwgYWN0aW9uX3Byb3ZpZGVyc18xLndhbGxldEFjdGlvblByb3ZpZGVyKSgpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgQWdlbnRLaXQgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWcgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBBZ2VudEtpdFxuICAgICAqIEBwYXJhbSBjb25maWcud2FsbGV0UHJvdmlkZXIgLSBUaGUgd2FsbGV0IHByb3ZpZGVyIHRvIHVzZVxuICAgICAqIEBwYXJhbSBjb25maWcuYWN0aW9uUHJvdmlkZXJzIC0gVGhlIGFjdGlvbiBwcm92aWRlcnMgdG8gdXNlXG4gICAgICogQHBhcmFtIGNvbmZpZy5hY3Rpb25zIC0gVGhlIGFjdGlvbnMgdG8gdXNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIG5ldyBBZ2VudEtpdCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tKGNvbmZpZyA9IHsgYWN0aW9uUHJvdmlkZXJzOiBbKDAsIGFjdGlvbl9wcm92aWRlcnNfMS53YWxsZXRBY3Rpb25Qcm92aWRlcikoKV0gfSkge1xuICAgICAgICBsZXQgd2FsbGV0UHJvdmlkZXIgPSBjb25maWcud2FsbGV0UHJvdmlkZXI7XG4gICAgICAgIGlmICghY29uZmlnLndhbGxldFByb3ZpZGVyKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5jZHBBcGlLZXlOYW1lIHx8ICFjb25maWcuY2RwQXBpS2V5UHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNkcEFwaUtleU5hbWUgYW5kIGNkcEFwaUtleVByaXZhdGVLZXkgYXJlIHJlcXVpcmVkIGlmIG5vdCBwcm92aWRpbmcgYSB3YWxsZXRQcm92aWRlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhbGxldFByb3ZpZGVyID0gYXdhaXQgd2FsbGV0X3Byb3ZpZGVyc18xLkNkcFdhbGxldFByb3ZpZGVyLmNvbmZpZ3VyZVdpdGhXYWxsZXQoe1xuICAgICAgICAgICAgICAgIGFwaUtleU5hbWU6IGNvbmZpZy5jZHBBcGlLZXlOYW1lLFxuICAgICAgICAgICAgICAgIGFwaUtleVByaXZhdGVLZXk6IGNvbmZpZy5jZHBBcGlLZXlQcml2YXRlS2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBZ2VudEtpdCh7IC4uLmNvbmZpZywgd2FsbGV0UHJvdmlkZXI6IHdhbGxldFByb3ZpZGVyIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhY3Rpb25zIGF2YWlsYWJsZSB0byB0aGUgQWdlbnRLaXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBhY3Rpb25zXG4gICAgICovXG4gICAgZ2V0QWN0aW9ucygpIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCB1bnN1cHBvcnRlZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGFjdGlvblByb3ZpZGVyIG9mIHRoaXMuYWN0aW9uUHJvdmlkZXJzKSB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uUHJvdmlkZXIuc3VwcG9ydHNOZXR3b3JrKHRoaXMud2FsbGV0UHJvdmlkZXIuZ2V0TmV0d29yaygpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCguLi5hY3Rpb25Qcm92aWRlci5nZXRBY3Rpb25zKHRoaXMud2FsbGV0UHJvdmlkZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuc3VwcG9ydGVkLnB1c2goYWN0aW9uUHJvdmlkZXIubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuc3VwcG9ydGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBXYXJuaW5nOiBUaGUgZm9sbG93aW5nIGFjdGlvbiBwcm92aWRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gdGhlIGN1cnJlbnQgbmV0d29yayBhbmQgd2lsbCBiZSB1bmF2YWlsYWJsZTogJHt1bnN1cHBvcnRlZC5qb2luKFwiLCBcIil9YCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkN1cnJlbnQgbmV0d29yazpcIiwgdGhpcy53YWxsZXRQcm92aWRlci5nZXROZXR3b3JrKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQWdlbnRLaXQgPSBBZ2VudEtpdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/agentkit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/analytics/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./sendAnalyticsEvent */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/sendAnalyticsEvent.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYW5hbHl0aWNzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywwR0FBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYW5hbHl0aWNzL2luZGV4LmpzP2RiOWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zZW5kQW5hbHl0aWNzRXZlbnRcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/sendAnalyticsEvent.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/analytics/sendAnalyticsEvent.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sendAnalyticsEvent = sendAnalyticsEvent;\nconst md5_1 = __importDefault(__webpack_require__(/*! md5 */ \"(rsc)/./node_modules/md5/md5.js\"));\n/**\n * Sends an analytics event to the default endpoint\n *\n * @param event - The event data containing required action, component and name fields\n * @returns Promise that resolves when the event is sent\n */\nasync function sendAnalyticsEvent(event) {\n    const timestamp = event.timestamp || Date.now();\n    // Prepare the event with required fields\n    const enhancedEvent = {\n        event_type: event.name,\n        platform: \"server\",\n        event_properties: {\n            component_type: event.component,\n            platform: \"server\",\n            project_name: \"agentkit\",\n            time_start: timestamp,\n            agentkit_language: \"typescript\",\n            ...event,\n        },\n    };\n    const events = [enhancedEvent];\n    const stringifiedEventData = JSON.stringify(events);\n    const uploadTime = timestamp.toString();\n    // Calculate checksum inline\n    const checksum = (0, md5_1.default)(stringifiedEventData + uploadTime);\n    const analyticsServiceData = {\n        e: stringifiedEventData,\n        checksum,\n    };\n    const apiEndpoint = \"https://cca-lite.coinbase.com\";\n    const eventPath = \"/amp\";\n    const eventEndPoint = `${apiEndpoint}${eventPath}`;\n    const response = await fetch(eventEndPoint, {\n        method: \"POST\",\n        mode: \"no-cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(analyticsServiceData),\n    });\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvYW5hbHl0aWNzL3NlbmRBbmFseXRpY3NFdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQiw4QkFBOEIsbUJBQU8sQ0FBQyw0Q0FBSztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsWUFBWSxFQUFFLFVBQVU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLCtDQUErQyxnQkFBZ0I7QUFDL0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9hbmFseXRpY3Mvc2VuZEFuYWx5dGljc0V2ZW50LmpzP2RmMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlbmRBbmFseXRpY3NFdmVudCA9IHNlbmRBbmFseXRpY3NFdmVudDtcbmNvbnN0IG1kNV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtZDVcIikpO1xuLyoqXG4gKiBTZW5kcyBhbiBhbmFseXRpY3MgZXZlbnQgdG8gdGhlIGRlZmF1bHQgZW5kcG9pbnRcbiAqXG4gKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgZGF0YSBjb250YWluaW5nIHJlcXVpcmVkIGFjdGlvbiwgY29tcG9uZW50IGFuZCBuYW1lIGZpZWxkc1xuICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGV2ZW50IGlzIHNlbnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2VuZEFuYWx5dGljc0V2ZW50KGV2ZW50KSB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gZXZlbnQudGltZXN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgLy8gUHJlcGFyZSB0aGUgZXZlbnQgd2l0aCByZXF1aXJlZCBmaWVsZHNcbiAgICBjb25zdCBlbmhhbmNlZEV2ZW50ID0ge1xuICAgICAgICBldmVudF90eXBlOiBldmVudC5uYW1lLFxuICAgICAgICBwbGF0Zm9ybTogXCJzZXJ2ZXJcIixcbiAgICAgICAgZXZlbnRfcHJvcGVydGllczoge1xuICAgICAgICAgICAgY29tcG9uZW50X3R5cGU6IGV2ZW50LmNvbXBvbmVudCxcbiAgICAgICAgICAgIHBsYXRmb3JtOiBcInNlcnZlclwiLFxuICAgICAgICAgICAgcHJvamVjdF9uYW1lOiBcImFnZW50a2l0XCIsXG4gICAgICAgICAgICB0aW1lX3N0YXJ0OiB0aW1lc3RhbXAsXG4gICAgICAgICAgICBhZ2VudGtpdF9sYW5ndWFnZTogXCJ0eXBlc2NyaXB0XCIsXG4gICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGV2ZW50cyA9IFtlbmhhbmNlZEV2ZW50XTtcbiAgICBjb25zdCBzdHJpbmdpZmllZEV2ZW50RGF0YSA9IEpTT04uc3RyaW5naWZ5KGV2ZW50cyk7XG4gICAgY29uc3QgdXBsb2FkVGltZSA9IHRpbWVzdGFtcC50b1N0cmluZygpO1xuICAgIC8vIENhbGN1bGF0ZSBjaGVja3N1bSBpbmxpbmVcbiAgICBjb25zdCBjaGVja3N1bSA9ICgwLCBtZDVfMS5kZWZhdWx0KShzdHJpbmdpZmllZEV2ZW50RGF0YSArIHVwbG9hZFRpbWUpO1xuICAgIGNvbnN0IGFuYWx5dGljc1NlcnZpY2VEYXRhID0ge1xuICAgICAgICBlOiBzdHJpbmdpZmllZEV2ZW50RGF0YSxcbiAgICAgICAgY2hlY2tzdW0sXG4gICAgfTtcbiAgICBjb25zdCBhcGlFbmRwb2ludCA9IFwiaHR0cHM6Ly9jY2EtbGl0ZS5jb2luYmFzZS5jb21cIjtcbiAgICBjb25zdCBldmVudFBhdGggPSBcIi9hbXBcIjtcbiAgICBjb25zdCBldmVudEVuZFBvaW50ID0gYCR7YXBpRW5kcG9pbnR9JHtldmVudFBhdGh9YDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGV2ZW50RW5kUG9pbnQsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgbW9kZTogXCJuby1jb3JzXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShhbmFseXRpY3NTZXJ2aWNlRGF0YSksXG4gICAgfSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/sendAnalyticsEvent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./agentkit */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/agentkit.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./action-providers */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/action-providers/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxrR0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLGtHQUFvQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMsZ0ZBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvaW5kZXguanM/MWIxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FnZW50a2l0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93YWxsZXQtcHJvdmlkZXJzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY3Rpb24tcHJvdmlkZXJzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZXR3b3JrXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/network/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\"), exports);\n__exportStar(__webpack_require__(/*! ./svm */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/svm.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvbmV0d29yay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsa0ZBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLDBFQUFPO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyw4RUFBUyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9uZXR3b3JrL2luZGV4LmpzPzIyOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZXR3b3JrXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdm1cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/network/network.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getChain = exports.NETWORK_ID_TO_VIEM_CHAIN = exports.NETWORK_ID_TO_CHAIN_ID = exports.CHAIN_ID_TO_NETWORK_ID = void 0;\nconst chains_1 = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nconst chains = __importStar(__webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\"));\n/**\n * Maps EVM chain IDs to Coinbase network IDs\n */\nexports.CHAIN_ID_TO_NETWORK_ID = {\n    1: \"ethereum-mainnet\",\n    11155111: \"ethereum-sepolia\",\n    137: \"polygon-mainnet\",\n    80001: \"polygon-mumbai\",\n    8453: \"base-mainnet\",\n    84532: \"base-sepolia\",\n    42161: \"arbitrum-mainnet\",\n    421614: \"arbitrum-sepolia\",\n    10: \"optimism-mainnet\",\n    11155420: \"optimism-sepolia\",\n};\n/**\n * Maps Coinbase network IDs to EVM chain IDs\n */\nexports.NETWORK_ID_TO_CHAIN_ID = Object.entries(exports.CHAIN_ID_TO_NETWORK_ID).reduce((acc, [chainId, networkId]) => {\n    acc[networkId] = String(chainId);\n    return acc;\n}, {});\n/**\n * Maps Coinbase network IDs to Viem chain objects\n */\nexports.NETWORK_ID_TO_VIEM_CHAIN = {\n    \"ethereum-mainnet\": chains_1.mainnet,\n    \"ethereum-sepolia\": chains_1.sepolia,\n    \"polygon-mainnet\": chains_1.polygon,\n    \"polygon-mumbai\": chains_1.polygonMumbai,\n    \"base-mainnet\": chains_1.base,\n    \"base-sepolia\": chains_1.baseSepolia,\n    \"arbitrum-mainnet\": chains_1.arbitrum,\n    \"arbitrum-sepolia\": chains_1.arbitrumSepolia,\n    \"optimism-mainnet\": chains_1.optimism,\n    \"optimism-sepolia\": chains_1.optimismSepolia,\n};\n/**\n * Get a chain from the viem chains object\n *\n * @param id - The chain ID\n * @returns The chain\n */\nconst getChain = (id) => {\n    const chainList = Object.values(chains);\n    return chainList.find(chain => chain.id === parseInt(id));\n};\nexports.getChain = getChain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvbmV0d29yay9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsY0FBYztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLGdDQUFnQyxHQUFHLDhCQUE4QixHQUFHLDhCQUE4QjtBQUNySCxpQkFBaUIsbUJBQU8sQ0FBQyxtRUFBYTtBQUN0Qyw0QkFBNEIsbUJBQU8sQ0FBQyxtRUFBYTtBQUNqRDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsQ0FBQyxJQUFJO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9uZXR3b3JrL25ldHdvcmsuanM/NmMxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDaGFpbiA9IGV4cG9ydHMuTkVUV09SS19JRF9UT19WSUVNX0NIQUlOID0gZXhwb3J0cy5ORVRXT1JLX0lEX1RPX0NIQUlOX0lEID0gZXhwb3J0cy5DSEFJTl9JRF9UT19ORVRXT1JLX0lEID0gdm9pZCAwO1xuY29uc3QgY2hhaW5zXzEgPSByZXF1aXJlKFwidmllbS9jaGFpbnNcIik7XG5jb25zdCBjaGFpbnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInZpZW0vY2hhaW5zXCIpKTtcbi8qKlxuICogTWFwcyBFVk0gY2hhaW4gSURzIHRvIENvaW5iYXNlIG5ldHdvcmsgSURzXG4gKi9cbmV4cG9ydHMuQ0hBSU5fSURfVE9fTkVUV09SS19JRCA9IHtcbiAgICAxOiBcImV0aGVyZXVtLW1haW5uZXRcIixcbiAgICAxMTE1NTExMTogXCJldGhlcmV1bS1zZXBvbGlhXCIsXG4gICAgMTM3OiBcInBvbHlnb24tbWFpbm5ldFwiLFxuICAgIDgwMDAxOiBcInBvbHlnb24tbXVtYmFpXCIsXG4gICAgODQ1MzogXCJiYXNlLW1haW5uZXRcIixcbiAgICA4NDUzMjogXCJiYXNlLXNlcG9saWFcIixcbiAgICA0MjE2MTogXCJhcmJpdHJ1bS1tYWlubmV0XCIsXG4gICAgNDIxNjE0OiBcImFyYml0cnVtLXNlcG9saWFcIixcbiAgICAxMDogXCJvcHRpbWlzbS1tYWlubmV0XCIsXG4gICAgMTExNTU0MjA6IFwib3B0aW1pc20tc2Vwb2xpYVwiLFxufTtcbi8qKlxuICogTWFwcyBDb2luYmFzZSBuZXR3b3JrIElEcyB0byBFVk0gY2hhaW4gSURzXG4gKi9cbmV4cG9ydHMuTkVUV09SS19JRF9UT19DSEFJTl9JRCA9IE9iamVjdC5lbnRyaWVzKGV4cG9ydHMuQ0hBSU5fSURfVE9fTkVUV09SS19JRCkucmVkdWNlKChhY2MsIFtjaGFpbklkLCBuZXR3b3JrSWRdKSA9PiB7XG4gICAgYWNjW25ldHdvcmtJZF0gPSBTdHJpbmcoY2hhaW5JZCk7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbi8qKlxuICogTWFwcyBDb2luYmFzZSBuZXR3b3JrIElEcyB0byBWaWVtIGNoYWluIG9iamVjdHNcbiAqL1xuZXhwb3J0cy5ORVRXT1JLX0lEX1RPX1ZJRU1fQ0hBSU4gPSB7XG4gICAgXCJldGhlcmV1bS1tYWlubmV0XCI6IGNoYWluc18xLm1haW5uZXQsXG4gICAgXCJldGhlcmV1bS1zZXBvbGlhXCI6IGNoYWluc18xLnNlcG9saWEsXG4gICAgXCJwb2x5Z29uLW1haW5uZXRcIjogY2hhaW5zXzEucG9seWdvbixcbiAgICBcInBvbHlnb24tbXVtYmFpXCI6IGNoYWluc18xLnBvbHlnb25NdW1iYWksXG4gICAgXCJiYXNlLW1haW5uZXRcIjogY2hhaW5zXzEuYmFzZSxcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBjaGFpbnNfMS5iYXNlU2Vwb2xpYSxcbiAgICBcImFyYml0cnVtLW1haW5uZXRcIjogY2hhaW5zXzEuYXJiaXRydW0sXG4gICAgXCJhcmJpdHJ1bS1zZXBvbGlhXCI6IGNoYWluc18xLmFyYml0cnVtU2Vwb2xpYSxcbiAgICBcIm9wdGltaXNtLW1haW5uZXRcIjogY2hhaW5zXzEub3B0aW1pc20sXG4gICAgXCJvcHRpbWlzbS1zZXBvbGlhXCI6IGNoYWluc18xLm9wdGltaXNtU2Vwb2xpYSxcbn07XG4vKipcbiAqIEdldCBhIGNoYWluIGZyb20gdGhlIHZpZW0gY2hhaW5zIG9iamVjdFxuICpcbiAqIEBwYXJhbSBpZCAtIFRoZSBjaGFpbiBJRFxuICogQHJldHVybnMgVGhlIGNoYWluXG4gKi9cbmNvbnN0IGdldENoYWluID0gKGlkKSA9PiB7XG4gICAgY29uc3QgY2hhaW5MaXN0ID0gT2JqZWN0LnZhbHVlcyhjaGFpbnMpO1xuICAgIHJldHVybiBjaGFpbkxpc3QuZmluZChjaGFpbiA9PiBjaGFpbi5pZCA9PT0gcGFyc2VJbnQoaWQpKTtcbn07XG5leHBvcnRzLmdldENoYWluID0gZ2V0Q2hhaW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/network/svm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/network/svm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SOLANA_CLUSTER_ID_BY_NETWORK_ID = exports.SOLANA_NETWORKS = exports.SOLANA_DEVNET_NETWORK = exports.SOLANA_TESTNET_NETWORK = exports.SOLANA_MAINNET_NETWORK = exports.SOLANA_DEVNET_GENESIS_BLOCK_HASH = exports.SOLANA_TESTNET_GENESIS_BLOCK_HASH = exports.SOLANA_MAINNET_GENESIS_BLOCK_HASH = exports.SOLANA_PROTOCOL_FAMILY = exports.SOLANA_DEVNET_NETWORK_ID = exports.SOLANA_TESTNET_NETWORK_ID = exports.SOLANA_MAINNET_NETWORK_ID = void 0;\n// CDP Network IDs\nexports.SOLANA_MAINNET_NETWORK_ID = \"solana-mainnet\";\nexports.SOLANA_TESTNET_NETWORK_ID = \"solana-testnet\";\nexports.SOLANA_DEVNET_NETWORK_ID = \"solana-devnet\";\n// AgentKit Protocol Family\nexports.SOLANA_PROTOCOL_FAMILY = \"svm\";\n// Chain IDs - Genesis Block Hashes\nexports.SOLANA_MAINNET_GENESIS_BLOCK_HASH = \"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d\";\nexports.SOLANA_TESTNET_GENESIS_BLOCK_HASH = \"4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\";\nexports.SOLANA_DEVNET_GENESIS_BLOCK_HASH = \"EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG\";\nexports.SOLANA_MAINNET_NETWORK = {\n    protocolFamily: exports.SOLANA_PROTOCOL_FAMILY,\n    chainId: exports.SOLANA_MAINNET_GENESIS_BLOCK_HASH,\n    networkId: exports.SOLANA_MAINNET_NETWORK_ID,\n};\nexports.SOLANA_TESTNET_NETWORK = {\n    protocolFamily: exports.SOLANA_PROTOCOL_FAMILY,\n    chainId: exports.SOLANA_TESTNET_GENESIS_BLOCK_HASH,\n    networkId: exports.SOLANA_TESTNET_NETWORK_ID,\n};\nexports.SOLANA_DEVNET_NETWORK = {\n    protocolFamily: exports.SOLANA_PROTOCOL_FAMILY,\n    chainId: exports.SOLANA_DEVNET_GENESIS_BLOCK_HASH,\n    networkId: exports.SOLANA_DEVNET_NETWORK_ID,\n};\nexports.SOLANA_NETWORKS = {\n    [exports.SOLANA_MAINNET_GENESIS_BLOCK_HASH]: exports.SOLANA_MAINNET_NETWORK,\n    [exports.SOLANA_TESTNET_GENESIS_BLOCK_HASH]: exports.SOLANA_TESTNET_NETWORK,\n    [exports.SOLANA_DEVNET_GENESIS_BLOCK_HASH]: exports.SOLANA_DEVNET_NETWORK,\n};\nexports.SOLANA_CLUSTER_ID_BY_NETWORK_ID = {\n    [exports.SOLANA_MAINNET_NETWORK_ID]: \"mainnet-beta\",\n    [exports.SOLANA_TESTNET_NETWORK_ID]: \"testnet\",\n    [exports.SOLANA_DEVNET_NETWORK_ID]: \"devnet\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvbmV0d29yay9zdm0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDLEdBQUcsdUJBQXVCLEdBQUcsNkJBQTZCLEdBQUcsOEJBQThCLEdBQUcsOEJBQThCLEdBQUcsd0NBQXdDLEdBQUcseUNBQXlDLEdBQUcseUNBQXlDLEdBQUcsOEJBQThCLEdBQUcsZ0NBQWdDLEdBQUcsaUNBQWlDLEdBQUcsaUNBQWlDO0FBQ2xiO0FBQ0EsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyxnQ0FBZ0M7QUFDaEM7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDLHdDQUF3QztBQUN4Qyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvbmV0d29yay9zdm0uanM/MTY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU09MQU5BX0NMVVNURVJfSURfQllfTkVUV09SS19JRCA9IGV4cG9ydHMuU09MQU5BX05FVFdPUktTID0gZXhwb3J0cy5TT0xBTkFfREVWTkVUX05FVFdPUksgPSBleHBvcnRzLlNPTEFOQV9URVNUTkVUX05FVFdPUksgPSBleHBvcnRzLlNPTEFOQV9NQUlOTkVUX05FVFdPUksgPSBleHBvcnRzLlNPTEFOQV9ERVZORVRfR0VORVNJU19CTE9DS19IQVNIID0gZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9HRU5FU0lTX0JMT0NLX0hBU0ggPSBleHBvcnRzLlNPTEFOQV9NQUlOTkVUX0dFTkVTSVNfQkxPQ0tfSEFTSCA9IGV4cG9ydHMuU09MQU5BX1BST1RPQ09MX0ZBTUlMWSA9IGV4cG9ydHMuU09MQU5BX0RFVk5FVF9ORVRXT1JLX0lEID0gZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9ORVRXT1JLX0lEID0gZXhwb3J0cy5TT0xBTkFfTUFJTk5FVF9ORVRXT1JLX0lEID0gdm9pZCAwO1xuLy8gQ0RQIE5ldHdvcmsgSURzXG5leHBvcnRzLlNPTEFOQV9NQUlOTkVUX05FVFdPUktfSUQgPSBcInNvbGFuYS1tYWlubmV0XCI7XG5leHBvcnRzLlNPTEFOQV9URVNUTkVUX05FVFdPUktfSUQgPSBcInNvbGFuYS10ZXN0bmV0XCI7XG5leHBvcnRzLlNPTEFOQV9ERVZORVRfTkVUV09SS19JRCA9IFwic29sYW5hLWRldm5ldFwiO1xuLy8gQWdlbnRLaXQgUHJvdG9jb2wgRmFtaWx5XG5leHBvcnRzLlNPTEFOQV9QUk9UT0NPTF9GQU1JTFkgPSBcInN2bVwiO1xuLy8gQ2hhaW4gSURzIC0gR2VuZXNpcyBCbG9jayBIYXNoZXNcbmV4cG9ydHMuU09MQU5BX01BSU5ORVRfR0VORVNJU19CTE9DS19IQVNIID0gXCI1ZXlrdDRVc0Z2OFA4TkpkVFJFcFkxdnpxS3FaS3ZkcEt1YzE0N2R3Mk45ZFwiO1xuZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9HRU5FU0lTX0JMT0NLX0hBU0ggPSBcIjR1aGNWSnlVOXBKa3ZReVM4OHVSRGlzd0hYU0NrWTN6UWF3d3BqazJOc05ZXCI7XG5leHBvcnRzLlNPTEFOQV9ERVZORVRfR0VORVNJU19CTE9DS19IQVNIID0gXCJFdFdUUkFCWmFZcTZpTWZlWUtvdVJ1MTY2VlUyeHFhMXdjYVdveFBrclpCR1wiO1xuZXhwb3J0cy5TT0xBTkFfTUFJTk5FVF9ORVRXT1JLID0ge1xuICAgIHByb3RvY29sRmFtaWx5OiBleHBvcnRzLlNPTEFOQV9QUk9UT0NPTF9GQU1JTFksXG4gICAgY2hhaW5JZDogZXhwb3J0cy5TT0xBTkFfTUFJTk5FVF9HRU5FU0lTX0JMT0NLX0hBU0gsXG4gICAgbmV0d29ya0lkOiBleHBvcnRzLlNPTEFOQV9NQUlOTkVUX05FVFdPUktfSUQsXG59O1xuZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9ORVRXT1JLID0ge1xuICAgIHByb3RvY29sRmFtaWx5OiBleHBvcnRzLlNPTEFOQV9QUk9UT0NPTF9GQU1JTFksXG4gICAgY2hhaW5JZDogZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9HRU5FU0lTX0JMT0NLX0hBU0gsXG4gICAgbmV0d29ya0lkOiBleHBvcnRzLlNPTEFOQV9URVNUTkVUX05FVFdPUktfSUQsXG59O1xuZXhwb3J0cy5TT0xBTkFfREVWTkVUX05FVFdPUksgPSB7XG4gICAgcHJvdG9jb2xGYW1pbHk6IGV4cG9ydHMuU09MQU5BX1BST1RPQ09MX0ZBTUlMWSxcbiAgICBjaGFpbklkOiBleHBvcnRzLlNPTEFOQV9ERVZORVRfR0VORVNJU19CTE9DS19IQVNILFxuICAgIG5ldHdvcmtJZDogZXhwb3J0cy5TT0xBTkFfREVWTkVUX05FVFdPUktfSUQsXG59O1xuZXhwb3J0cy5TT0xBTkFfTkVUV09SS1MgPSB7XG4gICAgW2V4cG9ydHMuU09MQU5BX01BSU5ORVRfR0VORVNJU19CTE9DS19IQVNIXTogZXhwb3J0cy5TT0xBTkFfTUFJTk5FVF9ORVRXT1JLLFxuICAgIFtleHBvcnRzLlNPTEFOQV9URVNUTkVUX0dFTkVTSVNfQkxPQ0tfSEFTSF06IGV4cG9ydHMuU09MQU5BX1RFU1RORVRfTkVUV09SSyxcbiAgICBbZXhwb3J0cy5TT0xBTkFfREVWTkVUX0dFTkVTSVNfQkxPQ0tfSEFTSF06IGV4cG9ydHMuU09MQU5BX0RFVk5FVF9ORVRXT1JLLFxufTtcbmV4cG9ydHMuU09MQU5BX0NMVVNURVJfSURfQllfTkVUV09SS19JRCA9IHtcbiAgICBbZXhwb3J0cy5TT0xBTkFfTUFJTk5FVF9ORVRXT1JLX0lEXTogXCJtYWlubmV0LWJldGFcIixcbiAgICBbZXhwb3J0cy5TT0xBTkFfVEVTVE5FVF9ORVRXT1JLX0lEXTogXCJ0ZXN0bmV0XCIsXG4gICAgW2V4cG9ydHMuU09MQU5BX0RFVk5FVF9ORVRXT1JLX0lEXTogXCJkZXZuZXRcIixcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/network/svm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/network/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/network/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvbmV0d29yay90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC9uZXR3b3JrL3R5cGVzLmpzPzhlMTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/network/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.approve = approve;\nexports.applyGasMultiplier = applyGasMultiplier;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst ERC20_ABI = [\n    {\n        inputs: [\n            { name: \"spender\", type: \"address\" },\n            { name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"approve\",\n        outputs: [{ name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n/**\n * Approves a spender to spend tokens on behalf of the owner\n *\n * @param wallet - The wallet provider\n * @param tokenAddress - The address of the token contract\n * @param spenderAddress - The address of the spender\n * @param amount - The amount to approve in atomic units (wei)\n * @returns A success message or error message\n */\nasync function approve(wallet, tokenAddress, spenderAddress, amount) {\n    try {\n        const data = (0, viem_1.encodeFunctionData)({\n            abi: ERC20_ABI,\n            functionName: \"approve\",\n            args: [spenderAddress, amount],\n        });\n        const txHash = await wallet.sendTransaction({\n            to: tokenAddress,\n            data,\n        });\n        await wallet.waitForTransactionReceipt(txHash);\n        return `Successfully approved ${spenderAddress} to spend ${amount} tokens`;\n    }\n    catch (error) {\n        return `Error approving tokens: ${error}`;\n    }\n}\n/**\n * Scales a gas estimate by a given multiplier.\n *\n * This function converts the gas estimate to a number, applies the multiplier,\n * rounds the result to the nearest integer, and returns it as a bigint.\n *\n * @param gas - The original gas estimate (bigint).\n * @param multiplier - The factor by which to scale the estimate.\n * @returns The adjusted gas estimate as a bigint.\n */\nfunction applyGasMultiplier(gas, multiplier) {\n    return BigInt(Math.round(Number(gas) * multiplier));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLDBCQUEwQjtBQUMxQixlQUFlLG1CQUFPLENBQUMscURBQU07QUFDN0I7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrQ0FBa0M7QUFDaEQsY0FBYyxpQ0FBaUM7QUFDL0M7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSx3Q0FBd0MsZ0JBQWdCLFdBQVcsUUFBUTtBQUMzRTtBQUNBO0FBQ0EsMENBQTBDLE1BQU07QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9kaXN0L3V0aWxzLmpzPzk1MWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFwcHJvdmUgPSBhcHByb3ZlO1xuZXhwb3J0cy5hcHBseUdhc011bHRpcGxpZXIgPSBhcHBseUdhc011bHRpcGxpZXI7XG5jb25zdCB2aWVtXzEgPSByZXF1aXJlKFwidmllbVwiKTtcbmNvbnN0IEVSQzIwX0FCSSA9IFtcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAgeyBuYW1lOiBcInNwZW5kZXJcIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJhbW91bnRcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJhcHByb3ZlXCIsXG4gICAgICAgIG91dHB1dHM6IFt7IG5hbWU6IFwiXCIsIHR5cGU6IFwiYm9vbFwiIH1dLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbl07XG4vKipcbiAqIEFwcHJvdmVzIGEgc3BlbmRlciB0byBzcGVuZCB0b2tlbnMgb24gYmVoYWxmIG9mIHRoZSBvd25lclxuICpcbiAqIEBwYXJhbSB3YWxsZXQgLSBUaGUgd2FsbGV0IHByb3ZpZGVyXG4gKiBAcGFyYW0gdG9rZW5BZGRyZXNzIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0XG4gKiBAcGFyYW0gc3BlbmRlckFkZHJlc3MgLSBUaGUgYWRkcmVzcyBvZiB0aGUgc3BlbmRlclxuICogQHBhcmFtIGFtb3VudCAtIFRoZSBhbW91bnQgdG8gYXBwcm92ZSBpbiBhdG9taWMgdW5pdHMgKHdlaSlcbiAqIEByZXR1cm5zIEEgc3VjY2VzcyBtZXNzYWdlIG9yIGVycm9yIG1lc3NhZ2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYXBwcm92ZSh3YWxsZXQsIHRva2VuQWRkcmVzcywgc3BlbmRlckFkZHJlc3MsIGFtb3VudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSAoMCwgdmllbV8xLmVuY29kZUZ1bmN0aW9uRGF0YSkoe1xuICAgICAgICAgICAgYWJpOiBFUkMyMF9BQkksXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwiYXBwcm92ZVwiLFxuICAgICAgICAgICAgYXJnczogW3NwZW5kZXJBZGRyZXNzLCBhbW91bnRdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdHhIYXNoID0gYXdhaXQgd2FsbGV0LnNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICB0bzogdG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHdhbGxldC53YWl0Rm9yVHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCk7XG4gICAgICAgIHJldHVybiBgU3VjY2Vzc2Z1bGx5IGFwcHJvdmVkICR7c3BlbmRlckFkZHJlc3N9IHRvIHNwZW5kICR7YW1vdW50fSB0b2tlbnNgO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGBFcnJvciBhcHByb3ZpbmcgdG9rZW5zOiAke2Vycm9yfWA7XG4gICAgfVxufVxuLyoqXG4gKiBTY2FsZXMgYSBnYXMgZXN0aW1hdGUgYnkgYSBnaXZlbiBtdWx0aXBsaWVyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY29udmVydHMgdGhlIGdhcyBlc3RpbWF0ZSB0byBhIG51bWJlciwgYXBwbGllcyB0aGUgbXVsdGlwbGllcixcbiAqIHJvdW5kcyB0aGUgcmVzdWx0IHRvIHRoZSBuZWFyZXN0IGludGVnZXIsIGFuZCByZXR1cm5zIGl0IGFzIGEgYmlnaW50LlxuICpcbiAqIEBwYXJhbSBnYXMgLSBUaGUgb3JpZ2luYWwgZ2FzIGVzdGltYXRlIChiaWdpbnQpLlxuICogQHBhcmFtIG11bHRpcGxpZXIgLSBUaGUgZmFjdG9yIGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSBlc3RpbWF0ZS5cbiAqIEByZXR1cm5zIFRoZSBhZGp1c3RlZCBnYXMgZXN0aW1hdGUgYXMgYSBiaWdpbnQuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5R2FzTXVsdGlwbGllcihnYXMsIG11bHRpcGxpZXIpIHtcbiAgICByZXR1cm4gQmlnSW50KE1hdGgucm91bmQoTnVtYmVyKGdhcykgKiBtdWx0aXBsaWVyKSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/cdpWalletProvider.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/cdpWalletProvider.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CdpWalletProvider_cdpWallet, _CdpWalletProvider_address, _CdpWalletProvider_network, _CdpWalletProvider_publicClient, _CdpWalletProvider_gasLimitMultiplier, _CdpWalletProvider_feePerGasMultiplier, _CdpWalletProvider_transactionQueue;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CdpWalletProvider = void 0;\nconst package_json_1 = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@coinbase/agentkit/package.json\");\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst evmWalletProvider_1 = __webpack_require__(/*! ./evmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js\");\nconst coinbase_sdk_1 = __webpack_require__(/*! @coinbase/coinbase-sdk */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nconst network_1 = __webpack_require__(/*! ../network/network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\");\n/**\n * A wallet provider that uses the Coinbase SDK.\n */\nclass CdpWalletProvider extends evmWalletProvider_1.EvmWalletProvider {\n    /**\n     * Constructs a new CdpWalletProvider.\n     *\n     * @param config - The configuration options for the CdpWalletProvider.\n     */\n    constructor(config) {\n        super();\n        _CdpWalletProvider_cdpWallet.set(this, void 0);\n        _CdpWalletProvider_address.set(this, void 0);\n        _CdpWalletProvider_network.set(this, void 0);\n        _CdpWalletProvider_publicClient.set(this, void 0);\n        _CdpWalletProvider_gasLimitMultiplier.set(this, void 0);\n        _CdpWalletProvider_feePerGasMultiplier.set(this, void 0);\n        _CdpWalletProvider_transactionQueue.set(this, void 0);\n        __classPrivateFieldSet(this, _CdpWalletProvider_cdpWallet, config.wallet, \"f\");\n        __classPrivateFieldSet(this, _CdpWalletProvider_address, config.address, \"f\");\n        __classPrivateFieldSet(this, _CdpWalletProvider_network, config.network, \"f\");\n        __classPrivateFieldSet(this, _CdpWalletProvider_publicClient, (0, viem_1.createPublicClient)({\n            chain: network_1.NETWORK_ID_TO_VIEM_CHAIN[config.network.networkId],\n            transport: (0, viem_1.http)(),\n        }), \"f\");\n        __classPrivateFieldSet(this, _CdpWalletProvider_gasLimitMultiplier, Math.max(config.gas?.gasLimitMultiplier ?? 1.2, 1), \"f\");\n        __classPrivateFieldSet(this, _CdpWalletProvider_feePerGasMultiplier, Math.max(config.gas?.feePerGasMultiplier ?? 1, 1), \"f\");\n    }\n    /**\n     * Configures a new CdpWalletProvider with a wallet.\n     *\n     * @param config - Optional configuration parameters\n     * @returns A Promise that resolves to a new CdpWalletProvider instance\n     * @throws Error if required environment variables are missing or wallet initialization fails\n     */\n    static async configureWithWallet(config = {}) {\n        if (config.apiKeyName && config.apiKeyPrivateKey) {\n            coinbase_sdk_1.Coinbase.configure({\n                apiKeyName: config.apiKeyName,\n                privateKey: config.apiKeyPrivateKey?.replace(/\\\\n/g, \"\\n\"),\n                source: \"agentkit\",\n                sourceVersion: package_json_1.version,\n            });\n        }\n        else {\n            coinbase_sdk_1.Coinbase.configureFromJson({ source: \"agentkit\", sourceVersion: package_json_1.version });\n        }\n        let wallet;\n        const mnemonicPhrase = config.mnemonicPhrase || process.env.MNEMONIC_PHRASE;\n        let networkId = config.networkId || process.env.NETWORK_ID || coinbase_sdk_1.Coinbase.networks.BaseSepolia;\n        try {\n            if (config.wallet) {\n                wallet = config.wallet;\n            }\n            else if (config.cdpWalletData) {\n                const walletData = JSON.parse(config.cdpWalletData);\n                wallet = await coinbase_sdk_1.Wallet.import(walletData);\n                networkId = wallet.getNetworkId();\n            }\n            else if (mnemonicPhrase) {\n                wallet = await coinbase_sdk_1.Wallet.import({ mnemonicPhrase: mnemonicPhrase }, networkId);\n            }\n            else {\n                wallet = await coinbase_sdk_1.Wallet.create({ networkId: networkId });\n            }\n        }\n        catch (error) {\n            throw new Error(`Failed to initialize wallet: ${error}`);\n        }\n        const address = (await wallet.getDefaultAddress())?.getId();\n        const network = {\n            protocolFamily: \"evm\",\n            chainId: network_1.NETWORK_ID_TO_CHAIN_ID[networkId],\n            networkId: networkId,\n        };\n        const cdpWalletProvider = new CdpWalletProvider({\n            wallet,\n            address,\n            network,\n            gas: config.gas,\n        });\n        return cdpWalletProvider;\n    }\n    /**\n     * Signs a message.\n     *\n     * @param message - The message to sign.\n     * @returns The signed message.\n     */\n    async signMessage(message) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const messageHash = (0, coinbase_sdk_1.hashMessage)(message);\n        const payload = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createPayloadSignature(messageHash);\n        if (payload.getStatus() === \"pending\" && payload?.wait) {\n            await payload.wait(); // needed for Server-Signers\n        }\n        return payload.getSignature();\n    }\n    /**\n     * Signs a typed data object.\n     *\n     * @param typedData - The typed data object to sign.\n     * @returns The signed typed data object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async signTypedData(typedData) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const messageHash = (0, coinbase_sdk_1.hashTypedDataMessage)(typedData.domain, typedData.types, typedData.message);\n        const payload = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createPayloadSignature(messageHash);\n        if (payload.getStatus() === \"pending\" && payload?.wait) {\n            await payload.wait(); // needed for Server-Signers\n        }\n        return payload.getSignature();\n    }\n    /**\n     * Signs a transaction.\n     *\n     * @param transaction - The transaction to sign.\n     * @returns The signed transaction.\n     */\n    async signTransaction(transaction) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const serializedTx = (0, viem_1.serializeTransaction)(transaction);\n        const transactionHash = (0, viem_1.keccak256)(serializedTx);\n        const payload = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createPayloadSignature(transactionHash);\n        if (payload.getStatus() === \"pending\" && payload?.wait) {\n            await payload.wait(); // needed for Server-Signers\n        }\n        return payload.getSignature();\n    }\n    /**\n     * Sends a transaction.\n     *\n     * @param transaction - The transaction to send.\n     * @returns The hash of the transaction.\n     */\n    async sendTransaction(transaction) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const sendPromise = (async () => {\n            if (__classPrivateFieldGet(this, _CdpWalletProvider_transactionQueue, \"f\"))\n                await __classPrivateFieldGet(this, _CdpWalletProvider_transactionQueue, \"f\");\n            const preparedTransaction = await this.prepareTransaction(transaction.to, transaction.value, transaction.data);\n            const signature = await this.signTransaction({\n                ...preparedTransaction,\n            });\n            const signedPayload = await this.addSignatureAndSerialize(preparedTransaction, signature);\n            const externalAddress = new coinbase_sdk_1.ExternalAddress(__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").getNetworkId(), __classPrivateFieldGet(this, _CdpWalletProvider_address, \"f\"));\n            const tx = await externalAddress.broadcastExternalTransaction(signedPayload.slice(2));\n            return tx.transactionHash;\n        })();\n        __classPrivateFieldSet(this, _CdpWalletProvider_transactionQueue, sendPromise\n            .then(txHash => this.waitForTransactionReceipt(txHash))\n            .catch(() => { }), \"f\");\n        return await sendPromise;\n    }\n    /**\n     * Prepares a transaction.\n     *\n     * @param to - The address to send the transaction to.\n     * @param value - The value of the transaction.\n     * @param data - The data of the transaction.\n     * @returns The prepared transaction.\n     */\n    async prepareTransaction(to, value, data) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const nonce = await __classPrivateFieldGet(this, _CdpWalletProvider_publicClient, \"f\").getTransactionCount({\n            address: __classPrivateFieldGet(this, _CdpWalletProvider_address, \"f\"),\n            blockTag: \"pending\",\n        });\n        const feeData = await __classPrivateFieldGet(this, _CdpWalletProvider_publicClient, \"f\").estimateFeesPerGas();\n        const maxFeePerGas = (0, utils_1.applyGasMultiplier)(feeData.maxFeePerGas, __classPrivateFieldGet(this, _CdpWalletProvider_feePerGasMultiplier, \"f\"));\n        const maxPriorityFeePerGas = (0, utils_1.applyGasMultiplier)(feeData.maxPriorityFeePerGas, __classPrivateFieldGet(this, _CdpWalletProvider_feePerGasMultiplier, \"f\"));\n        const gasLimit = await __classPrivateFieldGet(this, _CdpWalletProvider_publicClient, \"f\").estimateGas({\n            account: __classPrivateFieldGet(this, _CdpWalletProvider_address, \"f\"),\n            to,\n            value,\n            data,\n        });\n        const gas = BigInt(Math.round(Number(gasLimit) * __classPrivateFieldGet(this, _CdpWalletProvider_gasLimitMultiplier, \"f\")));\n        const chainId = parseInt(__classPrivateFieldGet(this, _CdpWalletProvider_network, \"f\").chainId, 10);\n        return {\n            to,\n            value,\n            data,\n            nonce,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gas,\n            chainId,\n            type: \"eip1559\",\n        };\n    }\n    /**\n     * Adds signature to a transaction and serializes it for broadcast.\n     *\n     * @param transaction - The transaction to sign.\n     * @param signature - The signature to add to the transaction.\n     * @returns A serialized transaction.\n     */\n    async addSignatureAndSerialize(transaction, signature) {\n        // Decode the signature into its components\n        const r = `0x${signature.slice(2, 66)}`; // First 32 bytes\n        const s = `0x${signature.slice(66, 130)}`; // Next 32 bytes\n        const v = BigInt(parseInt(signature.slice(130, 132), 16)); // Last byte\n        return (0, viem_1.serializeTransaction)(transaction, { r, s, v });\n    }\n    /**\n     * Gets the address of the wallet.\n     *\n     * @returns The address of the wallet.\n     */\n    getAddress() {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_address, \"f\")) {\n            throw new Error(\"Address not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_address, \"f\");\n    }\n    /**\n     * Gets the network of the wallet.\n     *\n     * @returns The network of the wallet.\n     */\n    getNetwork() {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_network, \"f\")) {\n            throw new Error(\"Network not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_network, \"f\");\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The name of the wallet provider.\n     */\n    getName() {\n        return \"cdp_wallet_provider\";\n    }\n    /**\n     * Gets the balance of the wallet.\n     *\n     * @returns The balance of the wallet in wei\n     */\n    async getBalance() {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const balance = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").getBalance(\"eth\");\n        return BigInt(balance.mul(10 ** 18).toString());\n    }\n    /**\n     * Waits for a transaction receipt.\n     *\n     * @param txHash - The hash of the transaction to wait for.\n     * @returns The transaction receipt.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async waitForTransactionReceipt(txHash) {\n        return await __classPrivateFieldGet(this, _CdpWalletProvider_publicClient, \"f\").waitForTransactionReceipt({ hash: txHash });\n    }\n    /**\n     * Reads a contract.\n     *\n     * @param params - The parameters to read the contract.\n     * @returns The response from the contract.\n     */\n    async readContract(params) {\n        return __classPrivateFieldGet(this, _CdpWalletProvider_publicClient, \"f\").readContract(params);\n    }\n    /**\n     * Creates a trade.\n     *\n     * @param options - The options for the trade.\n     * @returns The trade.\n     */\n    async createTrade(options) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createTrade(options);\n    }\n    /**\n     * Deploys a token.\n     *\n     * @param options - The options for the token deployment.\n     * @returns The deployed token.\n     */\n    async deployToken(options) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").deployToken(options);\n    }\n    /**\n     * Deploys a contract.\n     *\n     * @param options - The options for contract deployment\n     * @param options.solidityVersion - The version of the Solidity compiler to use (e.g. \"0.8.0+commit.c7dfd78e\")\n     * @param options.solidityInputJson - The JSON input for the Solidity compiler containing contract source and settings\n     * @param options.contractName - The name of the contract to deploy\n     * @param options.constructorArgs - Key-value map of constructor args\n     *\n     * @returns A Promise that resolves to the deployed contract instance\n     * @throws Error if wallet is not initialized\n     */\n    async deployContract(options) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").deployContract(options);\n    }\n    /**\n     * Deploys a new NFT (ERC-721) smart contract.\n     *\n     * @param options - Configuration options for the NFT contract deployment\n     * @param options.name - The name of the collection\n     * @param options.symbol - The token symbol for the collection\n     * @param options.baseURI - The base URI for token metadata.\n     *\n     * @returns A Promise that resolves to the deployed SmartContract instance\n     * @throws Error if the wallet is not properly initialized\n     * @throws Error if the deployment fails for any reason (network issues, insufficient funds, etc.)\n     */\n    async deployNFT(options) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").deployNFT(options);\n    }\n    /**\n     * Transfer the native asset of the network.\n     *\n     * @param to - The destination address.\n     * @param value - The amount to transfer in Wei.\n     * @returns The transaction hash.\n     */\n    async nativeTransfer(to, value) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const transferResult = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createTransfer({\n            amount: new decimal_js_1.Decimal(value),\n            assetId: coinbase_sdk_1.Coinbase.assets.Eth,\n            destination: to,\n            gasless: false,\n        });\n        const result = await transferResult.wait();\n        if (!result.getTransactionHash()) {\n            throw new Error(\"Transaction hash not found\");\n        }\n        return result.getTransactionHash();\n    }\n    /**\n     * Exports the wallet.\n     *\n     * @returns The wallet's data.\n     */\n    async exportWallet() {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").export();\n    }\n    /**\n     * Gets the wallet.\n     *\n     * @returns The wallet.\n     */\n    getWallet() {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        return __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\");\n    }\n    /**\n     * ERC20 transfer method\n     *\n     * @param assetId - The asset ID to transfer. Either USDC, CBBTC or EURC\n     * @param destination - The destination address\n     * @param amount - The amount to transfer\n     * @returns The transaction hash\n     */\n    async gaslessERC20Transfer(assetId, destination, amount) {\n        if (!__classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\")) {\n            throw new Error(\"Wallet not initialized\");\n        }\n        const transferResult = await __classPrivateFieldGet(this, _CdpWalletProvider_cdpWallet, \"f\").createTransfer({\n            amount,\n            assetId,\n            destination,\n            gasless: true,\n        });\n        const result = await transferResult.wait();\n        if (!result.getTransactionHash()) {\n            throw new Error(\"Transaction hash not found\");\n        }\n        return result.getTransactionHash();\n    }\n}\nexports.CdpWalletProvider = CdpWalletProvider;\n_CdpWalletProvider_cdpWallet = new WeakMap(), _CdpWalletProvider_address = new WeakMap(), _CdpWalletProvider_network = new WeakMap(), _CdpWalletProvider_publicClient = new WeakMap(), _CdpWalletProvider_gasLimitMultiplier = new WeakMap(), _CdpWalletProvider_feePerGasMultiplier = new WeakMap(), _CdpWalletProvider_transactionQueue = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/cdpWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// TODO: Improve type safety\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EvmWalletProvider = void 0;\nconst walletProvider_1 = __webpack_require__(/*! ./walletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js\");\n/**\n * EvmWalletProvider is the abstract base class for all EVM wallet providers.\n *\n * @abstract\n */\nclass EvmWalletProvider extends walletProvider_1.WalletProvider {\n}\nexports.EvmWalletProvider = EvmWalletProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9ldm1XYWxsZXRQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHlCQUF5QixtQkFBTyxDQUFDLHlHQUFrQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC93YWxsZXQtcHJvdmlkZXJzL2V2bVdhbGxldFByb3ZpZGVyLmpzP2M0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUT0RPOiBJbXByb3ZlIHR5cGUgc2FmZXR5XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2bVdhbGxldFByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3Qgd2FsbGV0UHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3dhbGxldFByb3ZpZGVyXCIpO1xuLyoqXG4gKiBFdm1XYWxsZXRQcm92aWRlciBpcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIEVWTSB3YWxsZXQgcHJvdmlkZXJzLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBFdm1XYWxsZXRQcm92aWRlciBleHRlbmRzIHdhbGxldFByb3ZpZGVyXzEuV2FsbGV0UHJvdmlkZXIge1xufVxuZXhwb3J0cy5Fdm1XYWxsZXRQcm92aWRlciA9IEV2bVdhbGxldFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./walletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./evmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./viemWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/viemWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cdpWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/cdpWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./svmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./smartWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/smartWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./solanaKeypairWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/solanaKeypairWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./privyWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./privyEvmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./privySvmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privySvmWalletProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./privyEvmDelegatedEmbeddedWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmDelegatedEmbeddedWalletProvider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMseUdBQWtCO0FBQ3ZDLGFBQWEsbUJBQU8sQ0FBQywrR0FBcUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLGlIQUFzQjtBQUMzQyxhQUFhLG1CQUFPLENBQUMsK0dBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQywrR0FBcUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLG1IQUF1QjtBQUM1QyxhQUFhLG1CQUFPLENBQUMsbUlBQStCO0FBQ3BELGFBQWEsbUJBQU8sQ0FBQyxtSEFBdUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHlIQUEwQjtBQUMvQyxhQUFhLG1CQUFPLENBQUMseUhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQywySkFBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9pbmRleC5qcz83YzAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2FsbGV0UHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V2bVdhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92aWVtV2FsbGV0UHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NkcFdhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdm1XYWxsZXRQcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc21hcnRXYWxsZXRQcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc29sYW5hS2V5cGFpcldhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcml2eVdhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcml2eUV2bVdhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcml2eVN2bVdhbGxldFByb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcml2eUV2bURlbGVnYXRlZEVtYmVkZGVkV2FsbGV0UHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmDelegatedEmbeddedWalletProvider.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmDelegatedEmbeddedWalletProvider.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _PrivyEvmDelegatedEmbeddedWalletProvider_walletId, _PrivyEvmDelegatedEmbeddedWalletProvider_address, _PrivyEvmDelegatedEmbeddedWalletProvider_appId, _PrivyEvmDelegatedEmbeddedWalletProvider_appSecret, _PrivyEvmDelegatedEmbeddedWalletProvider_authKey, _PrivyEvmDelegatedEmbeddedWalletProvider_network, _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrivyEvmDelegatedEmbeddedWalletProvider = void 0;\nconst canonicalize_1 = __importDefault(__webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\"));\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst network_1 = __webpack_require__(/*! ../network/network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\");\nconst privyShared_1 = __webpack_require__(/*! ./privyShared */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyShared.js\");\nconst walletProvider_1 = __webpack_require__(/*! ./walletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js\");\n/**\n * A wallet provider that uses Privy's embedded wallets with delegation.\n * This provider extends the EvmWalletProvider to provide Privy-specific wallet functionality\n * while maintaining compatibility with the base wallet provider interface.\n */\nclass PrivyEvmDelegatedEmbeddedWalletProvider extends walletProvider_1.WalletProvider {\n    /**\n     * Private constructor to enforce use of factory method.\n     *\n     * @param config - The configuration options for the wallet provider\n     */\n    constructor(config) {\n        super();\n        _PrivyEvmDelegatedEmbeddedWalletProvider_walletId.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_address.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_appId.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_appSecret.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_authKey.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_network.set(this, void 0);\n        _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient.set(this, void 0);\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_walletId, config.walletId, \"f\");\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, config.address, \"f\");\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appId, config.appId, \"f\");\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appSecret, config.appSecret, \"f\");\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_authKey, config.authorizationPrivateKey || \"\", \"f\");\n        const networkId = config.networkId || \"base-sepolia\";\n        const chainId = config.chainId || network_1.NETWORK_ID_TO_CHAIN_ID[networkId];\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, {\n            protocolFamily: \"evm\",\n            networkId: networkId,\n            chainId: chainId,\n        }, \"f\");\n        // Create a public client for read operations\n        const chain = (0, network_1.getChain)(chainId);\n        if (!chain) {\n            throw new Error(`Chain with ID ${chainId} not found`);\n        }\n        __classPrivateFieldSet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient, (0, viem_1.createPublicClient)({\n            chain,\n            transport: (0, viem_1.http)(),\n        }), \"f\");\n    }\n    /**\n     * Creates and configures a new PrivyEvmDelegatedEmbeddedWalletProvider instance.\n     *\n     * @param config - The configuration options for the Privy wallet\n     * @returns A configured PrivyEvmDelegatedEmbeddedWalletProvider instance\n     *\n     * @example\n     * ```typescript\n     * const provider = await PrivyEvmDelegatedEmbeddedWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\",\n     *   authorizationPrivateKey: \"your-auth-key\",\n     *   walletId: \"privy-wallet-id\",\n     *   networkId: \"base-mainnet\"\n     * });\n     * ```\n     */\n    static async configureWithWallet(config) {\n        try {\n            if (!config.walletId) {\n                throw new Error(\"walletId is required for PrivyEvmDelegatedEmbeddedWalletProvider\");\n            }\n            if (!config.appId || !config.appSecret) {\n                throw new Error(\"appId and appSecret are required for PrivyEvmDelegatedEmbeddedWalletProvider\");\n            }\n            if (!config.authorizationPrivateKey) {\n                throw new Error(\"authorizationPrivateKey is required for PrivyEvmDelegatedEmbeddedWalletProvider\");\n            }\n            const privyClient = (0, privyShared_1.createPrivyClient)(config);\n            const user = await privyClient.getUser(config.walletId);\n            const embeddedWallets = user.linkedAccounts.filter((account) => account.type === \"wallet\" && account.walletClientType === \"privy\");\n            if (embeddedWallets.length === 0) {\n                throw new Error(`Could not find wallet address for wallet ID ${config.walletId}`);\n            }\n            const walletAddress = embeddedWallets[0].address;\n            // Verify the network/chain ID if provided\n            if (config.chainId) {\n                const chain = (0, network_1.getChain)(config.chainId);\n                if (!chain) {\n                    throw new Error(`Chain with ID ${config.chainId} not found`);\n                }\n            }\n            return new PrivyEvmDelegatedEmbeddedWalletProvider({\n                ...config,\n                address: walletAddress,\n            });\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Failed to configure Privy embedded wallet provider: ${error.message}`);\n            }\n            throw new Error(\"Failed to configure Privy embedded wallet provider\");\n        }\n    }\n    /**\n     * Gets the address of the wallet.\n     *\n     * @returns The address of the wallet.\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\");\n    }\n    /**\n     * Gets the network of the wallet.\n     *\n     * @returns The network of the wallet.\n     */\n    getNetwork() {\n        return __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\");\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The name of the wallet provider.\n     */\n    getName() {\n        return \"privy_evm_embedded_wallet_provider\";\n    }\n    /**\n     * Gets the balance of the wallet.\n     *\n     * @returns The balance of the wallet in wei\n     */\n    async getBalance() {\n        try {\n            const balance = await __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient, \"f\").getBalance({\n                address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            });\n            return balance;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Error getting balance: ${error.message}`);\n            }\n            throw new Error(\"Error getting balance\");\n        }\n    }\n    /**\n     * Signs a message.\n     *\n     * @param message - The message to sign.\n     * @returns The signed message.\n     */\n    async signMessage(message) {\n        const body = {\n            address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            chain_type: \"ethereum\",\n            method: \"personal_sign\",\n            params: {\n                message,\n                encoding: \"utf-8\",\n            },\n        };\n        try {\n            const response = await this.executePrivyRequest(body);\n            return response.data?.signature;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Message signing failed: ${error.message}`);\n            }\n            throw new Error(\"Message signing failed\");\n        }\n    }\n    /**\n     * Signs typed data according to EIP-712.\n     *\n     * @param typedData - The typed data object to sign\n     * @param typedData.domain - The domain object containing contract and chain information\n     * @param typedData.types - The type definitions for the structured data\n     * @param typedData.primaryType - The primary type being signed\n     * @param typedData.message - The actual data to sign\n     * @returns A Address that resolves to the signed typed data as a hex string\n     */\n    async signTypedData(typedData) {\n        const body = {\n            address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            chain_type: \"ethereum\",\n            chain_id: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\").chainId,\n            ...typedData,\n        };\n        try {\n            const response = await this.executePrivyRequest({\n                method: \"eth_signTypedData_v4\",\n                params: body,\n            });\n            return response.signature;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(\"Typed data signing failed: \" + error.message);\n            }\n            throw new Error(\"Typed data signing failed with unknown error\");\n        }\n    }\n    /**\n     * Signs a transaction.\n     *\n     * @param transaction - The transaction to sign.\n     * @returns The signed transaction.\n     */\n    async signTransaction(transaction) {\n        const body = {\n            address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            chain_type: \"ethereum\",\n            method: \"eth_signTransaction\",\n            params: {\n                transaction: {\n                    ...transaction,\n                    from: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n                },\n            },\n        };\n        try {\n            const response = await this.executePrivyRequest(body);\n            return response.data?.signed_transaction;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Transaction signing failed: ${error.message}`);\n            }\n            throw new Error(\"Transaction signing failed\");\n        }\n    }\n    /**\n     * Sends a transaction.\n     *\n     * @param transaction - The transaction to send.\n     * @returns The hash of the transaction.\n     */\n    async sendTransaction(transaction) {\n        const body = {\n            address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            chain_type: \"ethereum\",\n            method: \"eth_sendTransaction\",\n            caip2: `eip155:${__classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\").chainId}`,\n            params: {\n                transaction: {\n                    ...transaction,\n                    from: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n                },\n            },\n        };\n        try {\n            const response = await this.executePrivyRequest(body);\n            return response.data?.hash;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Transaction sending failed: ${error.message}`);\n            }\n            throw new Error(\"Transaction sending failed\");\n        }\n    }\n    /**\n     * Waits for a transaction receipt.\n     *\n     * @param txHash - The hash of the transaction to wait for.\n     * @returns The transaction receipt.\n     */\n    async waitForTransactionReceipt(txHash) {\n        return await __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient, \"f\").waitForTransactionReceipt({\n            hash: txHash,\n        });\n    }\n    /**\n     * Reads data from a smart contract.\n     *\n     * @param params - Parameters for reading the contract\n     * @param params.address - The address of the contract\n     * @param params.abi - The ABI of the contract\n     * @param params.functionName - The name of the function to call\n     * @param params.args - The arguments to pass to the function\n     * @returns A Address that resolves to the contract function's return value\n     */\n    async readContract(params) {\n        return __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient, \"f\").readContract(params);\n    }\n    /**\n     * Transfer the native asset of the network.\n     *\n     * @param to - The destination address.\n     * @param value - The amount to transfer in Wei.\n     * @returns The transaction hash.\n     */\n    async nativeTransfer(to, value) {\n        const valueInWei = (0, viem_1.parseEther)(value);\n        const valueHex = `0x${valueInWei.toString(16)}`;\n        const body = {\n            address: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_address, \"f\"),\n            chain_type: \"ethereum\",\n            method: \"eth_sendTransaction\",\n            caip2: `eip155:${__classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\").chainId}`,\n            params: {\n                transaction: {\n                    to,\n                    value: valueHex,\n                },\n            },\n        };\n        try {\n            const response = await this.executePrivyRequest(body);\n            const receipt = await this.waitForTransactionReceipt(response.data.hash);\n            if (!receipt) {\n                throw new Error(\"Transaction failed\");\n            }\n            return receipt.transactionHash;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Native transfer failed: ${error.message}`);\n            }\n            throw new Error(\"Native transfer failed\");\n        }\n    }\n    /**\n     * Exports the wallet information.\n     *\n     * @returns The wallet data\n     */\n    exportWallet() {\n        return {\n            walletId: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_walletId, \"f\"),\n            authorizationPrivateKey: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_authKey, \"f\"),\n            networkId: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\").networkId,\n            chainId: __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_network, \"f\").chainId,\n        };\n    }\n    /**\n     * Generate Privy authorization signature for API requests\n     *\n     * @param url - The URL for the request\n     * @param body - The request body\n     * @returns The generated signature\n     */\n    generatePrivySignature(url, body) {\n        try {\n            const payload = {\n                version: 1,\n                method: \"POST\",\n                url,\n                body,\n                headers: {\n                    \"privy-app-id\": __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appId, \"f\"),\n                },\n            };\n            const serializedPayload = (0, canonicalize_1.default)(payload);\n            if (!serializedPayload)\n                throw new Error(\"Failed to canonicalize payload\");\n            const serializedPayloadBuffer = Buffer.from(serializedPayload);\n            const privateKeyAsString = __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_authKey, \"f\").replace(\"wallet-auth:\", \"\");\n            const privateKeyAsPem = `-----BEGIN PRIVATE KEY-----\\n${privateKeyAsString}\\n-----END PRIVATE KEY-----`;\n            const privateKey = crypto_1.default.createPrivateKey({\n                key: privateKeyAsPem,\n                format: \"pem\",\n            });\n            const signatureBuffer = crypto_1.default.sign(\"sha256\", serializedPayloadBuffer, privateKey);\n            return signatureBuffer.toString(\"base64\");\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Error generating Privy authorization signature: ${error.message}`);\n            }\n            throw new Error(\"Error generating Privy authorization signature\");\n        }\n    }\n    /**\n     * Get Privy headers for API requests\n     *\n     * @param url - The URL for the request\n     * @param body - The request body\n     * @returns The headers for the request\n     */\n    getPrivyHeaders(url, body) {\n        return {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Basic ${Buffer.from(`${__classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appId, \"f\")}:${__classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appSecret, \"f\")}`).toString(\"base64\")}`,\n            \"privy-app-id\": __classPrivateFieldGet(this, _PrivyEvmDelegatedEmbeddedWalletProvider_appId, \"f\"),\n            \"privy-authorization-signature\": this.generatePrivySignature(url, body),\n        };\n    }\n    /**\n     * Execute a Privy API request.\n     *\n     * @param body - The request body to send to the Privy API\n     * @returns A promise that resolves to the response data\n     * @throws Error if the request fails\n     */\n    async executePrivyRequest(body) {\n        const url = `https://api.privy.io/v1/wallets/rpc`;\n        const headers = this.getPrivyHeaders(url, body);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(body, (_key, value) => typeof value === \"bigint\" ? value.toString() : value),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new Error(\"Privy request failed: \" + error.message);\n            }\n            throw new Error(\"Privy request failed with unknown error\");\n        }\n    }\n}\nexports.PrivyEvmDelegatedEmbeddedWalletProvider = PrivyEvmDelegatedEmbeddedWalletProvider;\n_PrivyEvmDelegatedEmbeddedWalletProvider_walletId = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_address = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_appId = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_appSecret = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_authKey = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_network = new WeakMap(), _PrivyEvmDelegatedEmbeddedWalletProvider_publicClient = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmDelegatedEmbeddedWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmWalletProvider.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmWalletProvider.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PrivyEvmWalletProvider_walletId, _PrivyEvmWalletProvider_authorizationPrivateKey;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrivyEvmWalletProvider = void 0;\nconst server_auth_1 = __webpack_require__(/*! @privy-io/server-auth */ \"(rsc)/./node_modules/@privy-io/server-auth/dist/cjs/index.js\");\nconst viem_1 = __webpack_require__(/*! @privy-io/server-auth/viem */ \"(rsc)/./node_modules/@privy-io/server-auth/dist/cjs/viem.js\");\nconst viemWalletProvider_1 = __webpack_require__(/*! ./viemWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/viemWalletProvider.js\");\nconst viem_2 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst network_1 = __webpack_require__(/*! ../network/network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\");\n/**\n * A wallet provider that uses Privy's server wallet API.\n * This provider extends the ViemWalletProvider to provide Privy-specific wallet functionality\n * while maintaining compatibility with the base wallet provider interface.\n */\nclass PrivyEvmWalletProvider extends viemWalletProvider_1.ViemWalletProvider {\n    /**\n     * Private constructor to enforce use of factory method.\n     *\n     * @param walletClient - The Viem wallet client instance\n     * @param config - The configuration options for the Privy wallet\n     */\n    constructor(walletClient, config) {\n        super(walletClient);\n        _PrivyEvmWalletProvider_walletId.set(this, void 0);\n        _PrivyEvmWalletProvider_authorizationPrivateKey.set(this, void 0);\n        __classPrivateFieldSet(this, _PrivyEvmWalletProvider_walletId, config.walletId, \"f\"); // Now guaranteed to exist\n        __classPrivateFieldSet(this, _PrivyEvmWalletProvider_authorizationPrivateKey, config.authorizationPrivateKey, \"f\");\n    }\n    /**\n     * Creates and configures a new PrivyWalletProvider instance.\n     *\n     * @param config - The configuration options for the Privy wallet\n     * @returns A configured PrivyWalletProvider instance\n     *\n     * @example\n     * ```typescript\n     * const provider = await PrivyWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\",\n     *   walletId: \"wallet-id\",\n     *   chainId: \"84532\"\n     * });\n     * ```\n     */\n    static async configureWithWallet(config) {\n        const privy = new server_auth_1.PrivyClient(config.appId, config.appSecret, {\n            walletApi: config.authorizationPrivateKey\n                ? {\n                    authorizationPrivateKey: config.authorizationPrivateKey,\n                }\n                : undefined,\n        });\n        let walletId;\n        let address;\n        if (!config.walletId) {\n            if (config.authorizationPrivateKey && !config.authorizationKeyId) {\n                throw new Error(\"authorizationKeyId is required when creating a new wallet with an authorization key, this can be found in your Privy Dashboard\");\n            }\n            if (config.authorizationKeyId && !config.authorizationPrivateKey) {\n                throw new Error(\"authorizationPrivateKey is required when creating a new wallet with an authorizationKeyId. \" +\n                    \"If you don't have it, you can create a new one in your Privy Dashboard, or delete the authorization key.\");\n            }\n            try {\n                const wallet = await privy.walletApi.create({\n                    chainType: \"ethereum\",\n                    authorizationKeyIds: config.authorizationKeyId ? [config.authorizationKeyId] : undefined,\n                });\n                walletId = wallet.id;\n                address = wallet.address;\n            }\n            catch (error) {\n                console.error(error);\n                if (error instanceof Error &&\n                    error.message.includes(\"Missing `privy-authorization-signature` header\")) {\n                    // Providing a more informative error message, see context: https://github.com/coinbase/agentkit/pull/242#discussion_r1956428617\n                    throw new Error(\"Privy error: you have an authorization key on your account which can create and modify wallets, please delete this key or pass it to the PrivyWalletProvider to create a new wallet\");\n                }\n                throw new Error(\"Failed to create wallet\");\n            }\n        }\n        else {\n            walletId = config.walletId;\n            const wallet = await privy.walletApi.getWallet({ id: walletId });\n            if (!wallet) {\n                throw new Error(`Wallet with ID ${walletId} not found`);\n            }\n            address = wallet.address;\n        }\n        const account = await (0, viem_1.createViemAccount)({\n            walletId,\n            address,\n            privy,\n        });\n        const chainId = config.chainId || \"84532\";\n        const chain = (0, network_1.getChain)(chainId);\n        if (!chain) {\n            throw new Error(`Chain with ID ${chainId} not found`);\n        }\n        const walletClient = (0, viem_2.createWalletClient)({\n            account,\n            chain,\n            transport: (0, viem_2.http)(),\n        });\n        return new PrivyEvmWalletProvider(walletClient, { ...config, walletId });\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The string identifier for this wallet provider\n     */\n    getName() {\n        return \"privy_evm_wallet_provider\";\n    }\n    /**\n     * Exports the wallet data.\n     *\n     * @returns The wallet data\n     */\n    exportWallet() {\n        return {\n            walletId: __classPrivateFieldGet(this, _PrivyEvmWalletProvider_walletId, \"f\"),\n            authorizationPrivateKey: __classPrivateFieldGet(this, _PrivyEvmWalletProvider_authorizationPrivateKey, \"f\"),\n            chainId: this.getNetwork().chainId,\n            networkId: this.getNetwork().networkId,\n        };\n    }\n}\nexports.PrivyEvmWalletProvider = PrivyEvmWalletProvider;\n_PrivyEvmWalletProvider_walletId = new WeakMap(), _PrivyEvmWalletProvider_authorizationPrivateKey = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyShared.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/privyShared.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createPrivyClient = void 0;\nexports.createPrivyWallet = createPrivyWallet;\nconst server_auth_1 = __webpack_require__(/*! @privy-io/server-auth */ \"(rsc)/./node_modules/@privy-io/server-auth/dist/cjs/index.js\");\n/**\n * Create a Privy client\n *\n * @param config - The configuration options for the Privy client\n * @returns The created Privy client\n */\nconst createPrivyClient = (config) => {\n    return new server_auth_1.PrivyClient(config.appId, config.appSecret, {\n        walletApi: config.authorizationPrivateKey\n            ? {\n                authorizationPrivateKey: config.authorizationPrivateKey,\n            }\n            : undefined,\n    });\n};\nexports.createPrivyClient = createPrivyClient;\n/**\n * Create a Privy wallet\n *\n * @param config - The configuration options for the Privy wallet\n * @returns The created Privy wallet\n */\nasync function createPrivyWallet(config) {\n    const privy = (0, exports.createPrivyClient)(config);\n    if (config.walletId) {\n        const wallet = await privy.walletApi.getWallet({ id: config.walletId });\n        if (!wallet) {\n            throw new Error(`Wallet with ID ${config.walletId} not found`);\n        }\n        return { wallet, privy };\n    }\n    if (config.authorizationPrivateKey && !config.authorizationKeyId) {\n        throw new Error(\"authorizationKeyId is required when creating a new wallet with an authorization key, this can be found in your Privy Dashboard\");\n    }\n    if (config.authorizationKeyId && !config.authorizationPrivateKey) {\n        throw new Error(\"authorizationPrivateKey is required when creating a new wallet with an authorizationKeyId. \" +\n            \"If you don't have it, you can create a new one in your Privy Dashboard, or delete the authorization key.\");\n    }\n    try {\n        const wallet = await privy.walletApi.create({\n            chainType: config.chainType,\n            authorizationKeyIds: config.authorizationKeyId ? [config.authorizationKeyId] : undefined,\n        });\n        return { wallet, privy };\n    }\n    catch (error) {\n        console.error(error);\n        if (error instanceof Error &&\n            error.message.includes(\"Missing `privy-authorization-signature` header\")) {\n            // Providing a more informative error message, see context: https://github.com/coinbase/agentkit/pull/242#discussion_r1956428617\n            throw new Error(\"Privy error: you have an authorization key on your account which can create and modify wallets, please delete this key or pass it to the PrivyWalletProvider to create a new wallet\");\n        }\n        throw new Error(\"Failed to create wallet\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9wcml2eVNoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHNCQUFzQixtQkFBTyxDQUFDLDJGQUF1QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQscUJBQXFCO0FBQzlFO0FBQ0EsOENBQThDLGlCQUFpQjtBQUMvRDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9wcml2eVNoYXJlZC5qcz8yMzdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVQcml2eUNsaWVudCA9IHZvaWQgMDtcbmV4cG9ydHMuY3JlYXRlUHJpdnlXYWxsZXQgPSBjcmVhdGVQcml2eVdhbGxldDtcbmNvbnN0IHNlcnZlcl9hdXRoXzEgPSByZXF1aXJlKFwiQHByaXZ5LWlvL3NlcnZlci1hdXRoXCIpO1xuLyoqXG4gKiBDcmVhdGUgYSBQcml2eSBjbGllbnRcbiAqXG4gKiBAcGFyYW0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIFByaXZ5IGNsaWVudFxuICogQHJldHVybnMgVGhlIGNyZWF0ZWQgUHJpdnkgY2xpZW50XG4gKi9cbmNvbnN0IGNyZWF0ZVByaXZ5Q2xpZW50ID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBuZXcgc2VydmVyX2F1dGhfMS5Qcml2eUNsaWVudChjb25maWcuYXBwSWQsIGNvbmZpZy5hcHBTZWNyZXQsIHtcbiAgICAgICAgd2FsbGV0QXBpOiBjb25maWcuYXV0aG9yaXphdGlvblByaXZhdGVLZXlcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25Qcml2YXRlS2V5OiBjb25maWcuYXV0aG9yaXphdGlvblByaXZhdGVLZXksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9KTtcbn07XG5leHBvcnRzLmNyZWF0ZVByaXZ5Q2xpZW50ID0gY3JlYXRlUHJpdnlDbGllbnQ7XG4vKipcbiAqIENyZWF0ZSBhIFByaXZ5IHdhbGxldFxuICpcbiAqIEBwYXJhbSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgUHJpdnkgd2FsbGV0XG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBQcml2eSB3YWxsZXRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUHJpdnlXYWxsZXQoY29uZmlnKSB7XG4gICAgY29uc3QgcHJpdnkgPSAoMCwgZXhwb3J0cy5jcmVhdGVQcml2eUNsaWVudCkoY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLndhbGxldElkKSB7XG4gICAgICAgIGNvbnN0IHdhbGxldCA9IGF3YWl0IHByaXZ5LndhbGxldEFwaS5nZXRXYWxsZXQoeyBpZDogY29uZmlnLndhbGxldElkIH0pO1xuICAgICAgICBpZiAoIXdhbGxldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYWxsZXQgd2l0aCBJRCAke2NvbmZpZy53YWxsZXRJZH0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgd2FsbGV0LCBwcml2eSB9O1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmF1dGhvcml6YXRpb25Qcml2YXRlS2V5ICYmICFjb25maWcuYXV0aG9yaXphdGlvbktleUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml6YXRpb25LZXlJZCBpcyByZXF1aXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHdhbGxldCB3aXRoIGFuIGF1dGhvcml6YXRpb24ga2V5LCB0aGlzIGNhbiBiZSBmb3VuZCBpbiB5b3VyIFByaXZ5IERhc2hib2FyZFwiKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5hdXRob3JpemF0aW9uS2V5SWQgJiYgIWNvbmZpZy5hdXRob3JpemF0aW9uUHJpdmF0ZUtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRob3JpemF0aW9uUHJpdmF0ZUtleSBpcyByZXF1aXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHdhbGxldCB3aXRoIGFuIGF1dGhvcml6YXRpb25LZXlJZC4gXCIgK1xuICAgICAgICAgICAgXCJJZiB5b3UgZG9uJ3QgaGF2ZSBpdCwgeW91IGNhbiBjcmVhdGUgYSBuZXcgb25lIGluIHlvdXIgUHJpdnkgRGFzaGJvYXJkLCBvciBkZWxldGUgdGhlIGF1dGhvcml6YXRpb24ga2V5LlwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgcHJpdnkud2FsbGV0QXBpLmNyZWF0ZSh7XG4gICAgICAgICAgICBjaGFpblR5cGU6IGNvbmZpZy5jaGFpblR5cGUsXG4gICAgICAgICAgICBhdXRob3JpemF0aW9uS2V5SWRzOiBjb25maWcuYXV0aG9yaXphdGlvbktleUlkID8gW2NvbmZpZy5hdXRob3JpemF0aW9uS2V5SWRdIDogdW5kZWZpbmVkLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgd2FsbGV0LCBwcml2eSB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiTWlzc2luZyBgcHJpdnktYXV0aG9yaXphdGlvbi1zaWduYXR1cmVgIGhlYWRlclwiKSkge1xuICAgICAgICAgICAgLy8gUHJvdmlkaW5nIGEgbW9yZSBpbmZvcm1hdGl2ZSBlcnJvciBtZXNzYWdlLCBzZWUgY29udGV4dDogaHR0cHM6Ly9naXRodWIuY29tL2NvaW5iYXNlL2FnZW50a2l0L3B1bGwvMjQyI2Rpc2N1c3Npb25fcjE5NTY0Mjg2MTdcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByaXZ5IGVycm9yOiB5b3UgaGF2ZSBhbiBhdXRob3JpemF0aW9uIGtleSBvbiB5b3VyIGFjY291bnQgd2hpY2ggY2FuIGNyZWF0ZSBhbmQgbW9kaWZ5IHdhbGxldHMsIHBsZWFzZSBkZWxldGUgdGhpcyBrZXkgb3IgcGFzcyBpdCB0byB0aGUgUHJpdnlXYWxsZXRQcm92aWRlciB0byBjcmVhdGUgYSBuZXcgd2FsbGV0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgd2FsbGV0XCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyShared.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privySvmWalletProvider.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/privySvmWalletProvider.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PrivySvmWalletProvider_walletId, _PrivySvmWalletProvider_address, _PrivySvmWalletProvider_authorizationPrivateKey, _PrivySvmWalletProvider_privyClient, _PrivySvmWalletProvider_connection, _PrivySvmWalletProvider_genesisHash;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrivySvmWalletProvider = void 0;\nconst svmWalletProvider_1 = __webpack_require__(/*! ./svmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(rsc)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst svm_1 = __webpack_require__(/*! ../network/svm */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/svm.js\");\nconst privyShared_1 = __webpack_require__(/*! ./privyShared */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyShared.js\");\n/**\n * A wallet provider that uses Privy's server wallet API.\n * This provider extends the SvmWalletProvider to provide Privy-specific wallet functionality\n * while maintaining compatibility with the base wallet provider interface.\n */\nclass PrivySvmWalletProvider extends svmWalletProvider_1.SvmWalletProvider {\n    /**\n     * Private constructor to enforce use of factory method.\n     *\n     * @param config - The configuration options for the Privy wallet\n     */\n    constructor(config) {\n        super();\n        _PrivySvmWalletProvider_walletId.set(this, void 0);\n        _PrivySvmWalletProvider_address.set(this, void 0);\n        _PrivySvmWalletProvider_authorizationPrivateKey.set(this, void 0);\n        _PrivySvmWalletProvider_privyClient.set(this, void 0);\n        _PrivySvmWalletProvider_connection.set(this, void 0);\n        _PrivySvmWalletProvider_genesisHash.set(this, void 0);\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_walletId, config.walletId, \"f\");\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_address, config.address, \"f\");\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_authorizationPrivateKey, config.authorizationPrivateKey, \"f\");\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_privyClient, config.privyClient, \"f\");\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_connection, config.connection, \"f\");\n        __classPrivateFieldSet(this, _PrivySvmWalletProvider_genesisHash, config.genesisHash, \"f\");\n    }\n    /**\n     * Creates and configures a new PrivySolanaWalletProvider instance.\n     *\n     * @param config - The configuration options for the Privy wallet\n     * @returns A configured PrivySolanaWalletProvider instance\n     *\n     * @example\n     * ```typescript\n     * const provider = await PrivySolanaWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\",\n     *   walletId: \"wallet-id\",\n     * });\n     * ```\n     */\n    static async configureWithWallet(config) {\n        const { wallet, privy } = await (0, privyShared_1.createPrivyWallet)({\n            ...config,\n            chainType: \"solana\",\n        });\n        const connection = config.connection ??\n            new web3_js_1.Connection((0, web3_js_1.clusterApiUrl)(svm_1.SOLANA_CLUSTER_ID_BY_NETWORK_ID[config.networkId ?? \"\"]));\n        return new PrivySvmWalletProvider({\n            ...config,\n            walletId: wallet.id,\n            address: wallet.address,\n            privyClient: privy,\n            connection,\n            genesisHash: await connection.getGenesisHash(),\n        });\n    }\n    /**\n     * Sign a transaction.\n     *\n     * @param transaction - The transaction to sign.\n     * @returns The signed transaction.\n     */\n    async signTransaction(transaction) {\n        const { signedTransaction } = await __classPrivateFieldGet(this, _PrivySvmWalletProvider_privyClient, \"f\").walletApi.solana.signTransaction({\n            walletId: __classPrivateFieldGet(this, _PrivySvmWalletProvider_walletId, \"f\"),\n            transaction,\n        });\n        return signedTransaction;\n    }\n    /**\n     * Sign and send a transaction.\n     *\n     * @param transaction - The transaction to send.\n     * @returns The transaction hash.\n     */\n    async signAndSendTransaction(transaction) {\n        try {\n            const { hash } = await __classPrivateFieldGet(this, _PrivySvmWalletProvider_privyClient, \"f\").walletApi.solana.signAndSendTransaction({\n                walletId: __classPrivateFieldGet(this, _PrivySvmWalletProvider_walletId, \"f\"),\n                caip2: `solana:${__classPrivateFieldGet(this, _PrivySvmWalletProvider_genesisHash, \"f\").substring(0, 32)}`,\n                transaction,\n            });\n            return hash;\n        }\n        catch (error) {\n            console.error(\"Failed to send transaction\", error);\n            throw new Error(\"Failed to send transaction\");\n        }\n    }\n    /**\n     * Send a transaction.\n     *\n     * @param _ - The transaction to send.\n     * @returns The transaction hash.\n     */\n    async sendTransaction(_) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\n     * Exports the wallet data.\n     *\n     * @returns The wallet data\n     */\n    exportWallet() {\n        return {\n            walletId: __classPrivateFieldGet(this, _PrivySvmWalletProvider_walletId, \"f\"),\n            authorizationPrivateKey: __classPrivateFieldGet(this, _PrivySvmWalletProvider_authorizationPrivateKey, \"f\"),\n            chainId: this.getNetwork().chainId,\n            networkId: this.getNetwork().networkId,\n        };\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The string identifier for this wallet provider\n     */\n    getName() {\n        return \"privy_svm_wallet_provider\";\n    }\n    /**\n     * Get the address of the wallet.\n     *\n     * @returns The address of the wallet.\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _PrivySvmWalletProvider_address, \"f\");\n    }\n    /**\n     * Get the network of the wallet.\n     *\n     * @returns The network of the wallet.\n     */\n    getNetwork() {\n        return svm_1.SOLANA_NETWORKS[__classPrivateFieldGet(this, _PrivySvmWalletProvider_genesisHash, \"f\")];\n    }\n    /**\n     * Get the balance of the wallet.\n     *\n     * @returns The balance of the wallet.\n     */\n    async getBalance() {\n        const balance = await __classPrivateFieldGet(this, _PrivySvmWalletProvider_connection, \"f\").getBalance(new web3_js_1.PublicKey(__classPrivateFieldGet(this, _PrivySvmWalletProvider_address, \"f\")));\n        return BigInt(balance);\n    }\n    /**\n     * Transfer a native token.\n     *\n     * @param _ - The address to transfer the token to.\n     * @param arg2 - The value to transfer.\n     * @returns The transaction hash.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async nativeTransfer(_, arg2) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\n     * Get the status of a transaction.\n     *\n     * @param signature - The transaction signature.\n     * @returns The transaction status.\n     */\n    async getSignatureStatus(signature) {\n        return __classPrivateFieldGet(this, _PrivySvmWalletProvider_connection, \"f\").getSignatureStatus(signature);\n    }\n    /**\n     * Wait for a signature result.\n     *\n     * @param signature - The signature to wait for.\n     * @returns The signature result.\n     */\n    waitForSignatureResult(signature) {\n        return __classPrivateFieldGet(this, _PrivySvmWalletProvider_connection, \"f\").confirmTransaction({\n            signature,\n            ...svm_1.SOLANA_NETWORKS[__classPrivateFieldGet(this, _PrivySvmWalletProvider_genesisHash, \"f\")],\n        });\n    }\n    /**\n     * Get the connection.\n     *\n     * @returns The connection.\n     */\n    getConnection() {\n        return __classPrivateFieldGet(this, _PrivySvmWalletProvider_connection, \"f\");\n    }\n    /**\n     * Get the public key.\n     *\n     * @returns The public key.\n     */\n    getPublicKey() {\n        return new web3_js_1.PublicKey(__classPrivateFieldGet(this, _PrivySvmWalletProvider_address, \"f\"));\n    }\n}\nexports.PrivySvmWalletProvider = PrivySvmWalletProvider;\n_PrivySvmWalletProvider_walletId = new WeakMap(), _PrivySvmWalletProvider_address = new WeakMap(), _PrivySvmWalletProvider_authorizationPrivateKey = new WeakMap(), _PrivySvmWalletProvider_privyClient = new WeakMap(), _PrivySvmWalletProvider_connection = new WeakMap(), _PrivySvmWalletProvider_genesisHash = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privySvmWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyWalletProvider.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/privyWalletProvider.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrivyWalletProvider = void 0;\nconst privyEvmWalletProvider_1 = __webpack_require__(/*! ./privyEvmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmWalletProvider.js\");\nconst privySvmWalletProvider_1 = __webpack_require__(/*! ./privySvmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privySvmWalletProvider.js\");\nconst privyEvmDelegatedEmbeddedWalletProvider_1 = __webpack_require__(/*! ./privyEvmDelegatedEmbeddedWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyEvmDelegatedEmbeddedWalletProvider.js\");\n/**\n * Factory class for creating chain-specific Privy wallet providers\n */\nclass PrivyWalletProvider {\n    /**\n     * Creates and configures a new wallet provider instance based on the chain type and wallet type.\n     *\n     * @param config - The configuration options for the Privy wallet\n     * @returns A configured WalletProvider instance for the specified chain and wallet type\n     *\n     * @example\n     * ```typescript\n     * // For EVM server wallets (default)\n     * const evmWallet = await PrivyWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\"\n     * });\n     *\n     * // For Solana server wallets\n     * const solanaWallet = await PrivyWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\",\n     *   chainType: \"solana\"\n     * });\n     *\n     * // For Ethereum embedded wallets\n     * const embeddedWallet = await PrivyWalletProvider.configureWithWallet({\n     *   appId: \"your-app-id\",\n     *   appSecret: \"your-app-secret\",\n     *   walletId: \"delegated-wallet-id\",\n     *   walletType: \"embedded\"\n     * });\n     * ```\n     */\n    static async configureWithWallet(config) {\n        const chainType = config.chainType || \"ethereum\";\n        const walletType = config.walletType || \"server\";\n        switch (chainType) {\n            case \"ethereum\": {\n                switch (walletType) {\n                    case \"server\":\n                        return (await privyEvmWalletProvider_1.PrivyEvmWalletProvider.configureWithWallet(config));\n                    case \"embedded\":\n                        return (await privyEvmDelegatedEmbeddedWalletProvider_1.PrivyEvmDelegatedEmbeddedWalletProvider.configureWithWallet(config));\n                    default:\n                        throw new Error(\"Invalid wallet type\");\n                }\n            }\n            case \"solana\": {\n                switch (walletType) {\n                    case \"server\":\n                        return (await privySvmWalletProvider_1.PrivySvmWalletProvider.configureWithWallet(config));\n                    case \"embedded\":\n                        throw new Error(\"Embedded wallets are not supported for Solana\");\n                    default:\n                        throw new Error(\"Invalid wallet type\");\n                }\n            }\n            default: {\n                throw new Error(\"Invalid chain type\");\n            }\n        }\n    }\n}\nexports.PrivyWalletProvider = PrivyWalletProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9wcml2eVdhbGxldFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQixpQ0FBaUMsbUJBQU8sQ0FBQyx5SEFBMEI7QUFDbkUsaUNBQWlDLG1CQUFPLENBQUMseUhBQTBCO0FBQ25FLGtEQUFrRCxtQkFBTyxDQUFDLDJKQUEyQztBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC93YWxsZXQtcHJvdmlkZXJzL3ByaXZ5V2FsbGV0UHJvdmlkZXIuanM/OWFjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJpdnlXYWxsZXRQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IHByaXZ5RXZtV2FsbGV0UHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3ByaXZ5RXZtV2FsbGV0UHJvdmlkZXJcIik7XG5jb25zdCBwcml2eVN2bVdhbGxldFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcml2eVN2bVdhbGxldFByb3ZpZGVyXCIpO1xuY29uc3QgcHJpdnlFdm1EZWxlZ2F0ZWRFbWJlZGRlZFdhbGxldFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcml2eUV2bURlbGVnYXRlZEVtYmVkZGVkV2FsbGV0UHJvdmlkZXJcIik7XG4vKipcbiAqIEZhY3RvcnkgY2xhc3MgZm9yIGNyZWF0aW5nIGNoYWluLXNwZWNpZmljIFByaXZ5IHdhbGxldCBwcm92aWRlcnNcbiAqL1xuY2xhc3MgUHJpdnlXYWxsZXRQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgY29uZmlndXJlcyBhIG5ldyB3YWxsZXQgcHJvdmlkZXIgaW5zdGFuY2UgYmFzZWQgb24gdGhlIGNoYWluIHR5cGUgYW5kIHdhbGxldCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBQcml2eSB3YWxsZXRcbiAgICAgKiBAcmV0dXJucyBBIGNvbmZpZ3VyZWQgV2FsbGV0UHJvdmlkZXIgaW5zdGFuY2UgZm9yIHRoZSBzcGVjaWZpZWQgY2hhaW4gYW5kIHdhbGxldCB0eXBlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBGb3IgRVZNIHNlcnZlciB3YWxsZXRzIChkZWZhdWx0KVxuICAgICAqIGNvbnN0IGV2bVdhbGxldCA9IGF3YWl0IFByaXZ5V2FsbGV0UHJvdmlkZXIuY29uZmlndXJlV2l0aFdhbGxldCh7XG4gICAgICogICBhcHBJZDogXCJ5b3VyLWFwcC1pZFwiLFxuICAgICAqICAgYXBwU2VjcmV0OiBcInlvdXItYXBwLXNlY3JldFwiXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBGb3IgU29sYW5hIHNlcnZlciB3YWxsZXRzXG4gICAgICogY29uc3Qgc29sYW5hV2FsbGV0ID0gYXdhaXQgUHJpdnlXYWxsZXRQcm92aWRlci5jb25maWd1cmVXaXRoV2FsbGV0KHtcbiAgICAgKiAgIGFwcElkOiBcInlvdXItYXBwLWlkXCIsXG4gICAgICogICBhcHBTZWNyZXQ6IFwieW91ci1hcHAtc2VjcmV0XCIsXG4gICAgICogICBjaGFpblR5cGU6IFwic29sYW5hXCJcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIEZvciBFdGhlcmV1bSBlbWJlZGRlZCB3YWxsZXRzXG4gICAgICogY29uc3QgZW1iZWRkZWRXYWxsZXQgPSBhd2FpdCBQcml2eVdhbGxldFByb3ZpZGVyLmNvbmZpZ3VyZVdpdGhXYWxsZXQoe1xuICAgICAqICAgYXBwSWQ6IFwieW91ci1hcHAtaWRcIixcbiAgICAgKiAgIGFwcFNlY3JldDogXCJ5b3VyLWFwcC1zZWNyZXRcIixcbiAgICAgKiAgIHdhbGxldElkOiBcImRlbGVnYXRlZC13YWxsZXQtaWRcIixcbiAgICAgKiAgIHdhbGxldFR5cGU6IFwiZW1iZWRkZWRcIlxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjb25maWd1cmVXaXRoV2FsbGV0KGNvbmZpZykge1xuICAgICAgICBjb25zdCBjaGFpblR5cGUgPSBjb25maWcuY2hhaW5UeXBlIHx8IFwiZXRoZXJldW1cIjtcbiAgICAgICAgY29uc3Qgd2FsbGV0VHlwZSA9IGNvbmZpZy53YWxsZXRUeXBlIHx8IFwic2VydmVyXCI7XG4gICAgICAgIHN3aXRjaCAoY2hhaW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZXRoZXJldW1cIjoge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAod2FsbGV0VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2VydmVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGF3YWl0IHByaXZ5RXZtV2FsbGV0UHJvdmlkZXJfMS5Qcml2eUV2bVdhbGxldFByb3ZpZGVyLmNvbmZpZ3VyZVdpdGhXYWxsZXQoY29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbWJlZGRlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBwcml2eUV2bURlbGVnYXRlZEVtYmVkZGVkV2FsbGV0UHJvdmlkZXJfMS5Qcml2eUV2bURlbGVnYXRlZEVtYmVkZGVkV2FsbGV0UHJvdmlkZXIuY29uZmlndXJlV2l0aFdhbGxldChjb25maWcpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgd2FsbGV0IHR5cGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInNvbGFuYVwiOiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh3YWxsZXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZXJ2ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXdhaXQgcHJpdnlTdm1XYWxsZXRQcm92aWRlcl8xLlByaXZ5U3ZtV2FsbGV0UHJvdmlkZXIuY29uZmlndXJlV2l0aFdhbGxldChjb25maWcpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVtYmVkZGVkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbWJlZGRlZCB3YWxsZXRzIGFyZSBub3Qgc3VwcG9ydGVkIGZvciBTb2xhbmFcIik7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHdhbGxldCB0eXBlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYWluIHR5cGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByaXZ5V2FsbGV0UHJvdmlkZXIgPSBQcml2eVdhbGxldFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/privyWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/smartWalletProvider.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/smartWalletProvider.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SmartWalletProvider_smartWallet, _SmartWalletProvider_network, _SmartWalletProvider_publicClient;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmartWalletProvider = void 0;\nconst coinbase_sdk_1 = __webpack_require__(/*! @coinbase/coinbase-sdk */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst network_1 = __webpack_require__(/*! ../network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/index.js\");\nconst evmWalletProvider_1 = __webpack_require__(/*! ./evmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js\");\nconst package_json_1 = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@coinbase/agentkit/package.json\");\n/**\n * A wallet provider that uses Smart Wallets from the Coinbase SDK.\n */\nclass SmartWalletProvider extends evmWalletProvider_1.EvmWalletProvider {\n    /**\n     * Constructs a new CdpWalletProvider.\n     *\n     * @param config - The configuration options for the CdpWalletProvider.\n     */\n    constructor(config) {\n        super();\n        _SmartWalletProvider_smartWallet.set(this, void 0);\n        _SmartWalletProvider_network.set(this, void 0);\n        _SmartWalletProvider_publicClient.set(this, void 0);\n        __classPrivateFieldSet(this, _SmartWalletProvider_network, config.network, \"f\");\n        __classPrivateFieldSet(this, _SmartWalletProvider_smartWallet, config.smartWallet, \"f\");\n        __classPrivateFieldSet(this, _SmartWalletProvider_publicClient, (0, viem_1.createPublicClient)({\n            chain: network_1.NETWORK_ID_TO_VIEM_CHAIN[config.network.networkId],\n            transport: (0, viem_1.http)(),\n        }), \"f\");\n    }\n    /**\n     * Configures and returns a `SmartWalletProvider` instance using the provided configuration options.\n     * This method initializes a smart wallet based on the given network and credentials.\n     *\n     * @param {ConfigureSmartWalletOptions} config\n     *   - Configuration parameters for setting up the smart wallet.\n     *\n     * @returns {Promise<SmartWalletProvider>}\n     *   - A promise that resolves to an instance of `SmartWalletProvider` configured with the provided settings.\n     *\n     * @throws {Error}\n     *   - If networkId is not a supported network.\n     *\n     * @example\n     * ```typescript\n     * const smartWalletProvider = await SmartWalletProvider.configureWithWallet({\n     *   networkId: \"base-sepolia\",\n     *   signer: privateKeyToAccount(\"0xethprivatekey\"),\n     *   cdpApiKeyName: \"my-api-key\",\n     *   cdpApiKeyPrivateKey: \"my-private-key\",\n     *   smartWalletAddress: \"0x123456...\",\n     * });\n     * ```\n     */\n    static async configureWithWallet(config) {\n        const networkId = config.networkId || process.env.NETWORK_ID || coinbase_sdk_1.Coinbase.networks.BaseSepolia;\n        const network = {\n            protocolFamily: \"evm\",\n            chainId: network_1.NETWORK_ID_TO_CHAIN_ID[networkId],\n            networkId,\n        };\n        if (!network.chainId) {\n            throw new Error(`Unable to determine chainId for network ${networkId}`);\n        }\n        const supportedChainIds = Object.keys(coinbase_sdk_1.CHAIN_ID_TO_NETWORK_ID);\n        if (!supportedChainIds.includes(network.chainId)) {\n            throw new Error(`Invalid chain id ${network.chainId}. Chain id must be one of ${supportedChainIds.join(\", \")}`);\n        }\n        const cdpApiKeyName = config.cdpApiKeyName || process.env.CDP_API_KEY_NAME;\n        const cdpApiKeyPrivateKey = config.cdpApiKeyPrivateKey || process.env.CDP_API_KEY_PRIVATE_KEY;\n        if (cdpApiKeyName && cdpApiKeyPrivateKey) {\n            coinbase_sdk_1.Coinbase.configure({\n                apiKeyName: cdpApiKeyName,\n                privateKey: cdpApiKeyPrivateKey?.replace(/\\\\n/g, \"\\n\"),\n                source: \"agentkit\",\n                sourceVersion: package_json_1.version,\n            });\n        }\n        else {\n            coinbase_sdk_1.Coinbase.configureFromJson({ source: \"agentkit\", sourceVersion: package_json_1.version });\n        }\n        const smartWallet = config.smartWalletAddress\n            ? (0, coinbase_sdk_1.toSmartWallet)({\n                signer: config.signer,\n                smartWalletAddress: config.smartWalletAddress,\n            })\n            : await (0, coinbase_sdk_1.createSmartWallet)({\n                signer: config.signer,\n            });\n        const networkScopedSmartWallet = smartWallet.useNetwork({\n            chainId: Number(network.chainId),\n            paymasterUrl: config.paymasterUrl,\n        });\n        const smartWalletProvider = new SmartWalletProvider({\n            smartWallet: networkScopedSmartWallet,\n            network,\n            chainId: network.chainId,\n        });\n        return smartWalletProvider;\n    }\n    /**\n     * Stub for message signing\n     *\n     * @throws as signing messages is not implemented for SmartWallets.\n     *\n     * @param _ - The message to sign.\n     * @returns The signed message.\n     */\n    async signMessage(_) {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Stub for typed data signing\n     *\n     * @throws as signing typed data is not implemented for SmartWallets.\n     *\n     * @param _ - The typed data object to sign.\n     * @returns The signed typed data object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async signTypedData(_) {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Stub for transaction signing\n     *\n     * @throws as signing transactions is not implemented for SmartWallets.\n     *\n     * @param _ - The transaction to sign.\n     * @returns The signed transaction.\n     */\n    async signTransaction(_) {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Sends a transaction using the smart wallet.\n     *\n     * Unlike traditional Ethereum transactions, this method submits a **User Operation**\n     * instead of directly broadcasting a transaction. The smart wallet handles execution,\n     * but a standard transaction hash is still returned upon completion.\n     *\n     * @param {TransactionRequest} transaction - The transaction details, including:\n     *   - `to`: The recipient address.\n     *   - `value`: The amount of ETH (or native token) to send.\n     *   - `data`: Optional calldata for contract interactions.\n     *\n     * @returns A promise resolving to the transaction hash (`0x...`).\n     *\n     * @throws {Error} If the transaction does not complete successfully.\n     *\n     * @example\n     * ```typescript\n     * const txHash = await smartWallet.sendTransaction({\n     *   to: \"0x123...\",\n     *   value: parseEther(\"0.1\"),\n     *   data: \"0x\",\n     * });\n     * console.log(`Transaction sent: ${txHash}`);\n     * ```\n     */\n    sendTransaction(transaction) {\n        const { to, value, data } = transaction;\n        return this.sendUserOperation({\n            calls: [\n                {\n                    to: to,\n                    value,\n                    data,\n                },\n            ],\n        });\n    }\n    /**\n     * Sends a **User Operation** to the smart wallet.\n     *\n     * This method directly exposes the **sendUserOperation** functionality, allowing\n     * **SmartWallet-aware tools** to fully leverage its capabilities, including batching multiple calls.\n     * Unlike `sendTransaction`, which wraps calls in a single operation, this method allows\n     * direct execution of arbitrary operations within a **User Operation**.\n     *\n     * @param {Omit<SendUserOperationOptions<T>, \"chainId\" | \"paymasterUrl\">} operation\n     *   - The user operation configuration, omitting `chainId` and `paymasterUrl`,\n     *     which are managed internally by the smart wallet.\n     *\n     * @returns A promise resolving to the transaction hash (`0x...`) if the operation completes successfully.\n     *\n     * @throws {Error} If the operation does not complete successfully.\n     *\n     * @example\n     * ```typescript\n     * const txHash = await smartWallet.sendUserOperation({\n     *   calls: [\n     *     { to: \"0x123...\", value: parseEther(\"0.1\"), data: \"0x\" },\n     *     { to: \"0x456...\", value: parseEther(\"0.05\"), data: \"0x\" }\n     *   ],\n     * });\n     * console.log(`User Operation sent: ${txHash}`);\n     * ```\n     */\n    async sendUserOperation(operation) {\n        const sendUserOperationResult = await __classPrivateFieldGet(this, _SmartWalletProvider_smartWallet, \"f\").sendUserOperation(operation);\n        const result = await (0, coinbase_sdk_1.waitForUserOperation)(sendUserOperationResult);\n        if (result.status === \"complete\") {\n            return result.transactionHash;\n        }\n        else {\n            throw new Error(`Transaction failed with status ${result.status}`);\n        }\n    }\n    /**\n     * Gets the address of the smart wallet.\n     *\n     * @returns The address of the smart wallet.\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _SmartWalletProvider_smartWallet, \"f\").address;\n    }\n    /**\n     * Gets the network of the wallet.\n     *\n     * @returns The network of the wallet.\n     */\n    getNetwork() {\n        return __classPrivateFieldGet(this, _SmartWalletProvider_network, \"f\");\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The name of the wallet provider.\n     */\n    getName() {\n        return \"cdp_smart_wallet_provider\";\n    }\n    /**\n     * Gets the balance of the wallet.\n     *\n     * @returns The balance of the wallet in wei\n     */\n    async getBalance() {\n        const balance = await __classPrivateFieldGet(this, _SmartWalletProvider_publicClient, \"f\").getBalance({\n            address: this.getAddress(),\n        });\n        return balance;\n    }\n    /**\n     * Waits for a transaction receipt.\n     *\n     * @param txHash - The hash of the transaction to wait for.\n     * @returns The transaction receipt.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    waitForTransactionReceipt(txHash) {\n        return __classPrivateFieldGet(this, _SmartWalletProvider_publicClient, \"f\").waitForTransactionReceipt({\n            hash: txHash,\n        });\n    }\n    /**\n     * Reads a contract.\n     *\n     * @param params - The parameters to read the contract.\n     * @returns The response from the contract.\n     */\n    async readContract(params) {\n        return __classPrivateFieldGet(this, _SmartWalletProvider_publicClient, \"f\").readContract(params);\n    }\n    /**\n     * Transfer the native asset of the network.\n     *\n     * @param to - The destination address.\n     * @param value - The amount to transfer in Wei.\n     * @returns The transaction hash.\n     */\n    async nativeTransfer(to, value) {\n        const sendUserOperationResult = await __classPrivateFieldGet(this, _SmartWalletProvider_smartWallet, \"f\").sendUserOperation({\n            calls: [\n                {\n                    to,\n                    value: BigInt(value),\n                },\n            ],\n        });\n        const result = await (0, coinbase_sdk_1.waitForUserOperation)(sendUserOperationResult);\n        if (result.status === \"complete\") {\n            return result.transactionHash;\n        }\n        else {\n            throw new Error(`Transfer failed with status ${result.status}`);\n        }\n    }\n}\nexports.SmartWalletProvider = SmartWalletProvider;\n_SmartWalletProvider_smartWallet = new WeakMap(), _SmartWalletProvider_network = new WeakMap(), _SmartWalletProvider_publicClient = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/smartWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/solanaKeypairWalletProvider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/solanaKeypairWalletProvider.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _SolanaKeypairWalletProvider_keypair, _SolanaKeypairWalletProvider_connection, _SolanaKeypairWalletProvider_genesisHash;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SolanaKeypairWalletProvider = void 0;\nconst svmWalletProvider_1 = __webpack_require__(/*! ./svmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(rsc)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(rsc)/./node_modules/@coinbase/agentkit/node_modules/bs58/index.js\"));\nconst svm_1 = __webpack_require__(/*! ../network/svm */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/svm.js\");\n/**\n * SolanaKeypairWalletProvider is a wallet provider that uses a local Solana keypair.\n *\n * @augments SvmWalletProvider\n */\nclass SolanaKeypairWalletProvider extends svmWalletProvider_1.SvmWalletProvider {\n    /**\n     * Creates a new SolanaKeypairWalletProvider\n     *\n     * @param args - Configuration arguments\n     * @param args.keypair - Either a Uint8Array or a base58 encoded string representing a 32-byte secret key\n     * @param args.rpcUrl - URL of the Solana RPC endpoint\n     * @param args.genesisHash - The genesis hash of the network\n     */\n    constructor({ keypair, rpcUrl, genesisHash, }) {\n        super();\n        _SolanaKeypairWalletProvider_keypair.set(this, void 0);\n        _SolanaKeypairWalletProvider_connection.set(this, void 0);\n        _SolanaKeypairWalletProvider_genesisHash.set(this, void 0);\n        __classPrivateFieldSet(this, _SolanaKeypairWalletProvider_keypair, typeof keypair === \"string\"\n            ? web3_js_1.Keypair.fromSecretKey(bs58_1.default.decode(keypair))\n            : web3_js_1.Keypair.fromSecretKey(keypair), \"f\");\n        __classPrivateFieldSet(this, _SolanaKeypairWalletProvider_connection, new web3_js_1.Connection(rpcUrl), \"f\");\n        if (genesisHash in svm_1.SOLANA_NETWORKS) {\n            __classPrivateFieldSet(this, _SolanaKeypairWalletProvider_genesisHash, genesisHash, \"f\");\n        }\n        else {\n            throw new Error(`Unknown network with genesis hash: ${genesisHash}`);\n        }\n    }\n    /**\n     * Get the default RPC URL for a Solana cluster\n     *\n     * @param cluster - The cluster to get the RPC URL for\n     * @returns The RPC URL for the cluster\n     */\n    static urlForCluster(cluster) {\n        if (cluster in svm_1.SOLANA_NETWORKS) {\n            switch (cluster) {\n                case svm_1.SOLANA_MAINNET_GENESIS_BLOCK_HASH:\n                    return (0, web3_js_1.clusterApiUrl)(\"mainnet-beta\");\n                case svm_1.SOLANA_TESTNET_GENESIS_BLOCK_HASH:\n                    return (0, web3_js_1.clusterApiUrl)(\"testnet\");\n                case svm_1.SOLANA_DEVNET_GENESIS_BLOCK_HASH:\n                    return (0, web3_js_1.clusterApiUrl)(\"devnet\");\n                default:\n                    throw new Error(`Unknown cluster: ${cluster}`);\n            }\n        }\n        else {\n            throw new Error(`Unknown cluster: ${cluster}`);\n        }\n    }\n    /**\n     * Create a new SolanaKeypairWalletProvider from an SVM networkId and a keypair\n     *\n     * @param networkId - The SVM networkId\n     * @param keypair - Either a Uint8Array or a base58 encoded string representing a 32-byte secret key\n     * @returns The new SolanaKeypairWalletProvider\n     */\n    static async fromNetwork(networkId, keypair) {\n        let genesisHash;\n        switch (networkId) {\n            case svm_1.SOLANA_MAINNET_NETWORK_ID:\n                genesisHash = svm_1.SOLANA_MAINNET_GENESIS_BLOCK_HASH;\n                break;\n            case svm_1.SOLANA_DEVNET_NETWORK_ID:\n                genesisHash = svm_1.SOLANA_DEVNET_GENESIS_BLOCK_HASH;\n                break;\n            case svm_1.SOLANA_TESTNET_NETWORK_ID:\n                genesisHash = svm_1.SOLANA_TESTNET_GENESIS_BLOCK_HASH;\n                break;\n            default:\n                throw new Error(`${networkId} is not a valid SVM networkId`);\n        }\n        const rpcUrl = this.urlForCluster(genesisHash);\n        return await this.fromRpcUrl(rpcUrl, keypair);\n    }\n    /**\n     * Create a new SolanaKeypairWalletProvider from an RPC URL and a keypair\n     *\n     * @param rpcUrl - The URL of the Solana RPC endpoint\n     * @param keypair - Either a Uint8Array or a base58 encoded string representing a 32-byte secret key\n     * @returns The new SolanaKeypairWalletProvider\n     */\n    static async fromRpcUrl(rpcUrl, keypair) {\n        const connection = new web3_js_1.Connection(rpcUrl);\n        return await this.fromConnection(connection, keypair);\n    }\n    /**\n     * Create a new SolanaKeypairWalletProvider from a Connection and a keypair\n     *\n     * @param connection - The Connection to use\n     * @param keypair - Either a Uint8Array or a base58 encoded string representing a 32-byte secret key\n     * @returns The new SolanaKeypairWalletProvider\n     */\n    static async fromConnection(connection, keypair) {\n        const genesisHash = await connection.getGenesisHash();\n        return new SolanaKeypairWalletProvider({\n            keypair,\n            rpcUrl: connection.rpcEndpoint,\n            genesisHash: genesisHash,\n        });\n    }\n    /**\n     * Get the connection instance\n     *\n     * @returns The Solana connection instance\n     */\n    getConnection() {\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\");\n    }\n    /**\n     * Get the public key of the wallet\n     *\n     * @returns The wallet's public key\n     */\n    getPublicKey() {\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey;\n    }\n    /**\n     * Get the address of the wallet\n     *\n     * @returns The base58 encoded address of the wallet\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey.toBase58();\n    }\n    /**\n     * Get the network\n     *\n     * @returns The network\n     */\n    getNetwork() {\n        return svm_1.SOLANA_NETWORKS[__classPrivateFieldGet(this, _SolanaKeypairWalletProvider_genesisHash, \"f\")];\n    }\n    /**\n     * Sign a transaction\n     *\n     * @param transaction - The transaction to sign\n     * @returns The signed transaction\n     */\n    async signTransaction(transaction) {\n        transaction.sign([__classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\")]);\n        return transaction;\n    }\n    /**\n     * Send a transaction\n     *\n     * @param transaction - The transaction to send\n     * @returns The signature\n     */\n    async sendTransaction(transaction) {\n        const signature = await __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").sendTransaction(transaction);\n        await this.waitForSignatureResult(signature);\n        return signature;\n    }\n    /**\n     * Sign and send a transaction\n     *\n     * @param transaction - The transaction to sign and send\n     * @returns The signature\n     */\n    async signAndSendTransaction(transaction) {\n        const signedTransaction = await this.signTransaction(transaction);\n        return this.sendTransaction(signedTransaction);\n    }\n    /**\n     * Get the status of a transaction\n     *\n     * @param signature - The signature\n     * @param options - The options for the status\n     * @returns The status\n     */\n    async getSignatureStatus(signature, options) {\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").getSignatureStatus(signature, options);\n    }\n    /**\n     * Wait for signature receipt\n     *\n     * @param signature - The signature\n     * @returns The confirmation response\n     */\n    async waitForSignatureResult(signature) {\n        const { blockhash, lastValidBlockHeight } = await __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").getLatestBlockhash();\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").confirmTransaction({\n            signature: signature,\n            lastValidBlockHeight,\n            blockhash,\n        });\n    }\n    /**\n     * Get the name of the wallet provider\n     *\n     * @returns The name of the wallet provider\n     */\n    getName() {\n        return \"solana_keypair_wallet_provider\";\n    }\n    /**\n     * Get the balance of the wallet\n     *\n     * @returns The balance of the wallet\n     */\n    getBalance() {\n        return __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").getBalance(__classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey).then(balance => BigInt(balance));\n    }\n    /**\n     * Transfer SOL from the wallet to another address\n     *\n     * @param to - The base58 encoded address to transfer the SOL to\n     * @param value - The amount of SOL to transfer (as a decimal string, e.g. \"0.0001\")\n     * @returns The signature\n     */\n    async nativeTransfer(to, value) {\n        const initialBalance = await this.getBalance();\n        const solAmount = parseFloat(value);\n        const lamports = BigInt(Math.floor(solAmount * web3_js_1.LAMPORTS_PER_SOL));\n        // Check if we have enough balance (including estimated fees)\n        if (initialBalance < lamports + BigInt(5000)) {\n            throw new Error(`Insufficient balance. Have ${Number(initialBalance) / web3_js_1.LAMPORTS_PER_SOL} SOL, need ${solAmount + 0.000005} SOL (including fees)`);\n        }\n        const toPubkey = new web3_js_1.PublicKey(to);\n        const instructions = [\n            web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({\n                microLamports: 10000,\n            }),\n            web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n                units: 2000,\n            }),\n            web3_js_1.SystemProgram.transfer({\n                fromPubkey: __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey,\n                toPubkey: toPubkey,\n                lamports: lamports,\n            }),\n        ];\n        const tx = new web3_js_1.VersionedTransaction(web3_js_1.MessageV0.compile({\n            payerKey: __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey,\n            instructions: instructions,\n            recentBlockhash: (await __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").getLatestBlockhash()).blockhash,\n        }));\n        tx.sign([__classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\")]);\n        const signature = await __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").sendTransaction(tx);\n        await this.waitForSignatureResult(signature);\n        return signature;\n    }\n    /**\n     * Request SOL tokens from the Solana faucet. This method only works on devnet and testnet networks.\n     *\n     * @param lamports - The amount of lamports (1 SOL = 1,000,000,000 lamports) to request from the faucet\n     * @returns A Promise that resolves to the signature of the airdrop\n     */\n    async requestAirdrop(lamports) {\n        return await __classPrivateFieldGet(this, _SolanaKeypairWalletProvider_connection, \"f\").requestAirdrop(__classPrivateFieldGet(this, _SolanaKeypairWalletProvider_keypair, \"f\").publicKey, lamports);\n    }\n}\nexports.SolanaKeypairWalletProvider = SolanaKeypairWalletProvider;\n_SolanaKeypairWalletProvider_keypair = new WeakMap(), _SolanaKeypairWalletProvider_connection = new WeakMap(), _SolanaKeypairWalletProvider_genesisHash = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/solanaKeypairWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SvmWalletProvider = void 0;\nconst walletProvider_1 = __webpack_require__(/*! ./walletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js\");\n/**\n * SvmWalletProvider is the abstract base class for all Solana wallet providers (non browsers).\n *\n * @abstract\n */\nclass SvmWalletProvider extends walletProvider_1.WalletProvider {\n}\nexports.SvmWalletProvider = SvmWalletProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9zdm1XYWxsZXRQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix5QkFBeUIsbUJBQU8sQ0FBQyx5R0FBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy9zdm1XYWxsZXRQcm92aWRlci5qcz82N2FkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Tdm1XYWxsZXRQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IHdhbGxldFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi93YWxsZXRQcm92aWRlclwiKTtcbi8qKlxuICogU3ZtV2FsbGV0UHJvdmlkZXIgaXMgdGhlIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGFsbCBTb2xhbmEgd2FsbGV0IHByb3ZpZGVycyAobm9uIGJyb3dzZXJzKS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgU3ZtV2FsbGV0UHJvdmlkZXIgZXh0ZW5kcyB3YWxsZXRQcm92aWRlcl8xLldhbGxldFByb3ZpZGVyIHtcbn1cbmV4cG9ydHMuU3ZtV2FsbGV0UHJvdmlkZXIgPSBTdm1XYWxsZXRQcm92aWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/svmWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/viemWalletProvider.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/viemWalletProvider.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// TODO: Improve type safety\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ViemWalletProvider_walletClient, _ViemWalletProvider_publicClient, _ViemWalletProvider_gasLimitMultiplier, _ViemWalletProvider_feePerGasMultiplier;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ViemWalletProvider = void 0;\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst evmWalletProvider_1 = __webpack_require__(/*! ./evmWalletProvider */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/evmWalletProvider.js\");\nconst network_1 = __webpack_require__(/*! ../network/network */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/network/network.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/utils.js\");\n/**\n * A wallet provider that uses the Viem library.\n */\nclass ViemWalletProvider extends evmWalletProvider_1.EvmWalletProvider {\n    /**\n     * Constructs a new ViemWalletProvider.\n     *\n     * @param walletClient - The wallet client.\n     * @param gasConfig - Configuration for gas multipliers.\n     */\n    constructor(walletClient, gasConfig) {\n        super();\n        _ViemWalletProvider_walletClient.set(this, void 0);\n        _ViemWalletProvider_publicClient.set(this, void 0);\n        _ViemWalletProvider_gasLimitMultiplier.set(this, void 0);\n        _ViemWalletProvider_feePerGasMultiplier.set(this, void 0);\n        __classPrivateFieldSet(this, _ViemWalletProvider_walletClient, walletClient, \"f\");\n        __classPrivateFieldSet(this, _ViemWalletProvider_publicClient, (0, viem_1.createPublicClient)({\n            chain: walletClient.chain,\n            transport: (0, viem_1.http)(),\n        }), \"f\");\n        __classPrivateFieldSet(this, _ViemWalletProvider_gasLimitMultiplier, Math.max(gasConfig?.gasLimitMultiplier ?? 1.2, 1), \"f\");\n        __classPrivateFieldSet(this, _ViemWalletProvider_feePerGasMultiplier, Math.max(gasConfig?.feePerGasMultiplier ?? 1, 1), \"f\");\n    }\n    /**\n     * Signs a message.\n     *\n     * @param message - The message to sign.\n     * @returns The signed message.\n     */\n    async signMessage(message) {\n        const account = __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account;\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        return __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").signMessage({ account, message });\n    }\n    /**\n     * Signs a typed data object.\n     *\n     * @param typedData - The typed data object to sign.\n     * @returns The signed typed data object.\n     */\n    async signTypedData(typedData) {\n        return __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").signTypedData({\n            account: __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account,\n            domain: typedData.domain,\n            types: typedData.types,\n            primaryType: typedData.primaryType,\n            message: typedData.message,\n        });\n    }\n    /**\n     * Signs a transaction.\n     *\n     * @param transaction - The transaction to sign.\n     * @returns The signed transaction.\n     */\n    async signTransaction(transaction) {\n        const txParams = {\n            account: __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account,\n            to: transaction.to,\n            value: transaction.value,\n            data: transaction.data,\n            chain: __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").chain,\n        };\n        return __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").signTransaction(txParams);\n    }\n    /**\n     * Sends a transaction.\n     *\n     * @param transaction - The transaction to send.\n     * @returns The hash of the transaction.\n     */\n    async sendTransaction(transaction) {\n        const account = __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account;\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        const chain = __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").chain;\n        if (!chain) {\n            throw new Error(\"Chain not found\");\n        }\n        const feeData = await __classPrivateFieldGet(this, _ViemWalletProvider_publicClient, \"f\").estimateFeesPerGas();\n        const maxFeePerGas = (0, utils_1.applyGasMultiplier)(feeData.maxFeePerGas, __classPrivateFieldGet(this, _ViemWalletProvider_feePerGasMultiplier, \"f\"));\n        const maxPriorityFeePerGas = (0, utils_1.applyGasMultiplier)(feeData.maxPriorityFeePerGas, __classPrivateFieldGet(this, _ViemWalletProvider_feePerGasMultiplier, \"f\"));\n        const gasLimit = await __classPrivateFieldGet(this, _ViemWalletProvider_publicClient, \"f\").estimateGas({\n            account,\n            to: transaction.to,\n            value: transaction.value,\n            data: transaction.data,\n        });\n        const gas = BigInt(Math.round(Number(gasLimit) * __classPrivateFieldGet(this, _ViemWalletProvider_gasLimitMultiplier, \"f\")));\n        const txParams = {\n            account: account,\n            chain: chain,\n            data: transaction.data,\n            to: transaction.to,\n            value: transaction.value,\n            gas,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n        };\n        return __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").sendTransaction(txParams);\n    }\n    /**\n     * Gets the address of the wallet.\n     *\n     * @returns The address of the wallet.\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account?.address ?? \"\";\n    }\n    /**\n     * Gets the network of the wallet.\n     *\n     * @returns The network of the wallet.\n     */\n    getNetwork() {\n        return {\n            protocolFamily: \"evm\",\n            chainId: String(__classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").chain.id),\n            networkId: network_1.CHAIN_ID_TO_NETWORK_ID[__classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").chain.id],\n        };\n    }\n    /**\n     * Gets the name of the wallet provider.\n     *\n     * @returns The name of the wallet provider.\n     */\n    getName() {\n        return \"viem_wallet_provider\";\n    }\n    /**\n     * Gets the balance of the wallet.\n     *\n     * @returns The balance of the wallet.\n     */\n    async getBalance() {\n        const account = __classPrivateFieldGet(this, _ViemWalletProvider_walletClient, \"f\").account;\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        return __classPrivateFieldGet(this, _ViemWalletProvider_publicClient, \"f\").getBalance({ address: account.address });\n    }\n    /**\n     * Waits for a transaction receipt.\n     *\n     * @param txHash - The hash of the transaction to wait for.\n     * @returns The transaction receipt.\n     */\n    async waitForTransactionReceipt(txHash) {\n        return await __classPrivateFieldGet(this, _ViemWalletProvider_publicClient, \"f\").waitForTransactionReceipt({ hash: txHash });\n    }\n    /**\n     * Reads a contract.\n     *\n     * @param params - The parameters to read the contract.\n     * @returns The response from the contract.\n     */\n    async readContract(params) {\n        return __classPrivateFieldGet(this, _ViemWalletProvider_publicClient, \"f\").readContract(params);\n    }\n    /**\n     * Transfer the native asset of the network.\n     *\n     * @param to - The destination address.\n     * @param value - The amount to transfer in whole units (e.g. ETH)\n     * @returns The transaction hash.\n     */\n    async nativeTransfer(to, value) {\n        const atomicAmount = (0, viem_1.parseEther)(value);\n        const tx = await this.sendTransaction({\n            to: to,\n            value: atomicAmount,\n        });\n        const receipt = await this.waitForTransactionReceipt(tx);\n        if (!receipt) {\n            throw new Error(\"Transaction failed\");\n        }\n        return receipt.transactionHash;\n    }\n}\nexports.ViemWalletProvider = ViemWalletProvider;\n_ViemWalletProvider_walletClient = new WeakMap(), _ViemWalletProvider_publicClient = new WeakMap(), _ViemWalletProvider_gasLimitMultiplier = new WeakMap(), _ViemWalletProvider_feePerGasMultiplier = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/viemWalletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletProvider = void 0;\nconst analytics_1 = __webpack_require__(/*! ../analytics */ \"(rsc)/./node_modules/@coinbase/agentkit/dist/analytics/index.js\");\n/**\n * WalletProvider is the abstract base class for all wallet providers.\n *\n * @abstract\n */\nclass WalletProvider {\n    /**\n     * Initializes the wallet provider.\n     */\n    constructor() {\n        // Wait for the next tick to ensure child class is initialized\n        Promise.resolve().then(() => {\n            this.trackInitialization();\n        });\n    }\n    /**\n     * Tracks the initialization of the wallet provider.\n     */\n    trackInitialization() {\n        try {\n            (0, analytics_1.sendAnalyticsEvent)({\n                name: \"agent_initialization\",\n                action: \"initialize_wallet_provider\",\n                component: \"wallet_provider\",\n                wallet_provider: this.getName(),\n                wallet_address: this.getAddress(),\n                network_id: this.getNetwork().networkId,\n                chain_id: this.getNetwork().chainId,\n                protocol_family: this.getNetwork().protocolFamily,\n            });\n        }\n        catch (error) {\n            console.warn(\"Failed to track wallet provider initialization:\", error);\n        }\n    }\n}\nexports.WalletProvider = WalletProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L2Rpc3Qvd2FsbGV0LXByb3ZpZGVycy93YWxsZXRQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsb0JBQW9CLG1CQUFPLENBQUMscUZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvZGlzdC93YWxsZXQtcHJvdmlkZXJzL3dhbGxldFByb3ZpZGVyLmpzP2ZmZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhbGxldFByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgYW5hbHl0aWNzXzEgPSByZXF1aXJlKFwiLi4vYW5hbHl0aWNzXCIpO1xuLyoqXG4gKiBXYWxsZXRQcm92aWRlciBpcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHdhbGxldCBwcm92aWRlcnMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIFdhbGxldFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgd2FsbGV0IHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBXYWl0IGZvciB0aGUgbmV4dCB0aWNrIHRvIGVuc3VyZSBjaGlsZCBjbGFzcyBpcyBpbml0aWFsaXplZFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tJbml0aWFsaXphdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHRoZSBpbml0aWFsaXphdGlvbiBvZiB0aGUgd2FsbGV0IHByb3ZpZGVyLlxuICAgICAqL1xuICAgIHRyYWNrSW5pdGlhbGl6YXRpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoMCwgYW5hbHl0aWNzXzEuc2VuZEFuYWx5dGljc0V2ZW50KSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJhZ2VudF9pbml0aWFsaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpbml0aWFsaXplX3dhbGxldF9wcm92aWRlclwiLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogXCJ3YWxsZXRfcHJvdmlkZXJcIixcbiAgICAgICAgICAgICAgICB3YWxsZXRfcHJvdmlkZXI6IHRoaXMuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHdhbGxldF9hZGRyZXNzOiB0aGlzLmdldEFkZHJlc3MoKSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrX2lkOiB0aGlzLmdldE5ldHdvcmsoKS5uZXR3b3JrSWQsXG4gICAgICAgICAgICAgICAgY2hhaW5faWQ6IHRoaXMuZ2V0TmV0d29yaygpLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgcHJvdG9jb2xfZmFtaWx5OiB0aGlzLmdldE5ldHdvcmsoKS5wcm90b2NvbEZhbWlseSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIHRyYWNrIHdhbGxldCBwcm92aWRlciBpbml0aWFsaXphdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5XYWxsZXRQcm92aWRlciA9IFdhbGxldFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/dist/wallet-providers/walletProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/node_modules/base-x/src/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/node_modules/base-x/src/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer)\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L25vZGVfbW9kdWxlcy9iYXNlLXgvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw0RkFBNkI7QUFDM0M7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakUscUNBQXFDO0FBQ3JDLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDZDQUE2QztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWSxTQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QywrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsK0JBQStCLDZDQUE2QztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9hZ2VudGtpdC9ub2RlX21vZHVsZXMvYmFzZS14L3NyYy9pbmRleC5qcz9iMDE3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuLy8gYmFzZS14IGVuY29kaW5nIC8gZGVjb2Rpbmdcbi8vIENvcHlyaWdodCAoYykgMjAxOCBiYXNlLXggY29udHJpYnV0b3JzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCBUaGUgQml0Y29pbiBDb3JlIGRldmVsb3BlcnMgKGJhc2U1OC5jcHApXG4vLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIHNvZnR3YXJlIGxpY2Vuc2UsIHNlZSB0aGUgYWNjb21wYW55aW5nXG4vLyBmaWxlIExJQ0VOU0Ugb3IgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAuXG4vLyBAdHMtaWdub3JlXG52YXIgX0J1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5mdW5jdGlvbiBiYXNlIChBTFBIQUJFVCkge1xuICBpZiAoQUxQSEFCRVQubGVuZ3RoID49IDI1NSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHBoYWJldCB0b28gbG9uZycpIH1cbiAgdmFyIEJBU0VfTUFQID0gbmV3IFVpbnQ4QXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IEJBU0VfTUFQLmxlbmd0aDsgaisrKSB7XG4gICAgQkFTRV9NQVBbal0gPSAyNTVcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IEFMUEhBQkVULmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHggPSBBTFBIQUJFVC5jaGFyQXQoaSlcbiAgICB2YXIgeGMgPSB4LmNoYXJDb2RlQXQoMClcbiAgICBpZiAoQkFTRV9NQVBbeGNdICE9PSAyNTUpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBhbWJpZ3VvdXMnKSB9XG4gICAgQkFTRV9NQVBbeGNdID0gaVxuICB9XG4gIHZhciBCQVNFID0gQUxQSEFCRVQubGVuZ3RoXG4gIHZhciBMRUFERVIgPSBBTFBIQUJFVC5jaGFyQXQoMClcbiAgdmFyIEZBQ1RPUiA9IE1hdGgubG9nKEJBU0UpIC8gTWF0aC5sb2coMjU2KSAvLyBsb2coQkFTRSkgLyBsb2coMjU2KSwgcm91bmRlZCB1cFxuICB2YXIgaUZBQ1RPUiA9IE1hdGgubG9nKDI1NikgLyBNYXRoLmxvZyhCQVNFKSAvLyBsb2coMjU2KSAvIGxvZyhCQVNFKSwgcm91bmRlZCB1cFxuICBmdW5jdGlvbiBlbmNvZGUgKHNvdXJjZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNvdXJjZSkgfHwgc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkgeyBzb3VyY2UgPSBfQnVmZmVyLmZyb20oc291cmNlKSB9XG4gICAgaWYgKCFfQnVmZmVyLmlzQnVmZmVyKHNvdXJjZSkpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgQnVmZmVyJykgfVxuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSB7IHJldHVybiAnJyB9XG4gICAgICAgIC8vIFNraXAgJiBjb3VudCBsZWFkaW5nIHplcm9lcy5cbiAgICB2YXIgemVyb2VzID0gMFxuICAgIHZhciBsZW5ndGggPSAwXG4gICAgdmFyIHBiZWdpbiA9IDBcbiAgICB2YXIgcGVuZCA9IHNvdXJjZS5sZW5ndGhcbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kICYmIHNvdXJjZVtwYmVnaW5dID09PSAwKSB7XG4gICAgICBwYmVnaW4rK1xuICAgICAgemVyb2VzKytcbiAgICB9XG4gICAgICAgIC8vIEFsbG9jYXRlIGVub3VnaCBzcGFjZSBpbiBiaWctZW5kaWFuIGJhc2U1OCByZXByZXNlbnRhdGlvbi5cbiAgICB2YXIgc2l6ZSA9ICgocGVuZCAtIHBiZWdpbikgKiBpRkFDVE9SICsgMSkgPj4+IDBcbiAgICB2YXIgYjU4ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgYnl0ZXMuXG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCkge1xuICAgICAgdmFyIGNhcnJ5ID0gc291cmNlW3BiZWdpbl1cbiAgICAgICAgICAgIC8vIEFwcGx5IFwiYjU4ID0gYjU4ICogMjU2ICsgY2hcIi5cbiAgICAgIHZhciBpID0gMFxuICAgICAgZm9yICh2YXIgaXQxID0gc2l6ZSAtIDE7IChjYXJyeSAhPT0gMCB8fCBpIDwgbGVuZ3RoKSAmJiAoaXQxICE9PSAtMSk7IGl0MS0tLCBpKyspIHtcbiAgICAgICAgY2FycnkgKz0gKDI1NiAqIGI1OFtpdDFdKSA+Pj4gMFxuICAgICAgICBiNThbaXQxXSA9IChjYXJyeSAlIEJBU0UpID4+PiAwXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgPj4+IDBcbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5JykgfVxuICAgICAgbGVuZ3RoID0gaVxuICAgICAgcGJlZ2luKytcbiAgICB9XG4gICAgICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXMgaW4gYmFzZTU4IHJlc3VsdC5cbiAgICB2YXIgaXQyID0gc2l6ZSAtIGxlbmd0aFxuICAgIHdoaWxlIChpdDIgIT09IHNpemUgJiYgYjU4W2l0Ml0gPT09IDApIHtcbiAgICAgIGl0MisrXG4gICAgfVxuICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIHJlc3VsdCBpbnRvIGEgc3RyaW5nLlxuICAgIHZhciBzdHIgPSBMRUFERVIucmVwZWF0KHplcm9lcylcbiAgICBmb3IgKDsgaXQyIDwgc2l6ZTsgKytpdDIpIHsgc3RyICs9IEFMUEhBQkVULmNoYXJBdChiNThbaXQyXSkgfVxuICAgIHJldHVybiBzdHJcbiAgfVxuICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUgKHNvdXJjZSkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJykgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBTdHJpbmcnKSB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHsgcmV0dXJuIF9CdWZmZXIuYWxsb2MoMCkgfVxuICAgIHZhciBwc3ogPSAwXG4gICAgICAgIC8vIFNraXAgYW5kIGNvdW50IGxlYWRpbmcgJzEncy5cbiAgICB2YXIgemVyb2VzID0gMFxuICAgIHZhciBsZW5ndGggPSAwXG4gICAgd2hpbGUgKHNvdXJjZVtwc3pdID09PSBMRUFERVIpIHtcbiAgICAgIHplcm9lcysrXG4gICAgICBwc3orK1xuICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgZW5vdWdoIHNwYWNlIGluIGJpZy1lbmRpYW4gYmFzZTI1NiByZXByZXNlbnRhdGlvbi5cbiAgICB2YXIgc2l6ZSA9ICgoKHNvdXJjZS5sZW5ndGggLSBwc3opICogRkFDVE9SKSArIDEpID4+PiAwIC8vIGxvZyg1OCkgLyBsb2coMjU2KSwgcm91bmRlZCB1cC5cbiAgICB2YXIgYjI1NiA9IG5ldyBVaW50OEFycmF5KHNpemUpXG4gICAgICAgIC8vIFByb2Nlc3MgdGhlIGNoYXJhY3RlcnMuXG4gICAgd2hpbGUgKHBzeiA8IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgY29kZSBvZiBuZXh0IGNoYXJhY3RlclxuICAgICAgdmFyIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocHN6KVxuICAgICAgICAgICAgLy8gQmFzZSBtYXAgY2FuIG5vdCBiZSBpbmRleGVkIHVzaW5nIGNoYXIgY29kZVxuICAgICAgaWYgKGNoYXJDb2RlID4gMjU1KSB7IHJldHVybiB9XG4gICAgICAgICAgICAvLyBEZWNvZGUgY2hhcmFjdGVyXG4gICAgICB2YXIgY2FycnkgPSBCQVNFX01BUFtjaGFyQ29kZV1cbiAgICAgICAgICAgIC8vIEludmFsaWQgY2hhcmFjdGVyXG4gICAgICBpZiAoY2FycnkgPT09IDI1NSkgeyByZXR1cm4gfVxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDMgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDMgIT09IC0xKTsgaXQzLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoQkFTRSAqIGIyNTZbaXQzXSkgPj4+IDBcbiAgICAgICAgYjI1NltpdDNdID0gKGNhcnJ5ICUgMjU2KSA+Pj4gMFxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIDI1NikgPj4+IDBcbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5JykgfVxuICAgICAgbGVuZ3RoID0gaVxuICAgICAgcHN6KytcbiAgICB9XG4gICAgICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXMgaW4gYjI1Ni5cbiAgICB2YXIgaXQ0ID0gc2l6ZSAtIGxlbmd0aFxuICAgIHdoaWxlIChpdDQgIT09IHNpemUgJiYgYjI1NltpdDRdID09PSAwKSB7XG4gICAgICBpdDQrK1xuICAgIH1cbiAgICB2YXIgdmNoID0gX0J1ZmZlci5hbGxvY1Vuc2FmZSh6ZXJvZXMgKyAoc2l6ZSAtIGl0NCkpXG4gICAgdmNoLmZpbGwoMHgwMCwgMCwgemVyb2VzKVxuICAgIHZhciBqID0gemVyb2VzXG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSkge1xuICAgICAgdmNoW2orK10gPSBiMjU2W2l0NCsrXVxuICAgIH1cbiAgICByZXR1cm4gdmNoXG4gIH1cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZylcbiAgICBpZiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWJhc2UnICsgQkFTRSArICcgY2hhcmFjdGVyJylcbiAgfVxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gYmFzZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/node_modules/bs58/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/node_modules/bs58/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var basex = __webpack_require__(/*! base-x */ \"(rsc)/./node_modules/@coinbase/agentkit/node_modules/base-x/src/index.js\")\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2FnZW50a2l0L25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyx3RkFBUTtBQUM1Qjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvYWdlbnRraXQvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanM/YWZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxudmFyIEFMUEhBQkVUID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZXgoQUxQSEFCRVQpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/agentkit/node_modules/bs58/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/sendUserOperation.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/actions/sendUserOperation.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sendUserOperation = void 0;\nconst chain_1 = __webpack_require__(/*! ../types/chain */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js\");\nconst viem_1 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nconst coinbase_1 = __webpack_require__(/*! ../coinbase/coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * Sends a user operation to the network\n *\n * @example\n * ```ts\n * import { sendUserOperation } from \"@coinbase/coinbase-sdk\";\n * import { parseEther } from \"viem\";\n *\n * const result = await sendUserOperation(wallet, {\n *   calls: [\n *     {\n *       abi: erc20Abi,\n *       functionName: \"transfer\",\n *       args: [to, amount],\n *     },\n *     {\n *       to: \"0x1234567890123456789012345678901234567890\",\n *       data: \"0x\",\n *       value: parseEther(\"0.0000005\"),\n *     },\n *   ],\n *   chainId: 1,\n *   paymasterUrl: \"https://api.developer.coinbase.com/rpc/v1/base/someapikey\",\n * });\n * ```\n *\n * @param {SmartWallet} wallet - The smart wallet to send the user operation from\n * @param {SendUserOperationOptions<T>} options - The options for the user operation\n * @returns {Promise<SendUserOperationReturnType>} The result of the user operation\n */\nasync function sendUserOperation(wallet, options) {\n    const { calls, chainId, paymasterUrl } = options;\n    const network = chain_1.CHAIN_ID_TO_NETWORK_ID[chainId];\n    if (calls.length === 0) {\n        throw new Error(\"Calls array is empty\");\n    }\n    const encodedCalls = calls.map(call => {\n        const value = (call.value ?? BigInt(0)).toString();\n        if (\"abi\" in call && call.abi && \"functionName\" in call) {\n            return {\n                to: call.to,\n                data: (0, viem_1.encodeFunctionData)({\n                    abi: call.abi,\n                    functionName: call.functionName,\n                    args: call.args,\n                }),\n                value,\n            };\n        }\n        return {\n            to: call.to,\n            data: call.data ?? \"0x\",\n            value,\n        };\n    });\n    const createOpResponse = await coinbase_1.Coinbase.apiClients.smartWallet.createUserOperation(wallet.address, network, {\n        calls: encodedCalls,\n        paymaster_url: paymasterUrl,\n    });\n    const owner = wallet.owners[0];\n    const signature = await owner.sign({\n        hash: createOpResponse.data.user_op_hash,\n    });\n    const broadcastResponse = await coinbase_1.Coinbase.apiClients.smartWallet.broadcastUserOperation(wallet.address, createOpResponse.data.user_op_hash, {\n        signature,\n    });\n    return {\n        smartWalletAddress: wallet.address,\n        status: broadcastResponse.data.status,\n        userOpHash: createOpResponse.data.user_op_hash,\n    };\n}\nexports.sendUserOperation = sendUserOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2FjdGlvbnMvc2VuZFVzZXJPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLHVGQUFnQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMscURBQU07QUFDN0IsbUJBQW1CLG1CQUFPLENBQUMsbUdBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQyxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyw2QkFBNkI7QUFDeEMsYUFBYSxzQ0FBc0M7QUFDbkQ7QUFDQTtBQUNBLFlBQVksK0JBQStCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvYWN0aW9ucy9zZW5kVXNlck9wZXJhdGlvbi5qcz9lNjBmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZW5kVXNlck9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNoYWluXzEgPSByZXF1aXJlKFwiLi4vdHlwZXMvY2hhaW5cIik7XG5jb25zdCB2aWVtXzEgPSByZXF1aXJlKFwidmllbVwiKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi4vY29pbmJhc2UvY29pbmJhc2VcIik7XG4vKipcbiAqIFNlbmRzIGEgdXNlciBvcGVyYXRpb24gdG8gdGhlIG5ldHdvcmtcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IHNlbmRVc2VyT3BlcmF0aW9uIH0gZnJvbSBcIkBjb2luYmFzZS9jb2luYmFzZS1zZGtcIjtcbiAqIGltcG9ydCB7IHBhcnNlRXRoZXIgfSBmcm9tIFwidmllbVwiO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlbmRVc2VyT3BlcmF0aW9uKHdhbGxldCwge1xuICogICBjYWxsczogW1xuICogICAgIHtcbiAqICAgICAgIGFiaTogZXJjMjBBYmksXG4gKiAgICAgICBmdW5jdGlvbk5hbWU6IFwidHJhbnNmZXJcIixcbiAqICAgICAgIGFyZ3M6IFt0bywgYW1vdW50XSxcbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIHRvOiBcIjB4MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiLFxuICogICAgICAgZGF0YTogXCIweFwiLFxuICogICAgICAgdmFsdWU6IHBhcnNlRXRoZXIoXCIwLjAwMDAwMDVcIiksXG4gKiAgICAgfSxcbiAqICAgXSxcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgcGF5bWFzdGVyVXJsOiBcImh0dHBzOi8vYXBpLmRldmVsb3Blci5jb2luYmFzZS5jb20vcnBjL3YxL2Jhc2Uvc29tZWFwaWtleVwiLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1NtYXJ0V2FsbGV0fSB3YWxsZXQgLSBUaGUgc21hcnQgd2FsbGV0IHRvIHNlbmQgdGhlIHVzZXIgb3BlcmF0aW9uIGZyb21cbiAqIEBwYXJhbSB7U2VuZFVzZXJPcGVyYXRpb25PcHRpb25zPFQ+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSB1c2VyIG9wZXJhdGlvblxuICogQHJldHVybnMge1Byb21pc2U8U2VuZFVzZXJPcGVyYXRpb25SZXR1cm5UeXBlPn0gVGhlIHJlc3VsdCBvZiB0aGUgdXNlciBvcGVyYXRpb25cbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2VuZFVzZXJPcGVyYXRpb24od2FsbGV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBjYWxscywgY2hhaW5JZCwgcGF5bWFzdGVyVXJsIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG5ldHdvcmsgPSBjaGFpbl8xLkNIQUlOX0lEX1RPX05FVFdPUktfSURbY2hhaW5JZF07XG4gICAgaWYgKGNhbGxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYWxscyBhcnJheSBpcyBlbXB0eVwiKTtcbiAgICB9XG4gICAgY29uc3QgZW5jb2RlZENhbGxzID0gY2FsbHMubWFwKGNhbGwgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IChjYWxsLnZhbHVlID8/IEJpZ0ludCgwKSkudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKFwiYWJpXCIgaW4gY2FsbCAmJiBjYWxsLmFiaSAmJiBcImZ1bmN0aW9uTmFtZVwiIGluIGNhbGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG86IGNhbGwudG8sXG4gICAgICAgICAgICAgICAgZGF0YTogKDAsIHZpZW1fMS5lbmNvZGVGdW5jdGlvbkRhdGEpKHtcbiAgICAgICAgICAgICAgICAgICAgYWJpOiBjYWxsLmFiaSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBjYWxsLmZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogY2FsbC5hcmdzLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG86IGNhbGwudG8sXG4gICAgICAgICAgICBkYXRhOiBjYWxsLmRhdGEgPz8gXCIweFwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY3JlYXRlT3BSZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zbWFydFdhbGxldC5jcmVhdGVVc2VyT3BlcmF0aW9uKHdhbGxldC5hZGRyZXNzLCBuZXR3b3JrLCB7XG4gICAgICAgIGNhbGxzOiBlbmNvZGVkQ2FsbHMsXG4gICAgICAgIHBheW1hc3Rlcl91cmw6IHBheW1hc3RlclVybCxcbiAgICB9KTtcbiAgICBjb25zdCBvd25lciA9IHdhbGxldC5vd25lcnNbMF07XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgb3duZXIuc2lnbih7XG4gICAgICAgIGhhc2g6IGNyZWF0ZU9wUmVzcG9uc2UuZGF0YS51c2VyX29wX2hhc2gsXG4gICAgfSk7XG4gICAgY29uc3QgYnJvYWRjYXN0UmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuc21hcnRXYWxsZXQuYnJvYWRjYXN0VXNlck9wZXJhdGlvbih3YWxsZXQuYWRkcmVzcywgY3JlYXRlT3BSZXNwb25zZS5kYXRhLnVzZXJfb3BfaGFzaCwge1xuICAgICAgICBzaWduYXR1cmUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc21hcnRXYWxsZXRBZGRyZXNzOiB3YWxsZXQuYWRkcmVzcyxcbiAgICAgICAgc3RhdHVzOiBicm9hZGNhc3RSZXNwb25zZS5kYXRhLnN0YXR1cyxcbiAgICAgICAgdXNlck9wSGFzaDogY3JlYXRlT3BSZXNwb25zZS5kYXRhLnVzZXJfb3BfaGFzaCxcbiAgICB9O1xufVxuZXhwb3J0cy5zZW5kVXNlck9wZXJhdGlvbiA9IHNlbmRVc2VyT3BlcmF0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/sendUserOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/waitForUserOperation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/actions/waitForUserOperation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.waitForUserOperation = void 0;\nconst coinbase_1 = __webpack_require__(/*! ../coinbase/coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst wait_1 = __webpack_require__(/*! ../utils/wait */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/wait.js\");\nconst client_1 = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\");\n/**\n * Waits for a user operation to complete or fail\n *\n * @example\n * ```ts\n * import { waitForUserOperation } from \"@coinbase/coinbase-sdk\";\n *\n * const result = await waitForUserOperation({\n *   id: \"123\",\n *   smartWalletAddress: \"0x1234567890123456789012345678901234567890\",\n *   waitOptions: {\n *     timeoutSeconds: 30,\n *   },\n * });\n * ```\n *\n * @param {WaitForUserOperationOptions} options - The options for the wait operation\n * @returns {Promise<WaitForUserOperationReturnType>} The result of the user operation\n */\nasync function waitForUserOperation(options) {\n    const { userOpHash, smartWalletAddress } = options;\n    const reload = async () => {\n        const response = await coinbase_1.Coinbase.apiClients.smartWallet.getUserOperation(smartWalletAddress, userOpHash);\n        return response.data;\n    };\n    const transform = (operation) => {\n        if (operation.status === client_1.UserOperationStatusEnum.Failed) {\n            return {\n                smartWalletAddress: smartWalletAddress,\n                status: client_1.UserOperationStatusEnum.Failed,\n                userOpHash: operation.user_op_hash,\n            };\n        }\n        else if (operation.status === client_1.UserOperationStatusEnum.Complete) {\n            return {\n                smartWalletAddress: smartWalletAddress,\n                transactionHash: operation.transaction_hash,\n                status: client_1.UserOperationStatusEnum.Complete,\n                userOpHash: operation.user_op_hash,\n            };\n        }\n        else {\n            throw new Error(\"User operation is not terminal\");\n        }\n    };\n    const waitOptions = options.waitOptions || {\n        timeoutSeconds: 30,\n    };\n    return await (0, wait_1.wait)(reload, isTerminal, transform, waitOptions);\n}\nexports.waitForUserOperation = waitForUserOperation;\nconst isTerminal = (operation) => {\n    return (operation.status === client_1.UserOperationStatusEnum.Complete ||\n        operation.status === client_1.UserOperationStatusEnum.Failed);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2FjdGlvbnMvd2FpdEZvclVzZXJPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLG1CQUFtQixtQkFBTyxDQUFDLG1HQUFzQjtBQUNqRCxlQUFlLG1CQUFPLENBQUMscUZBQWU7QUFDdEMsaUJBQWlCLG1CQUFPLENBQUMsbUZBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVcsNkJBQTZCO0FBQ3hDLGFBQWEseUNBQXlDO0FBQ3REO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9hY3Rpb25zL3dhaXRGb3JVc2VyT3BlcmF0aW9uLmpzP2NiY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhaXRGb3JVc2VyT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29pbmJhc2VfMSA9IHJlcXVpcmUoXCIuLi9jb2luYmFzZS9jb2luYmFzZVwiKTtcbmNvbnN0IHdhaXRfMSA9IHJlcXVpcmUoXCIuLi91dGlscy93YWl0XCIpO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiLi4vY2xpZW50XCIpO1xuLyoqXG4gKiBXYWl0cyBmb3IgYSB1c2VyIG9wZXJhdGlvbiB0byBjb21wbGV0ZSBvciBmYWlsXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyB3YWl0Rm9yVXNlck9wZXJhdGlvbiB9IGZyb20gXCJAY29pbmJhc2UvY29pbmJhc2Utc2RrXCI7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgd2FpdEZvclVzZXJPcGVyYXRpb24oe1xuICogICBpZDogXCIxMjNcIixcbiAqICAgc21hcnRXYWxsZXRBZGRyZXNzOiBcIjB4MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiLFxuICogICB3YWl0T3B0aW9uczoge1xuICogICAgIHRpbWVvdXRTZWNvbmRzOiAzMCxcbiAqICAgfSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtXYWl0Rm9yVXNlck9wZXJhdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIHdhaXQgb3BlcmF0aW9uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxXYWl0Rm9yVXNlck9wZXJhdGlvblJldHVyblR5cGU+fSBUaGUgcmVzdWx0IG9mIHRoZSB1c2VyIG9wZXJhdGlvblxuICovXG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yVXNlck9wZXJhdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3QgeyB1c2VyT3BIYXNoLCBzbWFydFdhbGxldEFkZHJlc3MgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgcmVsb2FkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zbWFydFdhbGxldC5nZXRVc2VyT3BlcmF0aW9uKHNtYXJ0V2FsbGV0QWRkcmVzcywgdXNlck9wSGFzaCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH07XG4gICAgY29uc3QgdHJhbnNmb3JtID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgICBpZiAob3BlcmF0aW9uLnN0YXR1cyA9PT0gY2xpZW50XzEuVXNlck9wZXJhdGlvblN0YXR1c0VudW0uRmFpbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNtYXJ0V2FsbGV0QWRkcmVzczogc21hcnRXYWxsZXRBZGRyZXNzLFxuICAgICAgICAgICAgICAgIHN0YXR1czogY2xpZW50XzEuVXNlck9wZXJhdGlvblN0YXR1c0VudW0uRmFpbGVkLFxuICAgICAgICAgICAgICAgIHVzZXJPcEhhc2g6IG9wZXJhdGlvbi51c2VyX29wX2hhc2gsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdGlvbi5zdGF0dXMgPT09IGNsaWVudF8xLlVzZXJPcGVyYXRpb25TdGF0dXNFbnVtLkNvbXBsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNtYXJ0V2FsbGV0QWRkcmVzczogc21hcnRXYWxsZXRBZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogb3BlcmF0aW9uLnRyYW5zYWN0aW9uX2hhc2gsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBjbGllbnRfMS5Vc2VyT3BlcmF0aW9uU3RhdHVzRW51bS5Db21wbGV0ZSxcbiAgICAgICAgICAgICAgICB1c2VyT3BIYXNoOiBvcGVyYXRpb24udXNlcl9vcF9oYXNoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVzZXIgb3BlcmF0aW9uIGlzIG5vdCB0ZXJtaW5hbFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgd2FpdE9wdGlvbnMgPSBvcHRpb25zLndhaXRPcHRpb25zIHx8IHtcbiAgICAgICAgdGltZW91dFNlY29uZHM6IDMwLFxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0ICgwLCB3YWl0XzEud2FpdCkocmVsb2FkLCBpc1Rlcm1pbmFsLCB0cmFuc2Zvcm0sIHdhaXRPcHRpb25zKTtcbn1cbmV4cG9ydHMud2FpdEZvclVzZXJPcGVyYXRpb24gPSB3YWl0Rm9yVXNlck9wZXJhdGlvbjtcbmNvbnN0IGlzVGVybWluYWwgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgcmV0dXJuIChvcGVyYXRpb24uc3RhdHVzID09PSBjbGllbnRfMS5Vc2VyT3BlcmF0aW9uU3RhdHVzRW51bS5Db21wbGV0ZSB8fFxuICAgICAgICBvcGVyYXRpb24uc3RhdHVzID09PSBjbGllbnRfMS5Vc2VyT3BlcmF0aW9uU3RhdHVzRW51bS5GYWlsZWQpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/waitForUserOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/api.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MPCWalletStakeApi = exports.MPCWalletStakeApiFactory = exports.MPCWalletStakeApiFp = exports.MPCWalletStakeApiAxiosParamCreator = exports.FundApi = exports.FundApiFactory = exports.FundApiFp = exports.FundApiAxiosParamCreator = exports.ExternalAddressesApi = exports.ExternalAddressesApiFactory = exports.ExternalAddressesApiFp = exports.ExternalAddressesApiAxiosParamCreator = exports.ContractInvocationsApi = exports.ContractInvocationsApiFactory = exports.ContractInvocationsApiFp = exports.ContractInvocationsApiAxiosParamCreator = exports.ContractEventsApi = exports.ContractEventsApiFactory = exports.ContractEventsApiFp = exports.ContractEventsApiAxiosParamCreator = exports.BalanceHistoryApi = exports.BalanceHistoryApiFactory = exports.BalanceHistoryApiFp = exports.BalanceHistoryApiAxiosParamCreator = exports.AssetsApi = exports.AssetsApiFactory = exports.AssetsApiFp = exports.AssetsApiAxiosParamCreator = exports.AddressesApi = exports.AddressesApiFactory = exports.AddressesApiFp = exports.AddressesApiAxiosParamCreator = exports.WebhookStatus = exports.WebhookEventType = exports.WalletServerSignerStatusEnum = exports.ValidatorStatus = exports.UserOperationStatusEnum = exports.TransactionType = exports.TransactionStatusEnum = exports.TokenTransferType = exports.StakingRewardFormat = exports.StakingRewardStateEnum = exports.StakingOperationStatusEnum = exports.SponsoredSendStatusEnum = exports.SolidityValueTypeEnum = exports.SmartContractType = exports.PayloadSignatureStatusEnum = exports.NetworkIdentifier = exports.NetworkProtocolFamilyEnum = exports.FundOperationStatusEnum = void 0;\nexports.WebhooksApiAxiosParamCreator = exports.WalletsApi = exports.WalletsApiFactory = exports.WalletsApiFp = exports.WalletsApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TransfersApi = exports.TransfersApiFactory = exports.TransfersApiFp = exports.TransfersApiAxiosParamCreator = exports.TransactionHistoryApi = exports.TransactionHistoryApiFactory = exports.TransactionHistoryApiFp = exports.TransactionHistoryApiAxiosParamCreator = exports.TradesApi = exports.TradesApiFactory = exports.TradesApiFp = exports.TradesApiAxiosParamCreator = exports.StakeApi = exports.StakeApiFactory = exports.StakeApiFp = exports.StakeApiAxiosParamCreator = exports.SmartWalletsApi = exports.SmartWalletsApiFactory = exports.SmartWalletsApiFp = exports.SmartWalletsApiAxiosParamCreator = exports.SmartContractsApi = exports.SmartContractsApiFactory = exports.SmartContractsApiFp = exports.SmartContractsApiAxiosParamCreator = exports.ServerSignersApi = exports.ServerSignersApiFactory = exports.ServerSignersApiFp = exports.ServerSignersApiAxiosParamCreator = exports.ReputationApi = exports.ReputationApiFactory = exports.ReputationApiFp = exports.ReputationApiAxiosParamCreator = exports.ResolveIdentityByAddressRolesEnum = exports.OnchainIdentityApi = exports.OnchainIdentityApiFactory = exports.OnchainIdentityApiFp = exports.OnchainIdentityApiAxiosParamCreator = exports.NetworksApi = exports.NetworksApiFactory = exports.NetworksApiFp = exports.NetworksApiAxiosParamCreator = void 0;\nexports.WebhooksApi = exports.WebhooksApiFactory = exports.WebhooksApiFp = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\nexports.FundOperationStatusEnum = {\n    Pending: 'pending',\n    Complete: 'complete',\n    Failed: 'failed'\n};\nexports.NetworkProtocolFamilyEnum = {\n    Evm: 'evm',\n    Solana: 'solana'\n};\n/**\n * The ID of the blockchain network. This is unique across all networks, and takes the form of `<blockchain>-<network>`.\n * @export\n * @enum {string}\n */\nexports.NetworkIdentifier = {\n    BaseSepolia: 'base-sepolia',\n    BaseMainnet: 'base-mainnet',\n    EthereumHolesky: 'ethereum-holesky',\n    EthereumSepolia: 'ethereum-sepolia',\n    EthereumMainnet: 'ethereum-mainnet',\n    PolygonMainnet: 'polygon-mainnet',\n    SolanaDevnet: 'solana-devnet',\n    SolanaMainnet: 'solana-mainnet',\n    ArbitrumMainnet: 'arbitrum-mainnet',\n    ArbitrumSepolia: 'arbitrum-sepolia',\n    BitcoinMainnet: 'bitcoin-mainnet',\n    NearTestnet: 'near-testnet',\n    NearMainnet: 'near-mainnet'\n};\nexports.PayloadSignatureStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Failed: 'failed'\n};\n/**\n * The type of the smart contract.\n * @export\n * @enum {string}\n */\nexports.SmartContractType = {\n    Erc20: 'erc20',\n    Erc721: 'erc721',\n    Erc1155: 'erc1155',\n    Custom: 'custom'\n};\nexports.SolidityValueTypeEnum = {\n    Uint8: 'uint8',\n    Uint16: 'uint16',\n    Uint32: 'uint32',\n    Uint64: 'uint64',\n    Uint128: 'uint128',\n    Uint160: 'uint160',\n    Uint256: 'uint256',\n    Int8: 'int8',\n    Int16: 'int16',\n    Int24: 'int24',\n    Int32: 'int32',\n    Int56: 'int56',\n    Int64: 'int64',\n    Int128: 'int128',\n    Int256: 'int256',\n    Address: 'address',\n    Bool: 'bool',\n    String: 'string',\n    Bytes: 'bytes',\n    Bytes1: 'bytes1',\n    Bytes2: 'bytes2',\n    Bytes3: 'bytes3',\n    Bytes4: 'bytes4',\n    Bytes5: 'bytes5',\n    Bytes6: 'bytes6',\n    Bytes7: 'bytes7',\n    Bytes8: 'bytes8',\n    Bytes9: 'bytes9',\n    Bytes10: 'bytes10',\n    Bytes11: 'bytes11',\n    Bytes12: 'bytes12',\n    Bytes13: 'bytes13',\n    Bytes14: 'bytes14',\n    Bytes15: 'bytes15',\n    Bytes16: 'bytes16',\n    Bytes17: 'bytes17',\n    Bytes18: 'bytes18',\n    Bytes19: 'bytes19',\n    Bytes20: 'bytes20',\n    Bytes21: 'bytes21',\n    Bytes22: 'bytes22',\n    Bytes23: 'bytes23',\n    Bytes24: 'bytes24',\n    Bytes25: 'bytes25',\n    Bytes26: 'bytes26',\n    Bytes27: 'bytes27',\n    Bytes28: 'bytes28',\n    Bytes29: 'bytes29',\n    Bytes30: 'bytes30',\n    Bytes31: 'bytes31',\n    Bytes32: 'bytes32',\n    Array: 'array',\n    Tuple: 'tuple'\n};\nexports.SponsoredSendStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Submitted: 'submitted',\n    Complete: 'complete',\n    Failed: 'failed'\n};\nexports.StakingOperationStatusEnum = {\n    Initialized: 'initialized',\n    Complete: 'complete',\n    Failed: 'failed',\n    Unspecified: 'unspecified'\n};\nexports.StakingRewardStateEnum = {\n    Pending: 'pending',\n    Distributed: 'distributed'\n};\n/**\n * The format in which the rewards are to be fetched i.e native or in equivalent USD\n * @export\n * @enum {string}\n */\nexports.StakingRewardFormat = {\n    Usd: 'usd',\n    Native: 'native'\n};\n/**\n * The type of the token transfer.\n * @export\n * @enum {string}\n */\nexports.TokenTransferType = {\n    Erc20: 'erc20',\n    Erc721: 'erc721',\n    Erc1155: 'erc1155',\n    Unknown: 'unknown'\n};\nexports.TransactionStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Broadcast: 'broadcast',\n    Complete: 'complete',\n    Failed: 'failed',\n    Unspecified: 'unspecified'\n};\n/**\n *\n * @export\n * @enum {string}\n */\nexports.TransactionType = {\n    Transfer: 'transfer'\n};\nexports.UserOperationStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Broadcast: 'broadcast',\n    Complete: 'complete',\n    Failed: 'failed'\n};\n/**\n * The status of the validator.\n * @export\n * @enum {string}\n */\nexports.ValidatorStatus = {\n    Unknown: 'unknown',\n    Provisioning: 'provisioning',\n    Provisioned: 'provisioned',\n    Deposited: 'deposited',\n    PendingActivation: 'pending_activation',\n    Active: 'active',\n    Exiting: 'exiting',\n    Exited: 'exited',\n    WithdrawalAvailable: 'withdrawal_available',\n    WithdrawalComplete: 'withdrawal_complete',\n    ActiveSlashed: 'active_slashed',\n    ExitedSlashed: 'exited_slashed',\n    Reaped: 'reaped'\n};\nexports.WalletServerSignerStatusEnum = {\n    PendingSeedCreation: 'pending_seed_creation',\n    ActiveSeed: 'active_seed'\n};\n/**\n *\n * @export\n * @enum {string}\n */\nexports.WebhookEventType = {\n    Unspecified: 'unspecified',\n    Erc20Transfer: 'erc20_transfer',\n    Erc721Transfer: 'erc721_transfer',\n    WalletActivity: 'wallet_activity',\n    SmartContractEventActivity: 'smart_contract_event_activity'\n};\n/**\n * The status of the webhook.\n * @export\n * @enum {string}\n */\nexports.WebhookStatus = {\n    Active: 'active',\n    Inactive: 'inactive'\n};\n/**\n * AddressesApi - axios parameter creator\n * @export\n */\nconst AddressesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAddress: async (walletId, createAddressRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createAddress', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAddressRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPayloadSignature: async (walletId, addressId, createPayloadSignatureRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createPayloadSignature', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createPayloadSignature', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPayloadSignatureRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddress: async (walletId, addressId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddress', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddress', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressBalance: async (walletId, addressId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'assetId', assetId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/balances/{asset_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayloadSignature: async (walletId, addressId, payloadSignatureId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'addressId', addressId);\n            // verify required parameter 'payloadSignatureId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'payloadSignatureId', payloadSignatureId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures/{payload_signature_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"payload_signature_id\"}}`, encodeURIComponent(String(payloadSignatureId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressBalances: async (walletId, addressId, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressBalances', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressBalances', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/balances`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddresses: async (walletId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddresses', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPayloadSignatures: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listPayloadSignatures', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listPayloadSignatures', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        requestFaucetFunds: async (walletId, addressId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('requestFaucetFunds', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('requestFaucetFunds', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/faucet`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.AddressesApiAxiosParamCreator = AddressesApiAxiosParamCreator;\n/**\n * AddressesApi - functional programming interface\n * @export\n */\nconst AddressesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.AddressesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAddress(walletId, createAddressRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(walletId, createAddressRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.createAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.createPayloadSignature']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAddress(walletId, addressId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(walletId, addressId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAddressBalance(walletId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressBalance(walletId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getAddressBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayloadSignature(walletId, addressId, payloadSignatureId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getPayloadSignature']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressBalances(walletId, addressId, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressBalances(walletId, addressId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listAddressBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddresses(walletId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddresses(walletId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listAddresses']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPayloadSignatures(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPayloadSignatures(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listPayloadSignatures']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        async requestFaucetFunds(walletId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.requestFaucetFunds(walletId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.requestFaucetFunds']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.AddressesApiFp = AddressesApiFp;\n/**\n * AddressesApi - factory interface\n * @export\n */\nconst AddressesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.AddressesApiFp)(configuration);\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAddress(walletId, createAddressRequest, options) {\n            return localVarFp.createAddress(walletId, createAddressRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n            return localVarFp.createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddress(walletId, addressId, options) {\n            return localVarFp.getAddress(walletId, addressId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressBalance(walletId, addressId, assetId, options) {\n            return localVarFp.getAddressBalance(walletId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n            return localVarFp.getPayloadSignature(walletId, addressId, payloadSignatureId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressBalances(walletId, addressId, page, options) {\n            return localVarFp.listAddressBalances(walletId, addressId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddresses(walletId, limit, page, options) {\n            return localVarFp.listAddresses(walletId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPayloadSignatures(walletId, addressId, limit, page, options) {\n            return localVarFp.listPayloadSignatures(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        requestFaucetFunds(walletId, addressId, assetId, options) {\n            return localVarFp.requestFaucetFunds(walletId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.AddressesApiFactory = AddressesApiFactory;\n/**\n * AddressesApi - object-oriented interface\n * @export\n * @class AddressesApi\n * @extends {BaseAPI}\n */\nclass AddressesApi extends base_1.BaseAPI {\n    /**\n     * Create a new address scoped to the wallet.\n     * @summary Create a new address\n     * @param {string} walletId The ID of the wallet to create the address in.\n     * @param {CreateAddressRequest} [createAddressRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    createAddress(walletId, createAddressRequest, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).createAddress(walletId, createAddressRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new payload signature with an address.\n     * @summary Create a new payload signature.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address to sign the payload with.\n     * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address\n     * @summary Get address by onchain address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getAddress(walletId, addressId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getAddress(walletId, addressId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address balance\n     * @summary Get address balance for asset\n     * @param {string} walletId The ID of the wallet to fetch the balance for\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} assetId The symbol of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getAddressBalance(walletId, addressId, assetId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getAddressBalance(walletId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get payload signature.\n     * @summary Get payload signature.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that signed the payload.\n     * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getPayloadSignature(walletId, addressId, payloadSignatureId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address balances\n     * @summary Get all balances for address\n     * @param {string} walletId The ID of the wallet to fetch the balances for\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listAddressBalances(walletId, addressId, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listAddressBalances(walletId, addressId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List addresses in the wallet.\n     * @summary List addresses in a wallet.\n     * @param {string} walletId The ID of the wallet whose addresses to fetch\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listAddresses(walletId, limit, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listAddresses(walletId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List payload signatures for an address.\n     * @summary List payload signatures for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listPayloadSignatures(walletId, addressId, limit, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listPayloadSignatures(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Request faucet funds to be sent to onchain address.\n     * @summary Request faucet funds for onchain address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    requestFaucetFunds(walletId, addressId, assetId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).requestFaucetFunds(walletId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.AddressesApi = AddressesApi;\n/**\n * AssetsApi - axios parameter creator\n * @export\n */\nconst AssetsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAsset: async (networkId, assetId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getAsset', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getAsset', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.AssetsApiAxiosParamCreator = AssetsApiAxiosParamCreator;\n/**\n * AssetsApi - functional programming interface\n * @export\n */\nconst AssetsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.AssetsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAsset(networkId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(networkId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AssetsApi.getAsset']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.AssetsApiFp = AssetsApiFp;\n/**\n * AssetsApi - factory interface\n * @export\n */\nconst AssetsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.AssetsApiFp)(configuration);\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAsset(networkId, assetId, options) {\n            return localVarFp.getAsset(networkId, assetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.AssetsApiFactory = AssetsApiFactory;\n/**\n * AssetsApi - object-oriented interface\n * @export\n * @class AssetsApi\n * @extends {BaseAPI}\n */\nclass AssetsApi extends base_1.BaseAPI {\n    /**\n     * Get the asset for the specified asset ID.\n     * @summary Get the asset for the specified asset ID.\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    getAsset(networkId, assetId, options) {\n        return (0, exports.AssetsApiFp)(this.configuration).getAsset(networkId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.AssetsApi = AssetsApi;\n/**\n * BalanceHistoryApi - axios parameter creator\n * @export\n */\nconst BalanceHistoryApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressHistoricalBalance: async (networkId, addressId, assetId, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balance_history/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.BalanceHistoryApiAxiosParamCreator = BalanceHistoryApiAxiosParamCreator;\n/**\n * BalanceHistoryApi - functional programming interface\n * @export\n */\nconst BalanceHistoryApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.BalanceHistoryApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['BalanceHistoryApi.listAddressHistoricalBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.BalanceHistoryApiFp = BalanceHistoryApiFp;\n/**\n * BalanceHistoryApi - factory interface\n * @export\n */\nconst BalanceHistoryApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.BalanceHistoryApiFp)(configuration);\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n            return localVarFp.listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.BalanceHistoryApiFactory = BalanceHistoryApiFactory;\n/**\n * BalanceHistoryApi - object-oriented interface\n * @export\n * @class BalanceHistoryApi\n * @extends {BaseAPI}\n */\nclass BalanceHistoryApi extends base_1.BaseAPI {\n    /**\n     * List the historical balance of an asset in a specific address.\n     * @summary Get address balance history for asset\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the historical balance for.\n     * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BalanceHistoryApi\n     */\n    listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n        return (0, exports.BalanceHistoryApiFp)(this.configuration).listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.BalanceHistoryApi = BalanceHistoryApi;\n/**\n * ContractEventsApi - axios parameter creator\n * @export\n */\nconst ContractEventsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractEvents: async (networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'networkId', networkId);\n            // verify required parameter 'protocolName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'protocolName', protocolName);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'contractAddress', contractAddress);\n            // verify required parameter 'contractName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'contractName', contractName);\n            // verify required parameter 'eventName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'eventName', eventName);\n            // verify required parameter 'fromBlockHeight' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'fromBlockHeight', fromBlockHeight);\n            // verify required parameter 'toBlockHeight' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'toBlockHeight', toBlockHeight);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}/events`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (protocolName !== undefined) {\n                localVarQueryParameter['protocol_name'] = protocolName;\n            }\n            if (contractName !== undefined) {\n                localVarQueryParameter['contract_name'] = contractName;\n            }\n            if (eventName !== undefined) {\n                localVarQueryParameter['event_name'] = eventName;\n            }\n            if (fromBlockHeight !== undefined) {\n                localVarQueryParameter['from_block_height'] = fromBlockHeight;\n            }\n            if (toBlockHeight !== undefined) {\n                localVarQueryParameter['to_block_height'] = toBlockHeight;\n            }\n            if (nextPage !== undefined) {\n                localVarQueryParameter['next_page'] = nextPage;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ContractEventsApiAxiosParamCreator = ContractEventsApiAxiosParamCreator;\n/**\n * ContractEventsApi - functional programming interface\n * @export\n */\nconst ContractEventsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ContractEventsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractEventsApi.listContractEvents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ContractEventsApiFp = ContractEventsApiFp;\n/**\n * ContractEventsApi - factory interface\n * @export\n */\nconst ContractEventsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ContractEventsApiFp)(configuration);\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n            return localVarFp.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ContractEventsApiFactory = ContractEventsApiFactory;\n/**\n * ContractEventsApi - object-oriented interface\n * @export\n * @class ContractEventsApi\n * @extends {BaseAPI}\n */\nclass ContractEventsApi extends base_1.BaseAPI {\n    /**\n     * Retrieve events for a specific contract\n     * @summary List contract events\n     * @param {string} networkId Unique identifier for the blockchain network\n     * @param {string} protocolName Case-sensitive name of the blockchain protocol\n     * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n     * @param {string} contractName Case-sensitive name of the specific contract within the project\n     * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n     * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n     * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n     * @param {string} [nextPage] Pagination token for retrieving the next set of results\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractEventsApi\n     */\n    listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n        return (0, exports.ContractEventsApiFp)(this.configuration).listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ContractEventsApi = ContractEventsApi;\n/**\n * ContractInvocationsApi - axios parameter creator\n * @export\n */\nconst ContractInvocationsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastContractInvocation: async (walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'addressId', addressId);\n            // verify required parameter 'contractInvocationId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'contractInvocationId', contractInvocationId);\n            // verify required parameter 'broadcastContractInvocationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'broadcastContractInvocationRequest', broadcastContractInvocationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"contract_invocation_id\"}}`, encodeURIComponent(String(contractInvocationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastContractInvocationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createContractInvocation: async (walletId, addressId, createContractInvocationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'addressId', addressId);\n            // verify required parameter 'createContractInvocationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'createContractInvocationRequest', createContractInvocationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createContractInvocationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractInvocation: async (walletId, addressId, contractInvocationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'addressId', addressId);\n            // verify required parameter 'contractInvocationId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'contractInvocationId', contractInvocationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"contract_invocation_id\"}}`, encodeURIComponent(String(contractInvocationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractInvocations: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractInvocations', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractInvocations', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ContractInvocationsApiAxiosParamCreator = ContractInvocationsApiAxiosParamCreator;\n/**\n * ContractInvocationsApi - functional programming interface\n * @export\n */\nconst ContractInvocationsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ContractInvocationsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.broadcastContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createContractInvocation(walletId, addressId, createContractInvocationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.createContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getContractInvocation(walletId, addressId, contractInvocationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractInvocation(walletId, addressId, contractInvocationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.getContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listContractInvocations(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listContractInvocations(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.listContractInvocations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ContractInvocationsApiFp = ContractInvocationsApiFp;\n/**\n * ContractInvocationsApi - factory interface\n * @export\n */\nconst ContractInvocationsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ContractInvocationsApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n            return localVarFp.broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n            return localVarFp.createContractInvocation(walletId, addressId, createContractInvocationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractInvocation(walletId, addressId, contractInvocationId, options) {\n            return localVarFp.getContractInvocation(walletId, addressId, contractInvocationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractInvocations(walletId, addressId, limit, page, options) {\n            return localVarFp.listContractInvocations(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ContractInvocationsApiFactory = ContractInvocationsApiFactory;\n/**\n * ContractInvocationsApi - object-oriented interface\n * @export\n * @class ContractInvocationsApi\n * @extends {BaseAPI}\n */\nclass ContractInvocationsApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a contract invocation.\n     * @summary Broadcast a contract invocation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the contract invocation belongs to.\n     * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n     * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new contract invocation.\n     * @summary Create a new contract invocation for an address.\n     * @param {string} walletId The ID of the wallet the source address belongs to.\n     * @param {string} addressId The ID of the address to invoke the contract from.\n     * @param {CreateContractInvocationRequest} createContractInvocationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).createContractInvocation(walletId, addressId, createContractInvocationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a contract invocation by ID.\n     * @summary Get a contract invocation by ID.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the contract invocation belongs to.\n     * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    getContractInvocation(walletId, addressId, contractInvocationId, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).getContractInvocation(walletId, addressId, contractInvocationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List contract invocations for an address.\n     * @summary List contract invocations for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to list contract invocations for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    listContractInvocations(walletId, addressId, limit, page, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).listContractInvocations(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ContractInvocationsApi = ContractInvocationsApi;\n/**\n * ExternalAddressesApi - axios parameter creator\n * @export\n */\nconst ExternalAddressesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast an arbitrary transaction to the node constructed and signed by an external address.\n         * @summary Broadcast an arbitrary transaction.\n         * @param {string} networkId The ID of the network the external address belongs to.\n         * @param {string} addressId The onchain address of the transaction sender.\n         * @param {BroadcastExternalTransactionRequest} broadcastExternalTransactionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastExternalTransaction: async (networkId, addressId, broadcastExternalTransactionRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransaction', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransaction', 'addressId', addressId);\n            // verify required parameter 'broadcastExternalTransactionRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransaction', 'broadcastExternalTransactionRequest', broadcastExternalTransactionRequest);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transactions`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastExternalTransactionRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Broadcast an external address\\'s transfer with a signed payload\n         * @summary Broadcast an external address\\' transfer\n         * @param {string} networkId The ID of the network the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastExternalTransferRequest} broadcastExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastExternalTransfer: async (networkId, addressId, transferId, broadcastExternalTransferRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransfer', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransfer', 'transferId', transferId);\n            // verify required parameter 'broadcastExternalTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastExternalTransfer', 'broadcastExternalTransferRequest', broadcastExternalTransferRequest);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transfers/{transfer_id}/broadcast`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastExternalTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new transfer between addresses.\n         * @summary Create a new transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateExternalTransferRequest} createExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createExternalTransfer: async (networkId, addressId, createExternalTransferRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('createExternalTransfer', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createExternalTransfer', 'addressId', addressId);\n            // verify required parameter 'createExternalTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createExternalTransfer', 'createExternalTransferRequest', createExternalTransferRequest);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transfers`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createExternalTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalAddressBalance: async (networkId, addressId, assetId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balances/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get an external address\\' transfer by ID\n         * @summary Get a external address\\' transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalTransfer: async (networkId, addressId, transferId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalTransfer', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalTransfer', 'transferId', transferId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transfers/{transfer_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFaucetTransaction: async (networkId, addressId, txHash, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'addressId', addressId);\n            // verify required parameter 'txHash' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'txHash', txHash);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/faucet/{tx_hash}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"tx_hash\"}}`, encodeURIComponent(String(txHash)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listExternalAddressBalances: async (networkId, addressId, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listExternalAddressBalances', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listExternalAddressBalances', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balances`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestExternalFaucetFunds: async (networkId, addressId, assetId, skipWait, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('requestExternalFaucetFunds', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('requestExternalFaucetFunds', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/faucet`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            if (skipWait !== undefined) {\n                localVarQueryParameter['skip_wait'] = skipWait;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ExternalAddressesApiAxiosParamCreator = ExternalAddressesApiAxiosParamCreator;\n/**\n * ExternalAddressesApi - functional programming interface\n * @export\n */\nconst ExternalAddressesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ExternalAddressesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast an arbitrary transaction to the node constructed and signed by an external address.\n         * @summary Broadcast an arbitrary transaction.\n         * @param {string} networkId The ID of the network the external address belongs to.\n         * @param {string} addressId The onchain address of the transaction sender.\n         * @param {BroadcastExternalTransactionRequest} broadcastExternalTransactionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.broadcastExternalTransaction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Broadcast an external address\\'s transfer with a signed payload\n         * @summary Broadcast an external address\\' transfer\n         * @param {string} networkId The ID of the network the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastExternalTransferRequest} broadcastExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.broadcastExternalTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new transfer between addresses.\n         * @summary Create a new transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateExternalTransferRequest} createExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createExternalTransfer(networkId, addressId, createExternalTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createExternalTransfer(networkId, addressId, createExternalTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.createExternalTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getExternalAddressBalance(networkId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalAddressBalance(networkId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.getExternalAddressBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get an external address\\' transfer by ID\n         * @summary Get a external address\\' transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getExternalTransfer(networkId, addressId, transferId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalTransfer(networkId, addressId, transferId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.getExternalTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFaucetTransaction(networkId, addressId, txHash, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaucetTransaction(networkId, addressId, txHash, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.getFaucetTransaction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listExternalAddressBalances(networkId, addressId, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listExternalAddressBalances(networkId, addressId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.listExternalAddressBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.requestExternalFaucetFunds']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ExternalAddressesApiFp = ExternalAddressesApiFp;\n/**\n * ExternalAddressesApi - factory interface\n * @export\n */\nconst ExternalAddressesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ExternalAddressesApiFp)(configuration);\n    return {\n        /**\n         * Broadcast an arbitrary transaction to the node constructed and signed by an external address.\n         * @summary Broadcast an arbitrary transaction.\n         * @param {string} networkId The ID of the network the external address belongs to.\n         * @param {string} addressId The onchain address of the transaction sender.\n         * @param {BroadcastExternalTransactionRequest} broadcastExternalTransactionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options) {\n            return localVarFp.broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Broadcast an external address\\'s transfer with a signed payload\n         * @summary Broadcast an external address\\' transfer\n         * @param {string} networkId The ID of the network the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastExternalTransferRequest} broadcastExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options) {\n            return localVarFp.broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new transfer between addresses.\n         * @summary Create a new transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateExternalTransferRequest} createExternalTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createExternalTransfer(networkId, addressId, createExternalTransferRequest, options) {\n            return localVarFp.createExternalTransfer(networkId, addressId, createExternalTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalAddressBalance(networkId, addressId, assetId, options) {\n            return localVarFp.getExternalAddressBalance(networkId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get an external address\\' transfer by ID\n         * @summary Get a external address\\' transfer\n         * @param {string} networkId The ID of the network the address is on\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalTransfer(networkId, addressId, transferId, options) {\n            return localVarFp.getExternalTransfer(networkId, addressId, transferId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFaucetTransaction(networkId, addressId, txHash, options) {\n            return localVarFp.getFaucetTransaction(networkId, addressId, txHash, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listExternalAddressBalances(networkId, addressId, page, options) {\n            return localVarFp.listExternalAddressBalances(networkId, addressId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n            return localVarFp.requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ExternalAddressesApiFactory = ExternalAddressesApiFactory;\n/**\n * ExternalAddressesApi - object-oriented interface\n * @export\n * @class ExternalAddressesApi\n * @extends {BaseAPI}\n */\nclass ExternalAddressesApi extends base_1.BaseAPI {\n    /**\n     * Broadcast an arbitrary transaction to the node constructed and signed by an external address.\n     * @summary Broadcast an arbitrary transaction.\n     * @param {string} networkId The ID of the network the external address belongs to.\n     * @param {string} addressId The onchain address of the transaction sender.\n     * @param {BroadcastExternalTransactionRequest} broadcastExternalTransactionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).broadcastExternalTransaction(networkId, addressId, broadcastExternalTransactionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Broadcast an external address\\'s transfer with a signed payload\n     * @summary Broadcast an external address\\' transfer\n     * @param {string} networkId The ID of the network the address belongs to\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to broadcast\n     * @param {BroadcastExternalTransferRequest} broadcastExternalTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).broadcastExternalTransfer(networkId, addressId, transferId, broadcastExternalTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new transfer between addresses.\n     * @summary Create a new transfer\n     * @param {string} networkId The ID of the network the address is on\n     * @param {string} addressId The ID of the address to transfer from\n     * @param {CreateExternalTransferRequest} createExternalTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    createExternalTransfer(networkId, addressId, createExternalTransferRequest, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).createExternalTransfer(networkId, addressId, createExternalTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the balance of an asset in an external address\n     * @summary Get the balance of an asset in an external address\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the balance for\n     * @param {string} assetId The ID of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    getExternalAddressBalance(networkId, addressId, assetId, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).getExternalAddressBalance(networkId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get an external address\\' transfer by ID\n     * @summary Get a external address\\' transfer\n     * @param {string} networkId The ID of the network the address is on\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    getExternalTransfer(networkId, addressId, transferId, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).getExternalTransfer(networkId, addressId, transferId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the status of a faucet transaction\n     * @summary Get the status of a faucet transaction\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the faucet transaction for\n     * @param {string} txHash The hash of the faucet transaction\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    getFaucetTransaction(networkId, addressId, txHash, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).getFaucetTransaction(networkId, addressId, txHash, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List all of the balances of an external address\n     * @summary Get the balances of an external address\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the balance for\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    listExternalAddressBalances(networkId, addressId, page, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).listExternalAddressBalances(networkId, addressId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Request faucet funds to be sent to external address.\n     * @summary Request faucet funds for external address.\n     * @param {string} networkId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n     * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ExternalAddressesApi = ExternalAddressesApi;\n/**\n * FundApi - axios parameter creator\n * @export\n */\nconst FundApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundOperation: async (walletId, addressId, createFundOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'addressId', addressId);\n            // verify required parameter 'createFundOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'createFundOperationRequest', createFundOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFundOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundQuote: async (walletId, addressId, createFundQuoteRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'addressId', addressId);\n            // verify required parameter 'createFundQuoteRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'createFundQuoteRequest', createFundQuoteRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/quote`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFundQuoteRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFundOperation: async (walletId, addressId, fundOperationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'addressId', addressId);\n            // verify required parameter 'fundOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'fundOperationId', fundOperationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/{fund_operation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"fund_operation_id\"}}`, encodeURIComponent(String(fundOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFundOperations: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listFundOperations', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listFundOperations', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.FundApiAxiosParamCreator = FundApiAxiosParamCreator;\n/**\n * FundApi - functional programming interface\n * @export\n */\nconst FundApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.FundApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFundOperation(walletId, addressId, createFundOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.createFundOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFundQuote(walletId, addressId, createFundQuoteRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.createFundQuote']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFundOperation(walletId, addressId, fundOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundOperation(walletId, addressId, fundOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.getFundOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listFundOperations(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listFundOperations(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.listFundOperations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.FundApiFp = FundApiFp;\n/**\n * FundApi - factory interface\n * @export\n */\nconst FundApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.FundApiFp)(configuration);\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n            return localVarFp.createFundOperation(walletId, addressId, createFundOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n            return localVarFp.createFundQuote(walletId, addressId, createFundQuoteRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFundOperation(walletId, addressId, fundOperationId, options) {\n            return localVarFp.getFundOperation(walletId, addressId, fundOperationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFundOperations(walletId, addressId, limit, page, options) {\n            return localVarFp.listFundOperations(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.FundApiFactory = FundApiFactory;\n/**\n * FundApi - object-oriented interface\n * @export\n * @class FundApi\n * @extends {BaseAPI}\n */\nclass FundApi extends base_1.BaseAPI {\n    /**\n     * Create a new fund operation with an address.\n     * @summary Create a new fund operation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address to be funded.\n     * @param {CreateFundOperationRequest} createFundOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n        return (0, exports.FundApiFp)(this.configuration).createFundOperation(walletId, addressId, createFundOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new fund operation with an address.\n     * @summary Create a Fund Operation quote.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address to be funded.\n     * @param {CreateFundQuoteRequest} createFundQuoteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n        return (0, exports.FundApiFp)(this.configuration).createFundQuote(walletId, addressId, createFundQuoteRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get fund operation.\n     * @summary Get fund operation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that created the fund operation.\n     * @param {string} fundOperationId The ID of the fund operation to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    getFundOperation(walletId, addressId, fundOperationId, options) {\n        return (0, exports.FundApiFp)(this.configuration).getFundOperation(walletId, addressId, fundOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List fund operations for an address.\n     * @summary List fund operations for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address to list fund operations for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    listFundOperations(walletId, addressId, limit, page, options) {\n        return (0, exports.FundApiFp)(this.configuration).listFundOperations(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.FundApi = FundApi;\n/**\n * MPCWalletStakeApi - axios parameter creator\n * @export\n */\nconst MPCWalletStakeApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastStakingOperation: async (walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'stakingOperationId', stakingOperationId);\n            // verify required parameter 'broadcastStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'broadcastStakingOperationRequest', broadcastStakingOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations/{staking_operation_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStakingOperation: async (walletId, addressId, createStakingOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'addressId', addressId);\n            // verify required parameter 'createStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'createStakingOperationRequest', createStakingOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingOperation: async (walletId, addressId, stakingOperationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'stakingOperationId', stakingOperationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations/{staking_operation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.MPCWalletStakeApiAxiosParamCreator = MPCWalletStakeApiAxiosParamCreator;\n/**\n * MPCWalletStakeApi - functional programming interface\n * @export\n */\nconst MPCWalletStakeApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.MPCWalletStakeApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['MPCWalletStakeApi.broadcastStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStakingOperation(walletId, addressId, createStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['MPCWalletStakeApi.createStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakingOperation(walletId, addressId, stakingOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakingOperation(walletId, addressId, stakingOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['MPCWalletStakeApi.getStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.MPCWalletStakeApiFp = MPCWalletStakeApiFp;\n/**\n * MPCWalletStakeApi - factory interface\n * @export\n */\nconst MPCWalletStakeApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.MPCWalletStakeApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n            return localVarFp.broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n            return localVarFp.createStakingOperation(walletId, addressId, createStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingOperation(walletId, addressId, stakingOperationId, options) {\n            return localVarFp.getStakingOperation(walletId, addressId, stakingOperationId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.MPCWalletStakeApiFactory = MPCWalletStakeApiFactory;\n/**\n * MPCWalletStakeApi - object-oriented interface\n * @export\n * @class MPCWalletStakeApi\n * @extends {BaseAPI}\n */\nclass MPCWalletStakeApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a staking operation.\n     * @summary Broadcast a staking operation\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the staking operation belongs to.\n     * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n     * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MPCWalletStakeApi\n     */\n    broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n        return (0, exports.MPCWalletStakeApiFp)(this.configuration).broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new staking operation.\n     * @summary Create a new staking operation for an address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to create the staking operation for.\n     * @param {CreateStakingOperationRequest} createStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MPCWalletStakeApi\n     */\n    createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n        return (0, exports.MPCWalletStakeApiFp)(this.configuration).createStakingOperation(walletId, addressId, createStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the latest state of a staking operation.\n     * @summary Get the latest state of a staking operation\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to fetch the staking operation for.\n     * @param {string} stakingOperationId The ID of the staking operation.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MPCWalletStakeApi\n     */\n    getStakingOperation(walletId, addressId, stakingOperationId, options) {\n        return (0, exports.MPCWalletStakeApiFp)(this.configuration).getStakingOperation(walletId, addressId, stakingOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.MPCWalletStakeApi = MPCWalletStakeApi;\n/**\n * NetworksApi - axios parameter creator\n * @export\n */\nconst NetworksApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetwork: async (networkId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getNetwork', 'networkId', networkId);\n            const localVarPath = `/v1/networks/{network_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.NetworksApiAxiosParamCreator = NetworksApiAxiosParamCreator;\n/**\n * NetworksApi - functional programming interface\n * @export\n */\nconst NetworksApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.NetworksApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNetwork(networkId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetwork(networkId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['NetworksApi.getNetwork']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.NetworksApiFp = NetworksApiFp;\n/**\n * NetworksApi - factory interface\n * @export\n */\nconst NetworksApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.NetworksApiFp)(configuration);\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetwork(networkId, options) {\n            return localVarFp.getNetwork(networkId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.NetworksApiFactory = NetworksApiFactory;\n/**\n * NetworksApi - object-oriented interface\n * @export\n * @class NetworksApi\n * @extends {BaseAPI}\n */\nclass NetworksApi extends base_1.BaseAPI {\n    /**\n     * Get network\n     * @summary Get network by ID\n     * @param {string} networkId The ID of the network to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NetworksApi\n     */\n    getNetwork(networkId, options) {\n        return (0, exports.NetworksApiFp)(this.configuration).getNetwork(networkId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.NetworksApi = NetworksApi;\n/**\n * OnchainIdentityApi - axios parameter creator\n * @export\n */\nconst OnchainIdentityApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resolveIdentityByAddress: async (networkId, addressId, roles, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('resolveIdentityByAddress', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('resolveIdentityByAddress', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/identity`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (roles) {\n                localVarQueryParameter['roles'] = roles.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.OnchainIdentityApiAxiosParamCreator = OnchainIdentityApiAxiosParamCreator;\n/**\n * OnchainIdentityApi - functional programming interface\n * @export\n */\nconst OnchainIdentityApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.OnchainIdentityApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveIdentityByAddress(networkId, addressId, roles, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['OnchainIdentityApi.resolveIdentityByAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.OnchainIdentityApiFp = OnchainIdentityApiFp;\n/**\n * OnchainIdentityApi - factory interface\n * @export\n */\nconst OnchainIdentityApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.OnchainIdentityApiFp)(configuration);\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n            return localVarFp.resolveIdentityByAddress(networkId, addressId, roles, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.OnchainIdentityApiFactory = OnchainIdentityApiFactory;\n/**\n * OnchainIdentityApi - object-oriented interface\n * @export\n * @class OnchainIdentityApi\n * @extends {BaseAPI}\n */\nclass OnchainIdentityApi extends base_1.BaseAPI {\n    /**\n     * Obtains onchain identity for an address on a specific network\n     * @summary Obtains onchain identity for an address on a specific network\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the identity for\n     * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainIdentityApi\n     */\n    resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n        return (0, exports.OnchainIdentityApiFp)(this.configuration).resolveIdentityByAddress(networkId, addressId, roles, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.OnchainIdentityApi = OnchainIdentityApi;\n/**\n * @export\n */\nexports.ResolveIdentityByAddressRolesEnum = {\n    Managed: 'managed',\n    Owned: 'owned'\n};\n/**\n * ReputationApi - axios parameter creator\n * @export\n */\nconst ReputationApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get the onchain reputation of an external address\n         * @summary Get the onchain reputation of an external address\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} addressId The ID of the address to fetch the reputation for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressReputation: async (networkId, addressId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressReputation', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressReputation', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/reputation`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ReputationApiAxiosParamCreator = ReputationApiAxiosParamCreator;\n/**\n * ReputationApi - functional programming interface\n * @export\n */\nconst ReputationApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ReputationApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get the onchain reputation of an external address\n         * @summary Get the onchain reputation of an external address\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} addressId The ID of the address to fetch the reputation for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAddressReputation(networkId, addressId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressReputation(networkId, addressId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ReputationApi.getAddressReputation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ReputationApiFp = ReputationApiFp;\n/**\n * ReputationApi - factory interface\n * @export\n */\nconst ReputationApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ReputationApiFp)(configuration);\n    return {\n        /**\n         * Get the onchain reputation of an external address\n         * @summary Get the onchain reputation of an external address\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} addressId The ID of the address to fetch the reputation for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressReputation(networkId, addressId, options) {\n            return localVarFp.getAddressReputation(networkId, addressId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ReputationApiFactory = ReputationApiFactory;\n/**\n * ReputationApi - object-oriented interface\n * @export\n * @class ReputationApi\n * @extends {BaseAPI}\n */\nclass ReputationApi extends base_1.BaseAPI {\n    /**\n     * Get the onchain reputation of an external address\n     * @summary Get the onchain reputation of an external address\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} addressId The ID of the address to fetch the reputation for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReputationApi\n     */\n    getAddressReputation(networkId, addressId, options) {\n        return (0, exports.ReputationApiFp)(this.configuration).getAddressReputation(networkId, addressId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ReputationApi = ReputationApi;\n/**\n * ServerSignersApi - axios parameter creator\n * @export\n */\nconst ServerSignersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServerSigner: async (createServerSignerRequest, options = {}) => {\n            const localVarPath = `/v1/server_signers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createServerSignerRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServerSigner: async (serverSignerId, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('getServerSigner', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listServerSignerEvents: async (serverSignerId, limit, page, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('listServerSignerEvents', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/events`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServerSigners: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/server_signers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSeedEventResult: async (serverSignerId, seedCreationEventResult, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('submitServerSignerSeedEventResult', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/seed_event_result`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seedCreationEventResult, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSignatureEventResult: async (serverSignerId, signatureCreationEventResult, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('submitServerSignerSignatureEventResult', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/signature_event_result`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signatureCreationEventResult, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ServerSignersApiAxiosParamCreator = ServerSignersApiAxiosParamCreator;\n/**\n * ServerSignersApi - functional programming interface\n * @export\n */\nconst ServerSignersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ServerSignersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServerSigner(createServerSignerRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServerSigner(createServerSignerRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.createServerSigner']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServerSigner(serverSignerId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerSigner(serverSignerId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.getServerSigner']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        async listServerSignerEvents(serverSignerId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServerSignerEvents(serverSignerId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.listServerSignerEvents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServerSigners(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServerSigners(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.listServerSigners']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.submitServerSignerSeedEventResult']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.submitServerSignerSignatureEventResult']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ServerSignersApiFp = ServerSignersApiFp;\n/**\n * ServerSignersApi - factory interface\n * @export\n */\nconst ServerSignersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ServerSignersApiFp)(configuration);\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServerSigner(createServerSignerRequest, options) {\n            return localVarFp.createServerSigner(createServerSignerRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServerSigner(serverSignerId, options) {\n            return localVarFp.getServerSigner(serverSignerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listServerSignerEvents(serverSignerId, limit, page, options) {\n            return localVarFp.listServerSignerEvents(serverSignerId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServerSigners(limit, page, options) {\n            return localVarFp.listServerSigners(limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n            return localVarFp.submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n            return localVarFp.submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ServerSignersApiFactory = ServerSignersApiFactory;\n/**\n * ServerSignersApi - object-oriented interface\n * @export\n * @class ServerSignersApi\n * @extends {BaseAPI}\n */\nclass ServerSignersApi extends base_1.BaseAPI {\n    /**\n     * Create a new Server-Signer\n     * @summary Create a new Server-Signer\n     * @param {CreateServerSignerRequest} [createServerSignerRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    createServerSigner(createServerSignerRequest, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).createServerSigner(createServerSignerRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a server signer by ID\n     * @summary Get a server signer by ID\n     * @param {string} serverSignerId The ID of the server signer to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    getServerSigner(serverSignerId, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).getServerSigner(serverSignerId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List events for a server signer\n     * @summary List events for a server signer\n     * @param {string} serverSignerId The ID of the server signer to fetch events for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    listServerSignerEvents(serverSignerId, limit, page, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).listServerSignerEvents(serverSignerId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List server signers for the current project\n     * @summary List server signers for the current project\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    listServerSigners(limit, page, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).listServerSigners(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Submit the result of a server signer event\n     * @summary Submit the result of a server signer event\n     * @param {string} serverSignerId The ID of the server signer to submit the event result for\n     * @param {SeedCreationEventResult} [seedCreationEventResult]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Submit the result of a server signer event\n     * @summary Submit the result of a server signer event\n     * @param {string} serverSignerId The ID of the server signer to submit the event result for\n     * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ServerSignersApi = ServerSignersApi;\n/**\n * SmartContractsApi - axios parameter creator\n * @export\n */\nconst SmartContractsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Compile a smart contract\n         * @summary Compile a smart contract\n         * @param {CompileSmartContractRequest} compileSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        compileSmartContract: async (compileSmartContractRequest, options = {}) => {\n            // verify required parameter 'compileSmartContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('compileSmartContract', 'compileSmartContractRequest', compileSmartContractRequest);\n            const localVarPath = `/v1/smart_contracts/compile`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(compileSmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartContract: async (walletId, addressId, createSmartContractRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'addressId', addressId);\n            // verify required parameter 'createSmartContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'createSmartContractRequest', createSmartContractRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deploySmartContract: async (walletId, addressId, smartContractId, deploySmartContractRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'addressId', addressId);\n            // verify required parameter 'smartContractId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'smartContractId', smartContractId);\n            // verify required parameter 'deploySmartContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'deploySmartContractRequest', deploySmartContractRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts/{smart_contract_id}/deploy`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"smart_contract_id\"}}`, encodeURIComponent(String(smartContractId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deploySmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartContract: async (walletId, addressId, smartContractId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'addressId', addressId);\n            // verify required parameter 'smartContractId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'smartContractId', smartContractId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts/{smart_contract_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"smart_contract_id\"}}`, encodeURIComponent(String(smartContractId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List smart contracts\n         * @summary List smart contracts\n         * @param {string} [page] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartContracts: async (page, options = {}) => {\n            const localVarPath = `/v1/smart_contracts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        readContract: async (networkId, contractAddress, readContractRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'networkId', networkId);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'contractAddress', contractAddress);\n            // verify required parameter 'readContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'readContractRequest', readContractRequest);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}/read`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(readContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Register a smart contract\n         * @summary Register a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {RegisterSmartContractRequest} [registerSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        registerSmartContract: async (networkId, contractAddress, registerSmartContractRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('registerSmartContract', 'networkId', networkId);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('registerSmartContract', 'contractAddress', contractAddress);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}/register`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerSmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a smart contract\n         * @summary Update a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {UpdateSmartContractRequest} [updateSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSmartContract: async (networkId, contractAddress, updateSmartContractRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('updateSmartContract', 'networkId', networkId);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('updateSmartContract', 'contractAddress', contractAddress);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateSmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.SmartContractsApiAxiosParamCreator = SmartContractsApiAxiosParamCreator;\n/**\n * SmartContractsApi - functional programming interface\n * @export\n */\nconst SmartContractsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.SmartContractsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Compile a smart contract\n         * @summary Compile a smart contract\n         * @param {CompileSmartContractRequest} compileSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async compileSmartContract(compileSmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.compileSmartContract(compileSmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.compileSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSmartContract(walletId, addressId, createSmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.createSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.deploySmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSmartContract(walletId, addressId, smartContractId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmartContract(walletId, addressId, smartContractId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.getSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List smart contracts\n         * @summary List smart contracts\n         * @param {string} [page] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSmartContracts(page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSmartContracts(page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.listSmartContracts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async readContract(networkId, contractAddress, readContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.readContract(networkId, contractAddress, readContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.readContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Register a smart contract\n         * @summary Register a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {RegisterSmartContractRequest} [registerSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.registerSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a smart contract\n         * @summary Update a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {UpdateSmartContractRequest} [updateSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.updateSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.SmartContractsApiFp = SmartContractsApiFp;\n/**\n * SmartContractsApi - factory interface\n * @export\n */\nconst SmartContractsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.SmartContractsApiFp)(configuration);\n    return {\n        /**\n         * Compile a smart contract\n         * @summary Compile a smart contract\n         * @param {CompileSmartContractRequest} compileSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        compileSmartContract(compileSmartContractRequest, options) {\n            return localVarFp.compileSmartContract(compileSmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n            return localVarFp.createSmartContract(walletId, addressId, createSmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n            return localVarFp.deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartContract(walletId, addressId, smartContractId, options) {\n            return localVarFp.getSmartContract(walletId, addressId, smartContractId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List smart contracts\n         * @summary List smart contracts\n         * @param {string} [page] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartContracts(page, options) {\n            return localVarFp.listSmartContracts(page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        readContract(networkId, contractAddress, readContractRequest, options) {\n            return localVarFp.readContract(networkId, contractAddress, readContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Register a smart contract\n         * @summary Register a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {RegisterSmartContractRequest} [registerSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options) {\n            return localVarFp.registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a smart contract\n         * @summary Update a smart contract\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {UpdateSmartContractRequest} [updateSmartContractRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options) {\n            return localVarFp.updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.SmartContractsApiFactory = SmartContractsApiFactory;\n/**\n * SmartContractsApi - object-oriented interface\n * @export\n * @class SmartContractsApi\n * @extends {BaseAPI}\n */\nclass SmartContractsApi extends base_1.BaseAPI {\n    /**\n     * Compile a smart contract\n     * @summary Compile a smart contract\n     * @param {CompileSmartContractRequest} compileSmartContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    compileSmartContract(compileSmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).compileSmartContract(compileSmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new smart contract\n     * @summary Create a new smart contract\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to deploy the smart contract from.\n     * @param {CreateSmartContractRequest} createSmartContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).createSmartContract(walletId, addressId, createSmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Deploys a smart contract, by broadcasting the transaction to the network.\n     * @summary Deploy a smart contract\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to broadcast the transaction from.\n     * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n     * @param {DeploySmartContractRequest} deploySmartContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a specific smart contract deployed by address.\n     * @summary Get a specific smart contract deployed by address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to fetch the smart contract for.\n     * @param {string} smartContractId The UUID of the smart contract to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    getSmartContract(walletId, addressId, smartContractId, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).getSmartContract(walletId, addressId, smartContractId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List smart contracts\n     * @summary List smart contracts\n     * @param {string} [page] Pagination token for retrieving the next set of results\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    listSmartContracts(page, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).listSmartContracts(page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Perform a read operation on a smart contract without creating a transaction\n     * @summary Read data from a smart contract\n     * @param {string} networkId\n     * @param {string} contractAddress\n     * @param {ReadContractRequest} readContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    readContract(networkId, contractAddress, readContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).readContract(networkId, contractAddress, readContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Register a smart contract\n     * @summary Register a smart contract\n     * @param {string} networkId The ID of the network to fetch.\n     * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n     * @param {RegisterSmartContractRequest} [registerSmartContractRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).registerSmartContract(networkId, contractAddress, registerSmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Update a smart contract\n     * @summary Update a smart contract\n     * @param {string} networkId The ID of the network to fetch.\n     * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n     * @param {UpdateSmartContractRequest} [updateSmartContractRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).updateSmartContract(networkId, contractAddress, updateSmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.SmartContractsApi = SmartContractsApi;\n/**\n * SmartWalletsApi - axios parameter creator\n * @export\n */\nconst SmartWalletsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a user operation\n         * @summary Broadcast a user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to broadcast the user operation from.\n         * @param {string} userOpHash The hash of the user operation to broadcast\n         * @param {BroadcastUserOperationRequest} [broadcastUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastUserOperation: async (smartWalletAddress, userOpHash, broadcastUserOperationRequest, options = {}) => {\n            // verify required parameter 'smartWalletAddress' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastUserOperation', 'smartWalletAddress', smartWalletAddress);\n            // verify required parameter 'userOpHash' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastUserOperation', 'userOpHash', userOpHash);\n            const localVarPath = `/v1/smart_wallets/{smart_wallet_address}/user_operations/{user_op_hash}/broadcast`\n                .replace(`{${\"smart_wallet_address\"}}`, encodeURIComponent(String(smartWalletAddress)))\n                .replace(`{${\"user_op_hash\"}}`, encodeURIComponent(String(userOpHash)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastUserOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new smart wallet, not scoped to a given network.\n         * @summary Create a new smart wallet\n         * @param {CreateSmartWalletRequest} [createSmartWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartWallet: async (createSmartWalletRequest, options = {}) => {\n            const localVarPath = `/v1/smart_wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSmartWalletRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new user operation on a smart wallet.\n         * @summary Create a new user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to create the user operation on.\n         * @param {string} networkId The ID of the network to create the user operation on.\n         * @param {CreateUserOperationRequest} [createUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUserOperation: async (smartWalletAddress, networkId, createUserOperationRequest, options = {}) => {\n            // verify required parameter 'smartWalletAddress' is not null or undefined\n            (0, common_1.assertParamExists)('createUserOperation', 'smartWalletAddress', smartWalletAddress);\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('createUserOperation', 'networkId', networkId);\n            const localVarPath = `/v1/smart_wallets/{smart_wallet_address}/networks/{network_id}/user_operations`\n                .replace(`{${\"smart_wallet_address\"}}`, encodeURIComponent(String(smartWalletAddress)))\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createUserOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get smart wallet\n         * @summary Get smart wallet by address\n         * @param {string} smartWalletAddress The address of that smart wallet to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartWallet: async (smartWalletAddress, options = {}) => {\n            // verify required parameter 'smartWalletAddress' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartWallet', 'smartWalletAddress', smartWalletAddress);\n            const localVarPath = `/v1/smart_wallets/{smart_wallet_address}`\n                .replace(`{${\"smart_wallet_address\"}}`, encodeURIComponent(String(smartWalletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get user operation\n         * @summary Get user operation\n         * @param {string} smartWalletAddress The address of the smart wallet the user operation belongs to.\n         * @param {string} userOpHash The hash of the user operation to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserOperation: async (smartWalletAddress, userOpHash, options = {}) => {\n            // verify required parameter 'smartWalletAddress' is not null or undefined\n            (0, common_1.assertParamExists)('getUserOperation', 'smartWalletAddress', smartWalletAddress);\n            // verify required parameter 'userOpHash' is not null or undefined\n            (0, common_1.assertParamExists)('getUserOperation', 'userOpHash', userOpHash);\n            const localVarPath = `/v1/smart_wallets/{smart_wallet_address}/user_operations/{user_op_hash}`\n                .replace(`{${\"smart_wallet_address\"}}`, encodeURIComponent(String(smartWalletAddress)))\n                .replace(`{${\"user_op_hash\"}}`, encodeURIComponent(String(userOpHash)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List smart wallets\n         * @summary List smart wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartWallets: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/smart_wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.SmartWalletsApiAxiosParamCreator = SmartWalletsApiAxiosParamCreator;\n/**\n * SmartWalletsApi - functional programming interface\n * @export\n */\nconst SmartWalletsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.SmartWalletsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a user operation\n         * @summary Broadcast a user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to broadcast the user operation from.\n         * @param {string} userOpHash The hash of the user operation to broadcast\n         * @param {BroadcastUserOperationRequest} [broadcastUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.broadcastUserOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new smart wallet, not scoped to a given network.\n         * @summary Create a new smart wallet\n         * @param {CreateSmartWalletRequest} [createSmartWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSmartWallet(createSmartWalletRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSmartWallet(createSmartWalletRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.createSmartWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new user operation on a smart wallet.\n         * @summary Create a new user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to create the user operation on.\n         * @param {string} networkId The ID of the network to create the user operation on.\n         * @param {CreateUserOperationRequest} [createUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.createUserOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get smart wallet\n         * @summary Get smart wallet by address\n         * @param {string} smartWalletAddress The address of that smart wallet to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSmartWallet(smartWalletAddress, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmartWallet(smartWalletAddress, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.getSmartWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get user operation\n         * @summary Get user operation\n         * @param {string} smartWalletAddress The address of the smart wallet the user operation belongs to.\n         * @param {string} userOpHash The hash of the user operation to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUserOperation(smartWalletAddress, userOpHash, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOperation(smartWalletAddress, userOpHash, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.getUserOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List smart wallets\n         * @summary List smart wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSmartWallets(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSmartWallets(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartWalletsApi.listSmartWallets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.SmartWalletsApiFp = SmartWalletsApiFp;\n/**\n * SmartWalletsApi - factory interface\n * @export\n */\nconst SmartWalletsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.SmartWalletsApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a user operation\n         * @summary Broadcast a user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to broadcast the user operation from.\n         * @param {string} userOpHash The hash of the user operation to broadcast\n         * @param {BroadcastUserOperationRequest} [broadcastUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options) {\n            return localVarFp.broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new smart wallet, not scoped to a given network.\n         * @summary Create a new smart wallet\n         * @param {CreateSmartWalletRequest} [createSmartWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartWallet(createSmartWalletRequest, options) {\n            return localVarFp.createSmartWallet(createSmartWalletRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new user operation on a smart wallet.\n         * @summary Create a new user operation\n         * @param {string} smartWalletAddress The address of the smart wallet to create the user operation on.\n         * @param {string} networkId The ID of the network to create the user operation on.\n         * @param {CreateUserOperationRequest} [createUserOperationRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options) {\n            return localVarFp.createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get smart wallet\n         * @summary Get smart wallet by address\n         * @param {string} smartWalletAddress The address of that smart wallet to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartWallet(smartWalletAddress, options) {\n            return localVarFp.getSmartWallet(smartWalletAddress, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get user operation\n         * @summary Get user operation\n         * @param {string} smartWalletAddress The address of the smart wallet the user operation belongs to.\n         * @param {string} userOpHash The hash of the user operation to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserOperation(smartWalletAddress, userOpHash, options) {\n            return localVarFp.getUserOperation(smartWalletAddress, userOpHash, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List smart wallets\n         * @summary List smart wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartWallets(limit, page, options) {\n            return localVarFp.listSmartWallets(limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.SmartWalletsApiFactory = SmartWalletsApiFactory;\n/**\n * SmartWalletsApi - object-oriented interface\n * @export\n * @class SmartWalletsApi\n * @extends {BaseAPI}\n */\nclass SmartWalletsApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a user operation\n     * @summary Broadcast a user operation\n     * @param {string} smartWalletAddress The address of the smart wallet to broadcast the user operation from.\n     * @param {string} userOpHash The hash of the user operation to broadcast\n     * @param {BroadcastUserOperationRequest} [broadcastUserOperationRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).broadcastUserOperation(smartWalletAddress, userOpHash, broadcastUserOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new smart wallet, not scoped to a given network.\n     * @summary Create a new smart wallet\n     * @param {CreateSmartWalletRequest} [createSmartWalletRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    createSmartWallet(createSmartWalletRequest, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).createSmartWallet(createSmartWalletRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new user operation on a smart wallet.\n     * @summary Create a new user operation\n     * @param {string} smartWalletAddress The address of the smart wallet to create the user operation on.\n     * @param {string} networkId The ID of the network to create the user operation on.\n     * @param {CreateUserOperationRequest} [createUserOperationRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).createUserOperation(smartWalletAddress, networkId, createUserOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get smart wallet\n     * @summary Get smart wallet by address\n     * @param {string} smartWalletAddress The address of that smart wallet to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    getSmartWallet(smartWalletAddress, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).getSmartWallet(smartWalletAddress, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get user operation\n     * @summary Get user operation\n     * @param {string} smartWalletAddress The address of the smart wallet the user operation belongs to.\n     * @param {string} userOpHash The hash of the user operation to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    getUserOperation(smartWalletAddress, userOpHash, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).getUserOperation(smartWalletAddress, userOpHash, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List smart wallets\n     * @summary List smart wallets\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartWalletsApi\n     */\n    listSmartWallets(limit, page, options) {\n        return (0, exports.SmartWalletsApiFp)(this.configuration).listSmartWallets(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.SmartWalletsApi = SmartWalletsApi;\n/**\n * StakeApi - axios parameter creator\n * @export\n */\nconst StakeApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        buildStakingOperation: async (buildStakingOperationRequest, options = {}) => {\n            // verify required parameter 'buildStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('buildStakingOperation', 'buildStakingOperationRequest', buildStakingOperationRequest);\n            const localVarPath = `/v1/stake/build`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(buildStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchHistoricalStakingBalances: async (networkId, assetId, addressId, startTime, endTime, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'assetId', assetId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'addressId', addressId);\n            // verify required parameter 'startTime' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'startTime', startTime);\n            // verify required parameter 'endTime' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'endTime', endTime);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/stake/balances`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            if (startTime !== undefined) {\n                localVarQueryParameter['start_time'] = (startTime instanceof Date) ?\n                    startTime.toISOString() :\n                    startTime;\n            }\n            if (endTime !== undefined) {\n                localVarQueryParameter['end_time'] = (endTime instanceof Date) ?\n                    endTime.toISOString() :\n                    endTime;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchStakingRewards: async (fetchStakingRewardsRequest, limit, page, options = {}) => {\n            // verify required parameter 'fetchStakingRewardsRequest' is not null or undefined\n            (0, common_1.assertParamExists)('fetchStakingRewards', 'fetchStakingRewardsRequest', fetchStakingRewardsRequest);\n            const localVarPath = `/v1/stake/rewards/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(fetchStakingRewardsRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalStakingOperation: async (networkId, addressId, stakingOperationId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'stakingOperationId', stakingOperationId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/staking_operations/{staking_operation_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingContext: async (getStakingContextRequest, options = {}) => {\n            // verify required parameter 'getStakingContextRequest' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingContext', 'getStakingContextRequest', getStakingContextRequest);\n            const localVarPath = `/v1/stake/context`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getStakingContextRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getValidator: async (networkId, assetId, validatorId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'assetId', assetId);\n            // verify required parameter 'validatorId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'validatorId', validatorId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}/validators/{validator_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)))\n                .replace(`{${\"validator_id\"}}`, encodeURIComponent(String(validatorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listValidators: async (networkId, assetId, status, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listValidators', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('listValidators', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}/validators`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.StakeApiAxiosParamCreator = StakeApiAxiosParamCreator;\n/**\n * StakeApi - functional programming interface\n * @export\n */\nconst StakeApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.StakeApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async buildStakingOperation(buildStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.buildStakingOperation(buildStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.buildStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.fetchHistoricalStakingBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.fetchStakingRewards']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalStakingOperation(networkId, addressId, stakingOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.getExternalStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakingContext(getStakingContextRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakingContext(getStakingContextRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.getStakingContext']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getValidator(networkId, assetId, validatorId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidator(networkId, assetId, validatorId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.getValidator']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listValidators(networkId, assetId, status, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listValidators(networkId, assetId, status, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.listValidators']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.StakeApiFp = StakeApiFp;\n/**\n * StakeApi - factory interface\n * @export\n */\nconst StakeApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.StakeApiFp)(configuration);\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        buildStakingOperation(buildStakingOperationRequest, options) {\n            return localVarFp.buildStakingOperation(buildStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n            return localVarFp.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n            return localVarFp.fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n            return localVarFp.getExternalStakingOperation(networkId, addressId, stakingOperationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingContext(getStakingContextRequest, options) {\n            return localVarFp.getStakingContext(getStakingContextRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getValidator(networkId, assetId, validatorId, options) {\n            return localVarFp.getValidator(networkId, assetId, validatorId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listValidators(networkId, assetId, status, limit, page, options) {\n            return localVarFp.listValidators(networkId, assetId, status, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.StakeApiFactory = StakeApiFactory;\n/**\n * StakeApi - object-oriented interface\n * @export\n * @class StakeApi\n * @extends {BaseAPI}\n */\nclass StakeApi extends base_1.BaseAPI {\n    /**\n     * Build a new staking operation\n     * @summary Build a new staking operation\n     * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    buildStakingOperation(buildStakingOperationRequest, options) {\n        return (0, exports.StakeApiFp)(this.configuration).buildStakingOperation(buildStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch historical staking balances for given address.\n     * @summary Fetch historical staking balances\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n     * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n     * @param {string} startTime The start time of this historical staking balance period.\n     * @param {string} endTime The end time of this historical staking balance period.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n        return (0, exports.StakeApiFp)(this.configuration).fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch staking rewards for a list of addresses\n     * @summary Fetch staking rewards\n     * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n        return (0, exports.StakeApiFp)(this.configuration).fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the latest state of a staking operation\n     * @summary Get the latest state of a staking operation\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the staking operation for\n     * @param {string} stakingOperationId The ID of the staking operation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n        return (0, exports.StakeApiFp)(this.configuration).getExternalStakingOperation(networkId, addressId, stakingOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get staking context for an address\n     * @summary Get staking context\n     * @param {GetStakingContextRequest} getStakingContextRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    getStakingContext(getStakingContextRequest, options) {\n        return (0, exports.StakeApiFp)(this.configuration).getStakingContext(getStakingContextRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a validator belonging to the user for a given network, asset and id.\n     * @summary Get a validator belonging to the CDP project\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The symbol of the asset to get the validator for.\n     * @param {string} validatorId The unique id of the validator to fetch details for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    getValidator(networkId, assetId, validatorId, options) {\n        return (0, exports.StakeApiFp)(this.configuration).getValidator(networkId, assetId, validatorId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List validators belonging to the user for a given network and asset.\n     * @summary List validators belonging to the CDP project\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The symbol of the asset to get the validators for.\n     * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    listValidators(networkId, assetId, status, limit, page, options) {\n        return (0, exports.StakeApiFp)(this.configuration).listValidators(networkId, assetId, status, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.StakeApi = StakeApi;\n/**\n * TradesApi - axios parameter creator\n * @export\n */\nconst TradesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTrade: async (walletId, addressId, tradeId, broadcastTradeRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'addressId', addressId);\n            // verify required parameter 'tradeId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'tradeId', tradeId);\n            // verify required parameter 'broadcastTradeRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'broadcastTradeRequest', broadcastTradeRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades/{trade_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"trade_id\"}}`, encodeURIComponent(String(tradeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastTradeRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTrade: async (walletId, addressId, createTradeRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'addressId', addressId);\n            // verify required parameter 'createTradeRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'createTradeRequest', createTradeRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTradeRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTrade: async (walletId, addressId, tradeId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'addressId', addressId);\n            // verify required parameter 'tradeId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'tradeId', tradeId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades/{trade_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"trade_id\"}}`, encodeURIComponent(String(tradeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTrades: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listTrades', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listTrades', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TradesApiAxiosParamCreator = TradesApiAxiosParamCreator;\n/**\n * TradesApi - functional programming interface\n * @export\n */\nconst TradesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TradesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.broadcastTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTrade(walletId, addressId, createTradeRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrade(walletId, addressId, createTradeRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.createTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTrade(walletId, addressId, tradeId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrade(walletId, addressId, tradeId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.getTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTrades(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrades(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.listTrades']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TradesApiFp = TradesApiFp;\n/**\n * TradesApi - factory interface\n * @export\n */\nconst TradesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TradesApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n            return localVarFp.broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTrade(walletId, addressId, createTradeRequest, options) {\n            return localVarFp.createTrade(walletId, addressId, createTradeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTrade(walletId, addressId, tradeId, options) {\n            return localVarFp.getTrade(walletId, addressId, tradeId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTrades(walletId, addressId, limit, page, options) {\n            return localVarFp.listTrades(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TradesApiFactory = TradesApiFactory;\n/**\n * TradesApi - object-oriented interface\n * @export\n * @class TradesApi\n * @extends {BaseAPI}\n */\nclass TradesApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a trade\n     * @summary Broadcast a trade\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the trade belongs to\n     * @param {string} tradeId The ID of the trade to broadcast\n     * @param {BroadcastTradeRequest} broadcastTradeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n        return (0, exports.TradesApiFp)(this.configuration).broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new trade\n     * @summary Create a new trade for an address\n     * @param {string} walletId The ID of the wallet the source address belongs to\n     * @param {string} addressId The ID of the address to conduct the trade from\n     * @param {CreateTradeRequest} createTradeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    createTrade(walletId, addressId, createTradeRequest, options) {\n        return (0, exports.TradesApiFp)(this.configuration).createTrade(walletId, addressId, createTradeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a trade by ID\n     * @summary Get a trade by ID\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the trade belongs to\n     * @param {string} tradeId The ID of the trade to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    getTrade(walletId, addressId, tradeId, options) {\n        return (0, exports.TradesApiFp)(this.configuration).getTrade(walletId, addressId, tradeId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List trades for an address.\n     * @summary List trades for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to list trades for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    listTrades(walletId, addressId, limit, page, options) {\n        return (0, exports.TradesApiFp)(this.configuration).listTrades(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TradesApi = TradesApi;\n/**\n * TransactionHistoryApi - axios parameter creator\n * @export\n */\nconst TransactionHistoryApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressTransactions: async (networkId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressTransactions', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressTransactions', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transactions`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TransactionHistoryApiAxiosParamCreator = TransactionHistoryApiAxiosParamCreator;\n/**\n * TransactionHistoryApi - functional programming interface\n * @export\n */\nconst TransactionHistoryApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TransactionHistoryApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressTransactions(networkId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressTransactions(networkId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransactionHistoryApi.listAddressTransactions']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TransactionHistoryApiFp = TransactionHistoryApiFp;\n/**\n * TransactionHistoryApi - factory interface\n * @export\n */\nconst TransactionHistoryApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TransactionHistoryApiFp)(configuration);\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressTransactions(networkId, addressId, limit, page, options) {\n            return localVarFp.listAddressTransactions(networkId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TransactionHistoryApiFactory = TransactionHistoryApiFactory;\n/**\n * TransactionHistoryApi - object-oriented interface\n * @export\n * @class TransactionHistoryApi\n * @extends {BaseAPI}\n */\nclass TransactionHistoryApi extends base_1.BaseAPI {\n    /**\n     * List all transactions that interact with the address.\n     * @summary List transactions for an address.\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the transactions for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionHistoryApi\n     */\n    listAddressTransactions(networkId, addressId, limit, page, options) {\n        return (0, exports.TransactionHistoryApiFp)(this.configuration).listAddressTransactions(networkId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TransactionHistoryApi = TransactionHistoryApi;\n/**\n * TransfersApi - axios parameter creator\n * @export\n */\nconst TransfersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTransfer: async (walletId, addressId, transferId, broadcastTransferRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'transferId', transferId);\n            // verify required parameter 'broadcastTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'broadcastTransferRequest', broadcastTransferRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers/{transfer_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTransfer: async (walletId, addressId, createTransferRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'addressId', addressId);\n            // verify required parameter 'createTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'createTransferRequest', createTransferRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTransfer: async (walletId, addressId, transferId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'transferId', transferId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers/{transfer_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTransfers: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listTransfers', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listTransfers', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TransfersApiAxiosParamCreator = TransfersApiAxiosParamCreator;\n/**\n * TransfersApi - functional programming interface\n * @export\n */\nconst TransfersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TransfersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.broadcastTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTransfer(walletId, addressId, createTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransfer(walletId, addressId, createTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.createTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTransfer(walletId, addressId, transferId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransfer(walletId, addressId, transferId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.getTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTransfers(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransfers(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.listTransfers']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TransfersApiFp = TransfersApiFp;\n/**\n * TransfersApi - factory interface\n * @export\n */\nconst TransfersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TransfersApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n            return localVarFp.broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTransfer(walletId, addressId, createTransferRequest, options) {\n            return localVarFp.createTransfer(walletId, addressId, createTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTransfer(walletId, addressId, transferId, options) {\n            return localVarFp.getTransfer(walletId, addressId, transferId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTransfers(walletId, addressId, limit, page, options) {\n            return localVarFp.listTransfers(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TransfersApiFactory = TransfersApiFactory;\n/**\n * TransfersApi - object-oriented interface\n * @export\n * @class TransfersApi\n * @extends {BaseAPI}\n */\nclass TransfersApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a transfer\n     * @summary Broadcast a transfer\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to broadcast\n     * @param {BroadcastTransferRequest} broadcastTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new transfer\n     * @summary Create a new transfer for an address\n     * @param {string} walletId The ID of the wallet the source address belongs to\n     * @param {string} addressId The ID of the address to transfer from\n     * @param {CreateTransferRequest} createTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    createTransfer(walletId, addressId, createTransferRequest, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).createTransfer(walletId, addressId, createTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a transfer by ID\n     * @summary Get a transfer by ID\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    getTransfer(walletId, addressId, transferId, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).getTransfer(walletId, addressId, transferId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List transfers for an address.\n     * @summary List transfers for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to list transfers for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    listTransfers(walletId, addressId, limit, page, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).listTransfers(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TransfersApi = TransfersApi;\n/**\n * UsersApi - axios parameter creator\n * @export\n */\nconst UsersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentUser: async (options = {}) => {\n            const localVarPath = `/v1/users/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;\n/**\n * UsersApi - functional programming interface\n * @export\n */\nconst UsersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCurrentUser(options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['UsersApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.UsersApiFp = UsersApiFp;\n/**\n * UsersApi - factory interface\n * @export\n */\nconst UsersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.UsersApiFp)(configuration);\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentUser(options) {\n            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.UsersApiFactory = UsersApiFactory;\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */\nclass UsersApi extends base_1.BaseAPI {\n    /**\n     * Get current user\n     * @summary Get current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    getCurrentUser(options) {\n        return (0, exports.UsersApiFp)(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.UsersApi = UsersApi;\n/**\n * WalletsApi - axios parameter creator\n * @export\n */\nconst WalletsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWallet: async (createWalletRequest, options = {}) => {\n            const localVarPath = `/v1/wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWalletRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet: async (walletId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getWallet', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalance: async (walletId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getWalletBalance', 'walletId', walletId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getWalletBalance', 'assetId', assetId);\n            const localVarPath = `/v1/wallets/{wallet_id}/balances/{asset_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWalletBalances: async (walletId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listWalletBalances', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/balances`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWallets: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.WalletsApiAxiosParamCreator = WalletsApiAxiosParamCreator;\n/**\n * WalletsApi - functional programming interface\n * @export\n */\nconst WalletsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.WalletsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWallet(createWalletRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWallet(createWalletRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.createWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWallet(walletId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(walletId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.getWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletBalance(walletId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalance(walletId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.getWalletBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWalletBalances(walletId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWalletBalances(walletId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.listWalletBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWallets(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWallets(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.listWallets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.WalletsApiFp = WalletsApiFp;\n/**\n * WalletsApi - factory interface\n * @export\n */\nconst WalletsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.WalletsApiFp)(configuration);\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWallet(createWalletRequest, options) {\n            return localVarFp.createWallet(createWalletRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet(walletId, options) {\n            return localVarFp.getWallet(walletId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalance(walletId, assetId, options) {\n            return localVarFp.getWalletBalance(walletId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWalletBalances(walletId, options) {\n            return localVarFp.listWalletBalances(walletId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWallets(limit, page, options) {\n            return localVarFp.listWallets(limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.WalletsApiFactory = WalletsApiFactory;\n/**\n * WalletsApi - object-oriented interface\n * @export\n * @class WalletsApi\n * @extends {BaseAPI}\n */\nclass WalletsApi extends base_1.BaseAPI {\n    /**\n     * Create a new wallet scoped to the user.\n     * @summary Create a new wallet\n     * @param {CreateWalletRequest} [createWalletRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    createWallet(createWalletRequest, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).createWallet(createWalletRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get wallet\n     * @summary Get wallet by ID\n     * @param {string} walletId The ID of the wallet to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    getWallet(walletId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).getWallet(walletId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the aggregated balance of an asset across all of the addresses in the wallet.\n     * @summary Get the balance of an asset in the wallet\n     * @param {string} walletId The ID of the wallet to fetch the balance for\n     * @param {string} assetId The symbol of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    getWalletBalance(walletId, assetId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).getWalletBalance(walletId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List the balances of all of the addresses in the wallet aggregated by asset.\n     * @summary List wallet balances\n     * @param {string} walletId The ID of the wallet to fetch the balances for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    listWalletBalances(walletId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).listWalletBalances(walletId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List wallets belonging to the user.\n     * @summary List wallets\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    listWallets(limit, page, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).listWallets(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.WalletsApi = WalletsApi;\n/**\n * WebhooksApi - axios parameter creator\n * @export\n */\nconst WebhooksApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWalletWebhook: async (walletId, createWalletWebhookRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createWalletWebhook', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/webhooks`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWalletWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWebhook: async (createWebhookRequest, options = {}) => {\n            const localVarPath = `/v1/webhooks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWebhook: async (webhookId, options = {}) => {\n            // verify required parameter 'webhookId' is not null or undefined\n            (0, common_1.assertParamExists)('deleteWebhook', 'webhookId', webhookId);\n            const localVarPath = `/v1/webhooks/{webhook_id}`\n                .replace(`{${\"webhook_id\"}}`, encodeURIComponent(String(webhookId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWebhooks: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/webhooks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWebhook: async (webhookId, updateWebhookRequest, options = {}) => {\n            // verify required parameter 'webhookId' is not null or undefined\n            (0, common_1.assertParamExists)('updateWebhook', 'webhookId', webhookId);\n            const localVarPath = `/v1/webhooks/{webhook_id}`\n                .replace(`{${\"webhook_id\"}}`, encodeURIComponent(String(webhookId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication apiKey required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            // authentication session required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"Jwt\", configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.WebhooksApiAxiosParamCreator = WebhooksApiAxiosParamCreator;\n/**\n * WebhooksApi - functional programming interface\n * @export\n */\nconst WebhooksApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.WebhooksApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWalletWebhook(walletId, createWalletWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.createWalletWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWebhook(createWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(createWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.createWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWebhook(webhookId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(webhookId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.deleteWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWebhooks(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhooks(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.listWebhooks']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWebhook(webhookId, updateWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhook(webhookId, updateWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.updateWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.WebhooksApiFp = WebhooksApiFp;\n/**\n * WebhooksApi - factory interface\n * @export\n */\nconst WebhooksApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.WebhooksApiFp)(configuration);\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n            return localVarFp.createWalletWebhook(walletId, createWalletWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWebhook(createWebhookRequest, options) {\n            return localVarFp.createWebhook(createWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWebhook(webhookId, options) {\n            return localVarFp.deleteWebhook(webhookId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWebhooks(limit, page, options) {\n            return localVarFp.listWebhooks(limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWebhook(webhookId, updateWebhookRequest, options) {\n            return localVarFp.updateWebhook(webhookId, updateWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.WebhooksApiFactory = WebhooksApiFactory;\n/**\n * WebhooksApi - object-oriented interface\n * @export\n * @class WebhooksApi\n * @extends {BaseAPI}\n */\nclass WebhooksApi extends base_1.BaseAPI {\n    /**\n     * Create a new webhook scoped to a wallet\n     * @summary Create a new webhook scoped to a wallet\n     * @param {string} walletId The ID of the wallet to create the webhook for.\n     * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).createWalletWebhook(walletId, createWalletWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new webhook\n     * @summary Create a new webhook\n     * @param {CreateWebhookRequest} [createWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    createWebhook(createWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).createWebhook(createWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Delete a webhook\n     * @summary Delete a webhook\n     * @param {string} webhookId The Webhook uuid that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    deleteWebhook(webhookId, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).deleteWebhook(webhookId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List webhooks, optionally filtered by event type.\n     * @summary List webhooks\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    listWebhooks(limit, page, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).listWebhooks(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Update a webhook\n     * @summary Update a webhook\n     * @param {string} webhookId The Webhook id that needs to be updated\n     * @param {UpdateWebhookRequest} [updateWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    updateWebhook(webhookId, updateWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).updateWebhook(webhookId, updateWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.WebhooksApi = WebhooksApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/base.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nexports.BASE_PATH = \"https://api.cdp.coinbase.com/platform\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nclass BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nclass RequiredError extends Error {\n    constructor(field, msg) {\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\nexports.RequiredError = RequiredError;\n/**\n *\n * @export\n */\nexports.operationServerMap = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcsMEJBQTBCLEdBQUcsaUJBQWlCO0FBQ3JILGdDQUFnQyxtQkFBTyxDQUFDLDZEQUFPO0FBQy9DLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY2xpZW50L2Jhc2UuanM/Y2M4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb2luYmFzZSBQbGF0Zm9ybSBBUElcbiAqIFRoaXMgaXMgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBBUElzLCB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIENvaW5iYXNlIFBsYXRmb3JtIFNES3MuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4xLWFscGhhXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVyYXRpb25TZXJ2ZXJNYXAgPSBleHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBleHBvcnRzLkJhc2VBUEkgPSBleHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IGV4cG9ydHMuQkFTRV9QQVRIID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuZXhwb3J0cy5CQVNFX1BBVEggPSBcImh0dHBzOi8vYXBpLmNkcC5jb2luYmFzZS5jb20vcGxhdGZvcm1cIi5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IHtcbiAgICBjc3Y6IFwiLFwiLFxuICAgIHNzdjogXCIgXCIsXG4gICAgdHN2OiBcIlxcdFwiLFxuICAgIHBpcGVzOiBcInxcIixcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQmFzZUFQSVxuICovXG5jbGFzcyBCYXNlQVBJIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uLCBiYXNlUGF0aCA9IGV4cG9ydHMuQkFTRV9QQVRILCBheGlvcyA9IGF4aW9zXzEuZGVmYXVsdCkge1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcztcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCA/PyBiYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUFQSSA9IEJhc2VBUEk7XG47XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUmVxdWlyZWRFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5jbGFzcyBSZXF1aXJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBtc2cpIHtcbiAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBSZXF1aXJlZEVycm9yO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLm9wZXJhdGlvblNlcnZlck1hcCA9IHt9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/common.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\n/**\n *\n * @export\n */\nexports.DUMMY_BASE_URL = 'https://example.com';\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nconst assertParamExists = function (functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\nexports.assertParamExists = assertParamExists;\n/**\n *\n * @export\n */\nconst setApiKeyToObject = async function (object, keyParamName, configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n};\nexports.setApiKeyToObject = setApiKeyToObject;\n/**\n *\n * @export\n */\nconst setBasicAuthToObject = function (object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n};\nexports.setBasicAuthToObject = setBasicAuthToObject;\n/**\n *\n * @export\n */\nconst setBearerAuthToObject = async function (object, configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n};\nexports.setBearerAuthToObject = setBearerAuthToObject;\n/**\n *\n * @export\n */\nconst setOAuthToObject = async function (object, name, scopes, configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n};\nexports.setOAuthToObject = setOAuthToObject;\nfunction setFlattenedQueryParams(urlSearchParams, parameter, key = \"\") {\n    if (parameter == null)\n        return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            parameter.forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        }\n        else {\n            Object.keys(parameter).forEach(currentKey => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));\n        }\n    }\n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        }\n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n/**\n *\n * @export\n */\nconst setSearchParams = function (url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n};\nexports.setSearchParams = setSearchParams;\n/**\n *\n * @export\n */\nconst serializeDataIfNeeded = function (value, requestOptions, configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n};\nexports.serializeDataIfNeeded = serializeDataIfNeeded;\n/**\n *\n * @export\n */\nconst toPathString = function (url) {\n    return url.pathname + url.search + url.hash;\n};\nexports.toPathString = toPathString;\n/**\n *\n * @export\n */\nconst createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url };\n        return axios.request(axiosRequestArgs);\n    };\n};\nexports.createRequestFunction = createRequestFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(param = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = {\n            headers: {\n                ...param.baseOptions?.headers,\n                'User-Agent': \"OpenAPI-Generator/typescript-axios\"\n            },\n            ...param.baseOptions\n        };\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9jb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELFdBQVcsc0JBQXNCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY2xpZW50L2NvbmZpZ3VyYXRpb24uanM/ZDk4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb2luYmFzZSBQbGF0Zm9ybSBBUElcbiAqIFRoaXMgaXMgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBBUElzLCB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIENvaW5iYXNlIFBsYXRmb3JtIFNES3MuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4xLWFscGhhXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gdm9pZCAwO1xuY2xhc3MgQ29uZmlndXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyYW0gPSB7fSkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IHBhcmFtLmFwaUtleTtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHBhcmFtLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcGFyYW0ucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBwYXJhbS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHBhcmFtLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLnNlcnZlckluZGV4ID0gcGFyYW0uc2VydmVySW5kZXg7XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgLi4ucGFyYW0uYmFzZU9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBcIk9wZW5BUEktR2VuZXJhdG9yL3R5cGVzY3JpcHQtYXhpb3NcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLnBhcmFtLmJhc2VPcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZm9ybURhdGFDdG9yID0gcGFyYW0uZm9ybURhdGFDdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBhIEpTT04gTUlNRS5cbiAgICAgKiBKU09OIE1JTUUgZXhhbXBsZXM6XG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uXG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURjhcbiAgICAgKiAgIEFQUExJQ0FUSU9OL0pTT05cbiAgICAgKiAgIGFwcGxpY2F0aW9uL3ZuZC5jb21wYW55K2pzb25cbiAgICAgKiBAcGFyYW0gbWltZSAtIE1JTUUgKE11bHRpcHVycG9zZSBJbnRlcm5ldCBNYWlsIEV4dGVuc2lvbnMpXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiBNSU1FIGlzIEpTT04sIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0pzb25NaW1lKG1pbWUpIHtcbiAgICAgICAgY29uc3QganNvbk1pbWUgPSBuZXcgUmVnRXhwKCdeKGFwcGxpY2F0aW9uXFwvanNvbnxbXjsvIFxcdF0rXFwvW147LyBcXHRdK1srXWpzb24pWyBcXHRdKig7LiopPyQnLCAnaScpO1xuICAgICAgICByZXR1cm4gbWltZSAhPT0gbnVsbCAmJiAoanNvbk1pbWUudGVzdChtaW1lKSB8fCBtaW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb24nKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSBDb25maWd1cmF0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./configuration */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RUFBTztBQUM1QixhQUFhLG1CQUFPLENBQUMsaUdBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jbGllbnQvaW5kZXguanM/ZGJjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb2luYmFzZSBQbGF0Zm9ybSBBUElcbiAqIFRoaXMgaXMgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBBUElzLCB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIENvaW5iYXNlIFBsYXRmb3JtIFNES3MuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4xLWFscGhhXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25maWd1cmF0aW9uXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Address = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst balance_map_1 = __webpack_require__(/*! ./balance_map */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\");\nconst faucet_transaction_1 = __webpack_require__(/*! ./faucet_transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\");\nconst historical_balance_1 = __webpack_require__(/*! ./historical_balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst staking_reward_1 = __webpack_require__(/*! ./staking_reward */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\");\nconst staking_balance_1 = __webpack_require__(/*! ./staking_balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst address_reputation_1 = __webpack_require__(/*! ./address_reputation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address_reputation.js\");\n/**\n * A representation of a blockchain address, which is a user-controlled account on a network.\n */\nclass Address {\n    /**\n     * Initializes a new Address instance.\n     *\n     * @param networkId - The network id.\n     * @param id - The onchain address id.\n     */\n    constructor(networkId, id) {\n        this.networkId = networkId;\n        this.id = id;\n    }\n    /**\n     * Returns the network ID.\n     *\n     * @returns The network ID.\n     */\n    getNetworkId() {\n        return this.networkId;\n    }\n    /**\n     * Returns the address ID.\n     *\n     * @returns The address ID.\n     */\n    getId() {\n        return this.id;\n    }\n    /**\n     * Returns the list of balances for the address.\n     *\n     * @returns The map from asset ID to balance.\n     */\n    async listBalances() {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.listExternalAddressBalances(this.getNetworkId(), this.getId());\n        return balance_map_1.BalanceMap.fromBalances(response.data.data);\n    }\n    /**\n     * Returns the balance of the provided asset.\n     *\n     * @param assetId - The asset ID.\n     * @returns The balance of the asset.\n     */\n    async getBalance(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.getExternalAddressBalance(this.getNetworkId(), this.getId(), asset_1.Asset.primaryDenomination(assetId));\n        if (!response.data) {\n            return new decimal_js_1.default(0);\n        }\n        return balance_1.Balance.fromModelAndAssetId(response.data, assetId).amount;\n    }\n    /**\n     * Returns the historical balances of the provided asset.\n     *\n     * @param assetId - The asset ID.\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Historical Balances to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Historical Balances. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Historical Balances for the given Asset ID.\n     */\n    async listHistoricalBalances(assetId, { limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.balanceHistory.listAddressHistoricalBalance(this.getNetworkId(), this.getId(), asset_1.Asset.primaryDenomination(assetId), limit, page);\n        response.data.data.forEach(historicalBalanceModel => {\n            const historicalBalance = historical_balance_1.HistoricalBalance.fromModel(historicalBalanceModel);\n            data.push(historicalBalance);\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns the transactions of the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Transactions to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Transactions. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Transactions.\n     */\n    async listTransactions({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.transactionHistory.listAddressTransactions(this.getNetworkId(), this.getId(), limit, page);\n        response.data.data.forEach(transactionModel => {\n            const transaction = new transaction_1.Transaction(transactionModel);\n            data.push(transaction);\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Lists the staking rewards for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @returns The staking rewards.\n     */\n    async stakingRewards(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date()), format = types_1.StakingRewardFormat.USD) {\n        return staking_reward_1.StakingReward.list(coinbase_1.Coinbase.normalizeNetwork(this.getNetworkId()), assetId, [this.getId()], startTime, endTime, format);\n    }\n    /**\n     * Lists the historical staking balances for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @returns The staking balances.\n     */\n    async historicalStakingBalances(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date())) {\n        return staking_balance_1.StakingBalance.list(coinbase_1.Coinbase.normalizeNetwork(this.getNetworkId()), assetId, this.getId(), startTime, endTime);\n    }\n    /**\n     * Get the stakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the stakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the stakeable balance.\n     * @returns The stakeable balance.\n     */\n    async stakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.stakeableBalance;\n    }\n    /**\n     * Get the unstakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the unstakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the unstakeable balance.\n     * A. Dedicated ETH Staking\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to retrieve unstakeable balance for. Defaults to all validators.\n     * @returns The unstakeable balance.\n     */\n    async unstakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.unstakeableBalance;\n    }\n    /**\n     * Get the claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the claimable balance.\n     * @returns The claimable balance.\n     */\n    async claimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.claimableBalance;\n    }\n    /**\n     * Get the pending claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check pending claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the pending claimable balance.\n     * @returns The pending claimable balance.\n     */\n    async pendingClaimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.pendingClaimableBalance;\n    }\n    /**\n     * Requests faucet funds for the address.\n     * Only supported on testnet networks.\n     *\n     * @param assetId - The ID of the asset to transfer from the faucet.\n     * @returns The faucet transaction object.\n     * @throws {Error} If the request does not return a transaction hash.\n     * @throws {Error} If the request fails.\n     */\n    async faucet(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.requestExternalFaucetFunds(this.getNetworkId(), this.getId(), assetId, true);\n        return new faucet_transaction_1.FaucetTransaction(response.data);\n    }\n    /**\n     * Returns the reputation of the Address.\n     *\n     * @returns The reputation of the Address.\n     * @throws {Error} if the API request to get the Address reputation fails.\n     * @throws {Error} if the Address reputation is not available.\n     */\n    async reputation() {\n        if (this._reputation) {\n            return this._reputation;\n        }\n        const response = await coinbase_1.Coinbase.apiClients.addressReputation.getAddressReputation(this.getNetworkId(), this.getId());\n        this._reputation = new address_reputation_1.AddressReputation(response.data);\n        return this._reputation;\n    }\n    /**\n     * Returns a string representation of the address.\n     *\n     * @returns A string representing the address.\n     */\n    toString() {\n        return `Address { addressId: '${this.getId()}', networkId: '${this.getNetworkId()}' }`;\n    }\n    /**\n     * Validate if the operation is able to stake with the supplied input.\n     *\n     * @param amount - The amount of the asset to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create a stake operation.\n     */\n    async validateCanStake(amount, assetId, mode, options) {\n        const stakeableBalance = await this.stakeableBalance(assetId, mode, options);\n        if (new decimal_js_1.default(stakeableBalance).lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to stake, only ${stakeableBalance} available.`);\n        }\n    }\n    /**\n     * Validate if the operation is able to unstake with the supplied input.\n     *\n     * @param amount - The amount of the asset to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create an unstake operation.\n     */\n    async validateCanUnstake(amount, assetId, mode, options) {\n        const unstakeableBalance = new decimal_js_1.default(await this.unstakeableBalance(assetId, mode, options));\n        if (unstakeableBalance.lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to unstake, only ${unstakeableBalance} available.`);\n        }\n    }\n    /**\n     * Validate if the operation is able to claim stake with the supplied input.\n     *\n     * @param amount - The amount of the asset to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create a claim stake operation.\n     */\n    async validateCanClaimStake(amount, assetId, mode, options) {\n        if (assetId === \"eth\" && mode === types_1.StakeOptionsMode.NATIVE) {\n            throw new Error(`Claiming stake for ETH is not supported in native mode.`);\n        }\n        const claimableBalance = new decimal_js_1.default(await this.claimableBalance(assetId, mode, options));\n        if (claimableBalance.lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to claim stake, only ${claimableBalance} available.`);\n        }\n    }\n    /**\n     * Create a shallow copy of given options.\n     *\n     * @param options - The supplied options to be copied\n     * @private\n     * @returns A copy of the options.\n     */\n    copyOptions(options) {\n        return { ...options };\n    }\n    /**\n     * Get the different staking balance types for the supplied asset.\n     *\n     * @param assetId - The asset to lookup balances for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the balance lookup.\n     * @private\n     * @returns The different balance types.\n     */\n    async getStakingBalances(assetId, mode, options) {\n        const newOptions = this.copyOptions(options);\n        if (mode) {\n            newOptions.mode = mode;\n        }\n        const request = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            address_id: this.getId(),\n            options: newOptions,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.stake.getStakingContext(request);\n        return {\n            stakeableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.stakeable_balance, assetId).amount,\n            unstakeableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.unstakeable_balance, assetId).amount,\n            pendingClaimableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.pending_claimable_balance, assetId).amount,\n            claimableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.claimable_balance, assetId).amount,\n        };\n    }\n}\nexports.Address = Address;\nAddress.MAX_HISTORICAL_BALANCE = 1000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExternalAddress = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst coinbase_1 = __webpack_require__(/*! ../coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ../asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst staking_operation_1 = __webpack_require__(/*! ../staking_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\");\n/**\n * A representation of a blockchain Address, which is a user-controlled account on a Network. Addresses are used to\n * send and receive Assets. An ExternalAddress is an Address that is not controlled by the developer, but is instead\n * controlled by the user.\n */\nclass ExternalAddress extends address_1.Address {\n    /**\n     * Builds a stake operation for the supplied asset. The stake operation\n     * may take a few minutes to complete in the case when infrastructure is spun up.\n     *\n     * @param amount - The amount of the asset to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `funding_address` (optional): Ethereum address for funding the stake operation. Defaults to the address initiating the stake operation.\n     *  - `withdrawal_address` (optional): Ethereum address for receiving rewards and withdrawal funds. Defaults to the address initiating the stake operation.\n     *  - `fee_recipient_address` (optional): Ethereum address for receiving transaction fees. Defaults to the address initiating the stake operation.\n     *\n     * @returns The stake operation.\n     */\n    async buildStakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanStake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"stake\", mode, options);\n    }\n    /**\n     * Builds an unstake operation for the supplied asset.\n     *\n     * @param amount - The amount of the asset to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the unstake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `immediate` (optional): Set this to \"true\" to unstake immediately i.e. leverage \"Coinbase managed unstake\" process . Defaults to \"false\" i.e. \"User managed unstake\" process.\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to unstake. Defaults to validators being picked up on your behalf corresponding to the unstake amount.\n     *\n     * @returns The unstake operation.\n     */\n    async buildUnstakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanUnstake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"unstake\", mode, options);\n    }\n    /**\n     * Builds a claim stake operation for the supplied asset.\n     *\n     * @param amount - The amount of the asset to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the claim stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * @returns The claim stake operation.\n     */\n    async buildClaimStakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanClaimStake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"claim_stake\", mode, options);\n    }\n    /**\n     * Builds the staking operation based on the supplied input.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param action - The specific action for the staking operation. e.g. stake, unstake, claim_stake\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options to build a stake operation.\n     * @private\n     * @returns The staking operation.\n     * @throws {Error} If the supplied input cannot build a valid staking operation.\n     */\n    async buildStakingOperation(amount, assetId, action, mode, options) {\n        const stakingAmount = new decimal_js_1.default(amount.toString());\n        if (stakingAmount.lessThanOrEqualTo(0)) {\n            throw new Error(`Amount required greater than zero.`);\n        }\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        const newOptions = this.copyOptions(options);\n        newOptions.mode = mode;\n        newOptions.amount = asset.toAtomicAmount(new decimal_js_1.default(amount.toString())).toString();\n        const request = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            address_id: this.getId(),\n            action: action,\n            options: newOptions,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.stake.buildStakingOperation(request);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n    /**\n     * Broadcast an external transaction\n     *\n     * @param signedPayload - The signed payload of the transaction to broadcast\n     * @returns The broadcasted transaction\n     */\n    async broadcastExternalTransaction(signedPayload) {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.broadcastExternalTransaction(this.getNetworkId(), this.getId(), {\n            signed_payload: signedPayload,\n        });\n        return {\n            transactionHash: response.data.transaction_hash,\n            transactionLink: response.data.transaction_link,\n        };\n    }\n}\nexports.ExternalAddress = ExternalAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletAddress = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst client_1 = __webpack_require__(/*! ../../client */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\");\nconst address_1 = __webpack_require__(/*! ../address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\");\nconst asset_1 = __webpack_require__(/*! ../asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst coinbase_1 = __webpack_require__(/*! ../coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst trade_1 = __webpack_require__(/*! ../trade */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\");\nconst transfer_1 = __webpack_require__(/*! ../transfer */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\");\nconst contract_invocation_1 = __webpack_require__(/*! ../contract_invocation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst wallet_1 = __webpack_require__(/*! ../wallet */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\");\nconst staking_operation_1 = __webpack_require__(/*! ../staking_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\");\nconst payload_signature_1 = __webpack_require__(/*! ../payload_signature */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\");\nconst smart_contract_1 = __webpack_require__(/*! ../smart_contract */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\");\nconst fund_operation_1 = __webpack_require__(/*! ../fund_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js\");\nconst fund_quote_1 = __webpack_require__(/*! ../fund_quote */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_quote.js\");\n/**\n * A representation of a blockchain address, which is a wallet-controlled account on a network.\n */\nclass WalletAddress extends address_1.Address {\n    /**\n     * Initializes a new Wallet Address instance.\n     *\n     * @param model - The address model data.\n     * @param key - The ethers.js SigningKey the Address uses to sign data.\n     * @throws {Error} If the address model is empty.\n     */\n    constructor(model, key) {\n        if (!model) {\n            throw new Error(\"Address model cannot be empty\");\n        }\n        super(model.network_id, model.address_id);\n        this.model = model;\n        this.key = key;\n    }\n    /**\n     * Returns a string representation of the wallet address.\n     *\n     * @returns A string representing the wallet address.\n     */\n    toString() {\n        return `WalletAddress{ addressId: '${this.getId()}', networkId: '${this.getNetworkId()}', walletId: '${this.getWalletId()}' }`;\n    }\n    /**\n     * Returns the wallet ID.\n     *\n     * @returns The wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Sets the private key.\n     *\n     * @param key - The ethers.js SigningKey the Address uses to sign data.\n     * @throws {Error} If the private key is already set.\n     */\n    setKey(key) {\n        if (this.key !== undefined) {\n            throw new Error(\"Private key is already set\");\n        }\n        this.key = key;\n    }\n    /**\n     * Exports the Address's private key to a hex string.\n     *\n     * @returns The Address's private key as a hex string.\n     */\n    export() {\n        if (this.key === undefined) {\n            throw new Error(\"Private key is not set\");\n        }\n        return this.key.privateKey;\n    }\n    /**\n     * Returns whether the Address has a private key backing it to sign transactions.\n     *\n     * @returns Whether the Address has a private key backing it to sign transactions.\n     */\n    canSign() {\n        return !!this.key;\n    }\n    /**\n     * Returns all the trades associated with the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Trades to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Trades. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of trades.\n     */\n    async listTrades({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.trade.listTrades(this.model.wallet_id, this.model.address_id, limit, page);\n        response.data.data.forEach(tradeModel => {\n            data.push(new trade_1.Trade(tradeModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns all the transfers associated with the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Transfers to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Transfers. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of transfers.\n     */\n    async listTransfers({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.transfer.listTransfers(this.model.wallet_id, this.model.address_id, limit, page);\n        response.data.data.forEach(transferModel => {\n            data.push(transfer_1.Transfer.fromModel(transferModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Transfers the given amount of the given Asset to the given address.\n     * Only same-Network Transfers are supported.\n     * This returns a `Transfer` object that has been signed and broadcasted, you\n     * can wait for this to land on-chain (or fail) by calling `transfer.wait()`.\n     *\n     * @param options - The options to create the Transfer.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.assetId - The ID of the Asset to send. For Ether, Coinbase.assets.Eth, Coinbase.assets.Gwei, and Coinbase.assets.Wei supported.\n     * @param options.destination - The destination of the transfer. If a Wallet, sends to the Wallet's default address. If a String, interprets it as the address ID.\n     * @param options.gasless - Whether the Transfer should be gasless. Defaults to false.\n     * @param options.skipBatching - When true, the Transfer will be submitted immediately. Otherwise, the Transfer will be batched. Defaults to false. Note: requires gasless option to be set to true.\n     * @returns The transfer object.\n     * @throws {APIError} if the API request to create a Transfer fails.\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async createTransfer({ amount, assetId, destination, gasless = false, skipBatching = false, }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot transfer from address without private key loaded\");\n        }\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        const [destinationAddress, destinationNetworkId] = await this.getDestinationAddressAndNetwork(destination);\n        const normalizedAmount = new decimal_js_1.Decimal(amount.toString());\n        const currentBalance = await this.getBalance(assetId);\n        if (currentBalance.lessThan(normalizedAmount)) {\n            throw new errors_1.ArgumentError(`Insufficient funds: ${normalizedAmount} requested, but only ${currentBalance} available`);\n        }\n        if (skipBatching && !gasless) {\n            throw new errors_1.ArgumentError(\"skipBatching requires gasless to be true\");\n        }\n        const createTransferRequest = {\n            amount: asset.toAtomicAmount(normalizedAmount).toString(),\n            network_id: destinationNetworkId,\n            asset_id: asset.primaryDenomination(),\n            destination: destinationAddress,\n            gasless: gasless,\n            skip_batching: skipBatching,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.transfer.createTransfer(this.getWalletId(), this.getId(), createTransferRequest);\n        const transfer = transfer_1.Transfer.fromModel(response.data);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return transfer;\n        }\n        await transfer.sign(this.getSigner());\n        await transfer.broadcast();\n        return transfer;\n    }\n    /**\n     * Gets a signer for the private key.\n     *\n     * @returns The signer for the private key.\n     * @throws {Error} If the private key is not loaded.\n     */\n    getSigner() {\n        if (!this.key) {\n            throw new Error(\"Cannot sign without a private key\");\n        }\n        return new ethers_1.ethers.Wallet(this.key.privateKey);\n    }\n    /**\n     * Trades the given amount of the given Asset for another Asset. Only same-network Trades are supported.\n     *\n     * @param options - The options to create the Trade.\n     * @param options.amount - The amount of the From Asset to send.\n     * @param options.fromAssetId - The ID of the Asset to trade from.\n     * @param options.toAssetId - The ID of the Asset to trade to.\n     * @returns The Trade object.\n     * @throws {APIError} if the API request to create or broadcast a Trade fails.\n     * @throws {Error} if the Trade times out.\n     */\n    async createTrade({ amount, fromAssetId, toAssetId }) {\n        const fromAsset = await asset_1.Asset.fetch(this.getNetworkId(), fromAssetId);\n        const toAsset = await asset_1.Asset.fetch(this.getNetworkId(), toAssetId);\n        await this.validateCanTrade(amount, fromAssetId);\n        const trade = await this.createTradeRequest(amount, fromAsset, toAsset);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return trade;\n        }\n        await trade.sign(this.getSigner());\n        await trade.broadcast();\n        return trade;\n    }\n    /**\n     * Invokes a contract with the given data.\n     *\n     * @param options - The options to invoke the contract\n     * @param options.contractAddress - The address of the contract the method will be invoked on.\n     * @param options.method - The method to invoke on the contract.\n     * @param options.abi - The ABI of the contract.\n     * @param options.args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param options.amount - The amount of the asset to send to a payable contract method.\n     * @param options.assetId - The ID of the asset to send to a payable contract method.\n     *   The asset must be a denomination of the native asset. (Ex. \"wei\", \"gwei\", or \"eth\").\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     * @throws {Error} if the address cannot sign.\n     * @throws {ArgumentError} if the address does not have sufficient balance.\n     */\n    async invokeContract({ contractAddress, method, abi, args, amount, assetId, }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot invoke contract from address without private key loaded\");\n        }\n        if (amount && !assetId) {\n            throw new errors_1.ArgumentError(\"Asset ID is required for contract ivocation if an amount is provided\");\n        }\n        let atomicAmount;\n        if (assetId && amount) {\n            const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n            const normalizedAmount = new decimal_js_1.Decimal(amount.toString());\n            const currentBalance = await this.getBalance(assetId);\n            if (currentBalance.lessThan(normalizedAmount)) {\n                throw new errors_1.ArgumentError(`Insufficient funds: ${normalizedAmount} requested, but only ${currentBalance} available`);\n            }\n            atomicAmount = asset.toAtomicAmount(normalizedAmount).toString();\n        }\n        const contractInvocation = await this.createContractInvocation(contractAddress, method, abi, args, atomicAmount);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return contractInvocation;\n        }\n        await contractInvocation.sign(this.getSigner());\n        await contractInvocation.broadcast();\n        return contractInvocation;\n    }\n    /**\n     * Deploys an ERC20 token contract.\n     *\n     * @param options - The options for creating the ERC20 token.\n     * @param options.name - The name of the ERC20 token.\n     * @param options.symbol - The symbol of the ERC20 token.\n     * @param options.totalSupply - The total supply of the ERC20 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployToken({ name, symbol, totalSupply, }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC20 without private key loaded\");\n        }\n        const smartContract = await this.createERC20({ name, symbol, totalSupply });\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Deploys an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployNFT({ name, symbol, baseURI }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC721 without private key loaded\");\n        }\n        const smartContract = await this.createERC721({ name, symbol, baseURI });\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Deploys an ERC1155 multi-token contract.\n     *\n     * @param options - The options for creating the ERC1155 token.\n     * @param options.uri - The URI for all token metadata.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployMultiToken({ uri }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC1155 without private key loaded\");\n        }\n        const smartContract = await this.createERC1155({ uri });\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Deploys a custom contract.\n     *\n     * @param options - The options for creating the custom contract.\n     * @param options.solidityVersion - The version of the solidity compiler, must be 0.8.+, such as \"0.8.28+commit.7893614a\". See https://binaries.soliditylang.org/bin/list.json\n     * @param options.solidityInputJson - The input json for the solidity compiler. See https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description for more details.\n     * @param options.contractName - The name of the contract class to be deployed.\n     * @param options.constructorArgs - The arguments for the constructor.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployContract({ solidityVersion, solidityInputJson, contractName, constructorArgs, }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy custom contract without private key loaded\");\n        }\n        const smartContract = await this.createCustomContract({\n            solidityVersion,\n            solidityInputJson,\n            contractName,\n            constructorArgs,\n        });\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Creates an ERC20 token contract.\n     *\n     * @private\n     * @param {CreateERC20Options} options - The options for creating the ERC20 token.\n     * @param {string} options.name - The name of the ERC20 token.\n     * @param {string} options.symbol - The symbol of the ERC20 token.\n     * @param {BigNumber} options.totalSupply - The total supply of the ERC20 token.\n     * @returns {Promise<SmartContract>} A Promise that resolves to the created SmartContract.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async createERC20({ name, symbol, totalSupply, }) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc20,\n            options: {\n                name,\n                symbol,\n                total_supply: totalSupply.toString(),\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the private key is not loaded when not using server signer.\n     */\n    async createERC721({ name, symbol, baseURI, }) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc721,\n            options: {\n                name,\n                symbol,\n                base_uri: baseURI,\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates an ERC1155 multi-token contract.\n     *\n     * @private\n     * @param {CreateERC1155Options} options - The options for creating the ERC1155 token.\n     * @param {string} options.uri - The URI for all token metadata.\n     * @returns {Promise<SmartContract>} A Promise that resolves to the created SmartContract.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async createERC1155({ uri }) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc1155,\n            options: {\n                uri,\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates a custom contract.\n     *\n     * @private\n     * @param {CreateCustomContractOptions} options - The options for creating the custom contract.\n     * @param {string} options.solidityVersion - The version of the solidity compiler, must be 0.8.+, such as \"0.8.28+commit.7893614a\". See https://binaries.soliditylang.org/bin/list.json\n     * @param {string} options.solidityInputJson - The input json for the solidity compiler. See https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description for more details.\n     * @param {string} options.contractName - The name of the contract class.\n     * @param {Record<string, any>} options.constructorArgs - The arguments for the constructor.\n     * @returns {Promise<SmartContract>} A Promise that resolves to the created SmartContract.\n     * @throws {APIError} If the API request to compile or subsequently create a smart contract fails.\n     */\n    async createCustomContract({ solidityVersion, solidityInputJson, contractName, constructorArgs, }) {\n        const compileContractResp = await coinbase_1.Coinbase.apiClients.smartContract.compileSmartContract({\n            solidity_compiler_version: solidityVersion,\n            solidity_input_json: solidityInputJson,\n            contract_name: contractName,\n        });\n        const compiledContract = compileContractResp.data;\n        const compiledContractId = compiledContract.compiled_smart_contract_id;\n        const createContractResp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Custom,\n            options: JSON.stringify(constructorArgs),\n            compiled_smart_contract_id: compiledContractId,\n        });\n        return smart_contract_1.SmartContract.fromModel(createContractResp?.data);\n    }\n    /**\n     * Creates a contract invocation with the given data.\n     *\n     * @param contractAddress - The address of the contract the method will be invoked on.\n     * @param method - The method to invoke on the contract.\n     * @param abi - The ABI of the contract.\n     * @param args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param atomicAmount - The atomic amount of the native asset to send to a payable contract method.\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     */\n    async createContractInvocation(contractAddress, method, abi, args, atomicAmount) {\n        const resp = await coinbase_1.Coinbase.apiClients.contractInvocation.createContractInvocation(this.getWalletId(), this.getId(), {\n            method: method,\n            abi: JSON.stringify(abi),\n            contract_address: contractAddress,\n            args: JSON.stringify(args),\n            amount: atomicAmount,\n        });\n        return contract_invocation_1.ContractInvocation.fromModel(resp?.data);\n    }\n    /**\n     * Creates a staking operation to stake.\n     *\n     * @param amount - The amount to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `funding_address` (optional): Ethereum address for funding the stake operation. Defaults to the address initiating the stake operation.\n     *  - `withdrawal_address` (optional): Ethereum address for receiving rewards and withdrawal funds. Defaults to the address initiating the stake operation.\n     *  - `fee_recipient_address` (optional): Ethereum address for receiving transaction fees. Defaults to the address initiating the stake operation.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanStake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"stake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to unstake.\n     *\n     * @param amount - The amount to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the unstake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `immediate` (optional): Set this to \"true\" to unstake immediately i.e. leverage \"Coinbase managed unstake\" process . Defaults to \"false\" i.e. \"User managed unstake\" process.\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to unstake. Defaults to validators being picked up on your behalf corresponding to the unstake amount.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createUnstake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanUnstake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"unstake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to claim stake.\n     *\n     * @param amount - The amount to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the claim stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createClaimStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanClaimStake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"claim_stake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a Payload Signature.\n     *\n     * @param unsignedPayload - The Unsigned Payload to sign.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to create a Payload Signature fails.\n     * @throws {Error} if the address does not have a private key loaded or an associated Server-Signer.\n     */\n    async createPayloadSignature(unsignedPayload) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot sign payload with address without private key loaded\");\n        }\n        let signature = undefined;\n        if (!coinbase_1.Coinbase.useServerSigner) {\n            signature = this.key.signingKey.sign(unsignedPayload).serialized;\n        }\n        const createPayloadSignatureRequest = {\n            unsigned_payload: unsignedPayload,\n            signature,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.address.createPayloadSignature(this.getWalletId(), this.getId(), createPayloadSignatureRequest);\n        const payloadSignature = new payload_signature_1.PayloadSignature(response.data);\n        return payloadSignature;\n    }\n    /**\n     * Gets a Payload Signature.\n     *\n     * @param payloadSignatureId - The ID of the Payload Signature to fetch.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to get the Payload Signature fails.\n     */\n    async getPayloadSignature(payloadSignatureId) {\n        const response = await coinbase_1.Coinbase.apiClients.address.getPayloadSignature(this.getWalletId(), this.getId(), payloadSignatureId);\n        const payloadSignature = new payload_signature_1.PayloadSignature(response.data);\n        return payloadSignature;\n    }\n    /**\n     * Lists all the Payload Signatures associated with the Address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Payload Signatures to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Payload Signatures. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns A promise that resolves to the paginated list response of Payload Signatures.\n     * @throws {APIError} if the API request to list the Payload Signatures fails.\n     */\n    async listPayloadSignatures({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.address.listPayloadSignatures(this.model.wallet_id, this.model.address_id, 100, page?.length ? page : undefined);\n        response.data.data.forEach(payloadSignatureModel => {\n            data.push(new payload_signature_1.PayloadSignature(payloadSignatureModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Fund the address from your account on the Coinbase Platform.\n     *\n     * @param options - The options to create the fund operation\n     * @param options.amount - The amount of the Asset to fund the wallet with\n     * @param options.assetId - The ID of the Asset to fund with. For Ether, eth, gwei, and wei are supported.\n     * @returns The created fund operation object\n     */\n    async fund({ amount, assetId }) {\n        const normalizedAmount = new decimal_js_1.Decimal(amount.toString());\n        return fund_operation_1.FundOperation.create(this.getWalletId(), this.getId(), normalizedAmount, assetId, this.getNetworkId());\n    }\n    /**\n     * Get a quote for funding the address from your Coinbase platform account.\n     *\n     * @param options - The options to create the fund quote\n     * @param options.amount - The amount to fund\n     * @param options.assetId - The ID of the Asset to fund with. For Ether, eth, gwei, and wei are supported.\n     * @returns The fund quote object\n     */\n    async quoteFund({ amount, assetId }) {\n        const normalizedAmount = new decimal_js_1.Decimal(amount.toString());\n        return fund_quote_1.FundQuote.create(this.getWalletId(), this.getId(), normalizedAmount, assetId, this.getNetworkId());\n    }\n    /**\n     * Returns all the fund operations associated with the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Fund Operations to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Fund Operations. Don't include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of fund operations.\n     */\n    async listFundOperations({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        return fund_operation_1.FundOperation.listFundOperations(this.model.wallet_id, this.model.address_id, {\n            limit,\n            page,\n        });\n    }\n    /**\n     * Returns the address and network ID of the given destination.\n     *\n     * @param destination - The destination to get the address and network ID of.\n     * @returns The address and network ID of the destination.\n     */\n    async getDestinationAddressAndNetwork(destination) {\n        if (typeof destination !== \"string\" && destination.getNetworkId() !== this.getNetworkId()) {\n            throw new errors_1.ArgumentError(\"Transfer must be on the same Network\");\n        }\n        if (destination instanceof wallet_1.Wallet) {\n            return [(await destination.getDefaultAddress()).getId(), destination.getNetworkId()];\n        }\n        if (destination instanceof address_1.Address) {\n            return [destination.getId(), destination.getNetworkId()];\n        }\n        return [destination, this.getNetworkId()];\n    }\n    /**\n     * Creates a trade model for the specified amount and assets.\n     *\n     * @param amount - The amount of the Asset to send.\n     * @param fromAsset - The Asset to trade from.\n     * @param toAsset - The Asset to trade to.\n     * @returns A promise that resolves to a Trade object representing the new trade.\n     */\n    async createTradeRequest(amount, fromAsset, toAsset) {\n        const tradeRequestPayload = {\n            amount: fromAsset.toAtomicAmount(new decimal_js_1.Decimal(amount.toString())).toString(),\n            from_asset_id: fromAsset.primaryDenomination(),\n            to_asset_id: toAsset.primaryDenomination(),\n        };\n        const tradeModel = await coinbase_1.Coinbase.apiClients.trade.createTrade(this.getWalletId(), this.getId(), tradeRequestPayload);\n        return new trade_1.Trade(tradeModel?.data);\n    }\n    /**\n     * Checks if trading is possible and raises an error if not.\n     *\n     * @param amount - The amount of the Asset to send.\n     * @param fromAssetId - The ID of the Asset to trade from. For Ether, eth, gwei, and wei are supported.\n     * @throws {Error} If the private key is not loaded, or if the asset IDs are unsupported, or if there are insufficient funds.\n     */\n    async validateCanTrade(amount, fromAssetId) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot trade from address without private key loaded\");\n        }\n        const currentBalance = await this.getBalance(fromAssetId);\n        amount = new decimal_js_1.Decimal(amount.toString());\n        if (currentBalance.lessThan(amount)) {\n            throw new Error(`Insufficient funds: ${amount} requested, but only ${currentBalance} available`);\n        }\n    }\n    /**\n     * Creates a staking operation to stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset to the staking operation.\n     * @param action - The type of staking action to perform.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {APIError} if the API request to create or broadcast staking operation fails.\n     * @throws {Error} if the amount is less than zero.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createStakingOperation(amount, assetId, action, mode, options, timeoutSeconds, intervalSeconds) {\n        if (new decimal_js_1.Decimal(amount.toString()).lessThanOrEqualTo(0)) {\n            throw new Error(\"Amount required greater than zero.\");\n        }\n        let stakingOperation = await this.createStakingOperationRequest(amount, assetId, action, mode, options);\n        const startTime = Date.now();\n        // Loop until the timeout is reached.\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            // Loop through any unsigned transactions that are available, sign and broadcast them.\n            for (let i = 0; i < stakingOperation.getTransactions().length; i++) {\n                const transaction = stakingOperation.getTransactions()[i];\n                if (!transaction.isSigned()) {\n                    await transaction.sign(this.key);\n                    stakingOperation = await this.broadcastStakingOperationRequest(stakingOperation.getID(), transaction.getSignedPayload().slice(2), i);\n                }\n            }\n            await stakingOperation.reload();\n            if (stakingOperation.isTerminalState()) {\n                return stakingOperation;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Staking Operation timed out\");\n    }\n    /**\n     * A helper function that creates the staking operation.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param action - The type of staking action to perform.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @private\n     * @throws {APIError} if the API request to create staking operation fails.\n     * @returns The created staking operation.\n     */\n    async createStakingOperationRequest(amount, assetId, action, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        options.amount = asset.toAtomicAmount(new decimal_js_1.Decimal(amount.toString())).toString();\n        options.mode = mode ? mode : types_1.StakeOptionsMode.DEFAULT;\n        const stakingOperationRequest = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            action: action,\n            options: options,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.walletStake.createStakingOperation(this.getWalletId(), this.getId(), stakingOperationRequest);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n    /**\n     * A helper function that broadcasts the signed payload.\n     *\n     * @param stakingOperationID - The staking operation id related to the signed payload.\n     * @param signedPayload - The payload that's being broadcasted.\n     * @param transactionIndex - The index of the transaction in the array from the staking operation.\n     * @private\n     * @returns An updated staking operation with the broadcasted transaction.\n     */\n    async broadcastStakingOperationRequest(stakingOperationID, signedPayload, transactionIndex) {\n        const broadcastStakingOperationRequest = {\n            signed_payload: signedPayload,\n            transaction_index: transactionIndex,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.walletStake.broadcastStakingOperation(this.getWalletId(), this.getId(), stakingOperationID, broadcastStakingOperationRequest);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n}\nexports.WalletAddress = WalletAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address_reputation.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address_reputation.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AddressReputation = void 0;\n/**\n * A representation of the reputation of a blockchain address.\n */\nclass AddressReputation {\n    /**\n     * A representation of the reputation of a blockchain address.\n     *\n     * @param {AddressReputationModel} model - The reputation model instance.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Address reputation model cannot be empty\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the address ID.\n     *\n     * @returns {string} The address ID.\n     */\n    get risky() {\n        return this.model.score < 0;\n    }\n    /**\n     * Returns the score of the address.\n     * The score is a number between -100 and 100.\n     *\n     * @returns {number} The score of the address.\n     */\n    get score() {\n        return this.model.score;\n    }\n    /**\n     * Returns the metadata of the address reputation.\n     * The metadata contains additional information about the address reputation.\n     *\n     * @returns {AddressReputationMetadata} The metadata of the address reputation.\n     */\n    get metadata() {\n        return this.model.metadata;\n    }\n    /**\n     * Returns the address ID.\n     *\n     * @returns {string} The address ID.\n     */\n    toString() {\n        const metadata = Object.entries(this.model.metadata).map(([key, value]) => {\n            return `${key}: ${value}`;\n        });\n        return `AddressReputation(score: ${this.score}, metadata: {${metadata.join(\", \")}})`;\n    }\n}\nexports.AddressReputation = AddressReputation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2FkZHJlc3NfcmVwdXRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdCQUF3QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJCQUEyQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixJQUFJLElBQUksTUFBTTtBQUNwQyxTQUFTO0FBQ1QsMkNBQTJDLFdBQVcsYUFBYSxFQUFFLHFCQUFxQjtBQUMxRjtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9hZGRyZXNzX3JlcHV0YXRpb24uanM/NGVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRkcmVzc1JlcHV0YXRpb24gPSB2b2lkIDA7XG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlcHV0YXRpb24gb2YgYSBibG9ja2NoYWluIGFkZHJlc3MuXG4gKi9cbmNsYXNzIEFkZHJlc3NSZXB1dGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXB1dGF0aW9uIG9mIGEgYmxvY2tjaGFpbiBhZGRyZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBZGRyZXNzUmVwdXRhdGlvbk1vZGVsfSBtb2RlbCAtIFRoZSByZXB1dGF0aW9uIG1vZGVsIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGVsKSB7XG4gICAgICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFkZHJlc3MgcmVwdXRhdGlvbiBtb2RlbCBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIElELlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGFkZHJlc3MgSUQuXG4gICAgICovXG4gICAgZ2V0IHJpc2t5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zY29yZSA8IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNjb3JlIG9mIHRoZSBhZGRyZXNzLlxuICAgICAqIFRoZSBzY29yZSBpcyBhIG51bWJlciBiZXR3ZWVuIC0xMDAgYW5kIDEwMC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzY29yZSBvZiB0aGUgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBnZXQgc2NvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnNjb3JlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZXRhZGF0YSBvZiB0aGUgYWRkcmVzcyByZXB1dGF0aW9uLlxuICAgICAqIFRoZSBtZXRhZGF0YSBjb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhZGRyZXNzIHJlcHV0YXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7QWRkcmVzc1JlcHV0YXRpb25NZXRhZGF0YX0gVGhlIG1ldGFkYXRhIG9mIHRoZSBhZGRyZXNzIHJlcHV0YXRpb24uXG4gICAgICovXG4gICAgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5tZXRhZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBJRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBhZGRyZXNzIElELlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IE9iamVjdC5lbnRyaWVzKHRoaXMubW9kZWwubWV0YWRhdGEpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYCR7a2V5fTogJHt2YWx1ZX1gO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGBBZGRyZXNzUmVwdXRhdGlvbihzY29yZTogJHt0aGlzLnNjb3JlfSwgbWV0YWRhdGE6IHske21ldGFkYXRhLmpvaW4oXCIsIFwiKX19KWA7XG4gICAgfVxufVxuZXhwb3J0cy5BZGRyZXNzUmVwdXRhdGlvbiA9IEFkZHJlc3NSZXB1dGF0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address_reputation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetworkFeatureUnsupportedError = exports.InvalidTransferStatusError = exports.InvalidSignedPayloadError = exports.FaucetLimitReachedError = exports.ResourceExhaustedError = exports.InvalidNetworkIDError = exports.InvalidDestinationError = exports.InvalidAssetIDError = exports.UnsupportedAssetError = exports.MalformedRequestError = exports.AlreadyExistsError = exports.InvalidLimitError = exports.InvalidPageError = exports.InvalidTransferIDError = exports.InvalidAmountError = exports.InvalidAddressError = exports.InvalidWalletError = exports.InvalidAddressIDError = exports.InvalidWalletIDError = exports.NotFoundError = exports.UnauthorizedError = exports.UnimplementedError = exports.InternalError = exports.APIError = void 0;\n/* eslint-disable jsdoc/require-jsdoc */\nconst axios_1 = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n/**\n * A wrapper for API errors to provide more context.\n */\nclass APIError extends axios_1.AxiosError {\n    /**\n     * Initializes a new APIError object.\n     *\n     * @class\n     * @param {AxiosError} error - The Axios error.\n     */\n    constructor(error) {\n        super();\n        this.name = this.constructor.name;\n        this.httpCode = error.response ? error.response.status : null;\n        this.apiCode = null;\n        this.apiMessage = null;\n        this.correlationId = null;\n        if (error.response && error.response.data) {\n            const body = error.response.data;\n            this.apiCode = body.code;\n            this.apiMessage = body.message;\n            this.correlationId = body.correlation_id;\n        }\n    }\n    /**\n     * Creates a specific APIError based on the API error code.\n     *\n     * @param {AxiosError} error - The underlying error object.\n     * @returns {APIError} A specific APIError instance.\n     */\n    static fromError(error) {\n        const apiError = new APIError(error);\n        if (!error.response || !error.response.data) {\n            return apiError;\n        }\n        const body = error?.response?.data;\n        switch (body?.code) {\n            case \"unimplemented\":\n                return new UnimplementedError(error);\n            case \"unauthorized\":\n                return new UnauthorizedError(error);\n            case \"internal\":\n                return new InternalError(error);\n            case \"not_found\":\n                return new NotFoundError(error);\n            case \"invalid_wallet_id\":\n                return new InvalidWalletIDError(error);\n            case \"invalid_address_id\":\n                return new InvalidAddressIDError(error);\n            case \"invalid_wallet\":\n                return new InvalidWalletError(error);\n            case \"invalid_address\":\n                return new InvalidAddressError(error);\n            case \"invalid_amount\":\n                return new InvalidAmountError(error);\n            case \"invalid_transfer_id\":\n                return new InvalidTransferIDError(error);\n            case \"invalid_page_token\":\n                return new InvalidPageError(error);\n            case \"invalid_page_limit\":\n                return new InvalidLimitError(error);\n            case \"already_exists\":\n                return new AlreadyExistsError(error);\n            case \"malformed_request\":\n                return new MalformedRequestError(error);\n            case \"unsupported_asset\":\n                return new UnsupportedAssetError(error);\n            case \"invalid_asset_id\":\n                return new InvalidAssetIDError(error);\n            case \"invalid_destination\":\n                return new InvalidDestinationError(error);\n            case \"invalid_network_id\":\n                return new InvalidNetworkIDError(error);\n            case \"resource_exhausted\":\n                return new ResourceExhaustedError(error);\n            case \"faucet_limit_reached\":\n                return new FaucetLimitReachedError(error);\n            case \"invalid_signed_payload\":\n                return new InvalidSignedPayloadError(error);\n            case \"invalid_transfer_status\":\n                return new InvalidTransferStatusError(error);\n            case \"network_feature_unsupported\":\n                return new NetworkFeatureUnsupportedError(error);\n            default:\n                return apiError;\n        }\n    }\n    /**\n     * Returns a String representation of the APIError.\n     *\n     * @returns {string} a String representation of the APIError\n     */\n    toString() {\n        const payload = {};\n        if (this.httpCode)\n            payload.httpCode = this.httpCode;\n        if (this.apiCode)\n            payload.apiCode = this.apiCode;\n        if (this.apiMessage)\n            payload.apiMessage = this.apiMessage;\n        if (this.correlationId)\n            payload.correlationId = this.correlationId;\n        return `${this.name}{${Object.entries(payload)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(\", \")}}`;\n    }\n}\nexports.APIError = APIError;\nclass InternalError extends APIError {\n}\nexports.InternalError = InternalError;\nclass UnimplementedError extends APIError {\n}\nexports.UnimplementedError = UnimplementedError;\nclass UnauthorizedError extends APIError {\n}\nexports.UnauthorizedError = UnauthorizedError;\nclass NotFoundError extends APIError {\n}\nexports.NotFoundError = NotFoundError;\nclass InvalidWalletIDError extends APIError {\n}\nexports.InvalidWalletIDError = InvalidWalletIDError;\nclass InvalidAddressIDError extends APIError {\n}\nexports.InvalidAddressIDError = InvalidAddressIDError;\nclass InvalidWalletError extends APIError {\n}\nexports.InvalidWalletError = InvalidWalletError;\nclass InvalidAddressError extends APIError {\n}\nexports.InvalidAddressError = InvalidAddressError;\nclass InvalidAmountError extends APIError {\n}\nexports.InvalidAmountError = InvalidAmountError;\nclass InvalidTransferIDError extends APIError {\n}\nexports.InvalidTransferIDError = InvalidTransferIDError;\nclass InvalidPageError extends APIError {\n}\nexports.InvalidPageError = InvalidPageError;\nclass InvalidLimitError extends APIError {\n}\nexports.InvalidLimitError = InvalidLimitError;\nclass AlreadyExistsError extends APIError {\n}\nexports.AlreadyExistsError = AlreadyExistsError;\nclass MalformedRequestError extends APIError {\n}\nexports.MalformedRequestError = MalformedRequestError;\nclass UnsupportedAssetError extends APIError {\n}\nexports.UnsupportedAssetError = UnsupportedAssetError;\nclass InvalidAssetIDError extends APIError {\n}\nexports.InvalidAssetIDError = InvalidAssetIDError;\nclass InvalidDestinationError extends APIError {\n}\nexports.InvalidDestinationError = InvalidDestinationError;\nclass InvalidNetworkIDError extends APIError {\n}\nexports.InvalidNetworkIDError = InvalidNetworkIDError;\nclass ResourceExhaustedError extends APIError {\n}\nexports.ResourceExhaustedError = ResourceExhaustedError;\nclass FaucetLimitReachedError extends APIError {\n}\nexports.FaucetLimitReachedError = FaucetLimitReachedError;\nclass InvalidSignedPayloadError extends APIError {\n}\nexports.InvalidSignedPayloadError = InvalidSignedPayloadError;\nclass InvalidTransferStatusError extends APIError {\n}\nexports.InvalidTransferStatusError = InvalidTransferStatusError;\nclass NetworkFeatureUnsupportedError extends APIError {\n}\nexports.NetworkFeatureUnsupportedError = NetworkFeatureUnsupportedError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Asset = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/** A representation of an Asset. */\nclass Asset {\n    /**\n     * Private constructor for the Asset class.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param contractAddress - The address ID.\n     * @param decimals - The number of decimals.\n     */\n    constructor(networkId, assetId, contractAddress, decimals) {\n        this.networkId = networkId;\n        this.assetId = assetId;\n        this.contractAddress = contractAddress;\n        this.decimals = decimals;\n    }\n    /**\n     * Creates an Asset from an Asset Model.\n     *\n     * @param model - The Asset Model.\n     * @param assetId - The Asset ID.\n     * @throws If the Asset Model is invalid.\n     * @returns The Asset Class.\n     */\n    static fromModel(model, assetId) {\n        if (!model) {\n            throw new Error(\"Invalid asset model\");\n        }\n        let decimals = model.decimals;\n        // TODO: Push this logic down to the backend.\n        if (assetId && model.asset_id) {\n            const normalizedModelAssetId = model.asset_id.toLowerCase();\n            const normalizedAssetId = assetId.toLowerCase();\n            if (coinbase_1.Coinbase.toAssetId(normalizedModelAssetId) !== coinbase_1.Coinbase.toAssetId(normalizedAssetId)) {\n                switch (normalizedAssetId) {\n                    case \"gwei\":\n                        decimals = constants_1.GWEI_DECIMALS;\n                        break;\n                    case \"wei\":\n                        decimals = 0;\n                        break;\n                    case \"eth\":\n                        break;\n                    default:\n                        throw new errors_1.ArgumentError(`Invalid asset ID: ${assetId}`);\n                }\n            }\n        }\n        return new Asset(model.network_id, assetId ?? model.asset_id, model.contract_address, decimals);\n    }\n    /**\n     * Fetches the Asset with the provided Asset ID.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @throws If the Asset cannot be fetched.\n     * @returns The Asset Class.\n     */\n    static async fetch(networkId, assetId) {\n        const asset = await coinbase_1.Coinbase.apiClients.asset.getAsset(coinbase_1.Coinbase.normalizeNetwork(networkId), Asset.primaryDenomination(assetId));\n        return Asset.fromModel(asset?.data, assetId);\n    }\n    /**\n     * Returns the primary denomination for the provided Asset ID.\n     * For `gwei` and `wei` the primary denomination is `eth`.\n     * For all other assets, the primary denomination is the same asset ID.\n     *\n     * @param assetId - The Asset ID.\n     * @returns The primary denomination for the Asset ID.\n     */\n    static primaryDenomination(assetId) {\n        return [coinbase_1.Coinbase.assets.Gwei, coinbase_1.Coinbase.assets.Wei].includes(assetId)\n            ? coinbase_1.Coinbase.assets.Eth\n            : assetId;\n    }\n    /**\n     * Returns the primary denomination for the Asset.\n     *\n     * @returns The primary denomination for the Asset.\n     */\n    primaryDenomination() {\n        return Asset.primaryDenomination(this.assetId);\n    }\n    /**\n     * Converts the amount of the Asset from whole to atomic units.\n     *\n     * @param wholeAmount - The whole amount to convert to atomic units.\n     * @returns The amount in atomic units\n     */\n    toAtomicAmount(wholeAmount) {\n        const atomicAmount = wholeAmount.times(new decimal_js_1.default(10).pow(this.decimals));\n        return BigInt(atomicAmount.toFixed());\n    }\n    /**\n     * Converts the amount of the Asset from atomic to whole units.\n     *\n     * @param atomicAmount - The atomic amount to convert to whole units.\n     * @returns The amount in atomic units\n     */\n    fromAtomicAmount(atomicAmount) {\n        return atomicAmount.dividedBy(new decimal_js_1.default(10).pow(this.decimals));\n    }\n    /**\n     * Returns a string representation of the Asset.\n     *\n     * @returns a string representation of the Asset\n     */\n    toString() {\n        return `Asset{ networkId: ${this.networkId}, assetId: ${this.assetId}, contractAddress: ${this.contractAddress}, decimals: ${this.decimals} }`;\n    }\n    /**\n     * Returns the Asset ID.\n     *\n     * @returns The Asset ID.\n     */\n    getAssetId() {\n        return this.assetId;\n    }\n}\nexports.Asset = Asset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CoinbaseAuthenticator = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst jose_1 = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/cjs/index.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst package_json_1 = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/package.json\");\nconst pemFooter = \"-----END EC PRIVATE KEY-----\";\n/**\n * A class that builds JWTs for authenticating with the Coinbase Platform APIs.\n */\nclass CoinbaseAuthenticator {\n    /**\n     * Initializes the Authenticator.\n     *\n     * @param {string} apiKey - The API key name.\n     * @param {string} privateKey - The private key associated with the API key.\n     * @param {string} source - The source of the request.\n     * @param {string} [sourceVersion] - The version of the source.\n     */\n    constructor(apiKey, privateKey, source, sourceVersion) {\n        this.apiKey = apiKey;\n        this.privateKey = privateKey;\n        this.source = source;\n        this.sourceVersion = sourceVersion;\n    }\n    /**\n     * Middleware to intercept requests and add JWT to the Authorization header.\n     *\n     * @param {InternalAxiosRequestConfig} config - The request configuration.\n     * @param {boolean} [debugging] - Flag to enable debugging.\n     * @returns {Promise<InternalAxiosRequestConfig>} The modified request configuration with the Authorization header added.\n     * @throws {InvalidAPIKeyFormatError} If JWT could not be built.\n     */\n    async authenticateRequest(config, debugging = false) {\n        const method = config.method?.toString().toUpperCase();\n        const token = await this.buildJWT(config.url || \"\", method);\n        if (debugging) {\n            console.log(`API REQUEST: ${method} ${config.url}`);\n        }\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n        config.headers[\"Content-Type\"] = \"application/json\";\n        config.headers[\"Correlation-Context\"] = this.getCorrelationData();\n        return config;\n    }\n    /**\n     * Builds the JWT for the given API endpoint URL.\n     *\n     * @param {string} url - URL of the API endpoint.\n     * @param {string} [method] - HTTP method of the request.\n     * @returns {Promise<string>} A JWT token.\n     * @throws {InvalidAPIKeyFormatError} If the private key is not in the correct format or signing fails.\n     */\n    async buildJWT(url, method = \"GET\") {\n        const urlObject = new URL(url);\n        const uri = `${method} ${urlObject.host}${urlObject.pathname}`;\n        const now = Math.floor(Date.now() / 1000);\n        const claims = {\n            sub: this.apiKey,\n            iss: \"cdp\",\n            aud: [\"cdp_service\"],\n            uris: [uri],\n        };\n        if (this.privateKey.startsWith(\"-----BEGIN\")) {\n            return this.buildECJWT(claims, now);\n        }\n        else {\n            return this.buildEdwardsJWT(claims, now);\n        }\n    }\n    /**\n     * Builds a JWT using an EC key.\n     *\n     * @param {JWTPayload} claims - The JWT claims.\n     * @param {number} now - The current timestamp (in seconds).\n     * @returns {Promise<string>} A JWT token signed with an EC key.\n     * @throws {InvalidAPIKeyFormatError} If the key conversion, import, or signing fails.\n     */\n    async buildECJWT(claims, now) {\n        // Ensure the PEM is valid and let jose import it.\n        const pemPrivateKey = this.extractPemKey(this.privateKey);\n        let pkcs8Key;\n        try {\n            const keyObj = (0, crypto_1.createPrivateKey)(pemPrivateKey);\n            pkcs8Key = keyObj.export({ type: \"pkcs8\", format: \"pem\" }).toString();\n        }\n        catch (error) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not convert the EC private key to PKCS8 format\");\n        }\n        let ecKey;\n        try {\n            ecKey = await (0, jose_1.importPKCS8)(pkcs8Key, \"ES256\");\n        }\n        catch (error) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not import the EC private key\");\n        }\n        try {\n            return await new jose_1.SignJWT(claims)\n                .setProtectedHeader({ alg: \"ES256\", kid: this.apiKey, typ: \"JWT\", nonce: this.nonce() })\n                .setIssuedAt(now)\n                .setNotBefore(now)\n                .setExpirationTime(now + 60)\n                .sign(ecKey);\n        }\n        catch (err) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not sign the JWT with the EC key\");\n        }\n    }\n    /**\n     * Builds a JWT using an Ed25519 key.\n     *\n     * @param {JWTPayload} claims - The JWT claims.\n     * @param {number} now - The current timestamp (in seconds).\n     * @returns {Promise<string>} A JWT token signed with an Ed25519 key.\n     * @throws {InvalidAPIKeyFormatError} If the key parsing, import, or signing fails.\n     */\n    async buildEdwardsJWT(claims, now) {\n        // Expect a base64 encoded 64-byte string (32 bytes seed + 32 bytes public key)\n        const decoded = Buffer.from(this.privateKey, \"base64\");\n        if (decoded.length !== 64) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not parse the private key\");\n        }\n        const seed = decoded.subarray(0, 32);\n        const publicKey = decoded.subarray(32);\n        const jwk = {\n            kty: \"OKP\",\n            crv: \"Ed25519\",\n            d: seed.toString(\"base64url\"),\n            x: publicKey.toString(\"base64url\"),\n        };\n        let key;\n        try {\n            key = await (0, jose_1.importJWK)(jwk, \"EdDSA\");\n        }\n        catch (error) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not import the Ed25519 private key\");\n        }\n        try {\n            return await new jose_1.SignJWT(claims)\n                .setProtectedHeader({ alg: \"EdDSA\", kid: this.apiKey, typ: \"JWT\", nonce: this.nonce() })\n                .setIssuedAt(now)\n                .setNotBefore(now)\n                .setExpirationTime(now + 60)\n                .sign(key);\n        }\n        catch (err) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not sign the JWT with the Ed25519 key\");\n        }\n    }\n    /**\n     * Extracts and verifies the PEM key from the given private key string.\n     *\n     * @param {string} privateKeyString - The private key string.\n     * @returns {string} The original PEM key string if valid.\n     * @throws {InvalidAPIKeyFormatError} If the private key string is not in the correct PEM format.\n     */\n    extractPemKey(privateKeyString) {\n        if (privateKeyString.includes(\"-----BEGIN EC PRIVATE KEY-----\") &&\n            privateKeyString.includes(pemFooter)) {\n            return privateKeyString;\n        }\n        throw new errors_1.InvalidAPIKeyFormatError(\"Invalid private key format\");\n    }\n    /**\n     * Generates a random nonce for the JWT.\n     *\n     * @returns {string} The generated nonce.\n     */\n    nonce() {\n        const range = \"0123456789\";\n        let result = \"\";\n        for (let i = 0; i < 16; i++) {\n            result += range.charAt(Math.floor(Math.random() * range.length));\n        }\n        return result;\n    }\n    /**\n     * Returns encoded correlation data including the SDK version and language.\n     *\n     * @returns {string} Encoded correlation data as a query string.\n     */\n    getCorrelationData() {\n        const data = {\n            sdk_version: package_json_1.version,\n            sdk_language: \"typescript\",\n            source: this.source,\n        };\n        if (this.sourceVersion) {\n            data[\"source_version\"] = this.sourceVersion;\n        }\n        return Object.keys(data)\n            .map(key => `${key}=${encodeURIComponent(data[key])}`)\n            .join(\",\");\n    }\n}\nexports.CoinbaseAuthenticator = CoinbaseAuthenticator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Balance = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\n/** A representation of a balance. */\nclass Balance {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param {Decimal} amount - The amount of the balance.\n     * @param {string} assetId - The asset ID.\n     * @hideconstructor\n     */\n    constructor(amount, assetId, asset) {\n        this.amount = amount;\n        this.assetId = assetId;\n        this.asset = asset;\n    }\n    /**\n     * Converts a BalanceModel into a Balance object.\n     *\n     * @param {BalanceModel} model - The balance model object.\n     * @returns {Balance} The Balance object.\n     */\n    static fromModel(model) {\n        const asset = asset_1.Asset.fromModel(model.asset);\n        return new Balance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), asset.getAssetId(), asset);\n    }\n    /**\n     * Converts a BalanceModel and asset ID into a Balance object.\n     *\n     * @param {BalanceModel} model - The balance model object.\n     * @param {string} assetId - The asset ID.\n     * @returns {Balance} The Balance object.\n     */\n    static fromModelAndAssetId(model, assetId) {\n        const asset = asset_1.Asset.fromModel(model.asset, assetId);\n        return new Balance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), asset.getAssetId(), asset);\n    }\n}\nexports.Balance = Balance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2JhbGFuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YscUNBQXFDLG1CQUFPLENBQUMsOERBQVk7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9iYWxhbmNlLmpzPzQ0NTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBkZWNpbWFsX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanNcIikpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuLyoqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBiYWxhbmNlLiAqL1xuY2xhc3MgQmFsYW5jZSB7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBjb25zdHJ1Y3RvciB0byBwcmV2ZW50IGRpcmVjdCBpbnN0YW50aWF0aW9uIG91dHNpZGUgb2YgdGhlIGZhY3RvcnkgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcGFyYW0ge0RlY2ltYWx9IGFtb3VudCAtIFRoZSBhbW91bnQgb2YgdGhlIGJhbGFuY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFzc2V0SWQgLSBUaGUgYXNzZXQgSUQuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFtb3VudCwgYXNzZXRJZCwgYXNzZXQpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgICAgIHRoaXMuYXNzZXRJZCA9IGFzc2V0SWQ7XG4gICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCYWxhbmNlTW9kZWwgaW50byBhIEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlTW9kZWx9IG1vZGVsIC0gVGhlIGJhbGFuY2UgbW9kZWwgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtCYWxhbmNlfSBUaGUgQmFsYW5jZSBvYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Nb2RlbChtb2RlbCkge1xuICAgICAgICBjb25zdCBhc3NldCA9IGFzc2V0XzEuQXNzZXQuZnJvbU1vZGVsKG1vZGVsLmFzc2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBCYWxhbmNlKGFzc2V0LmZyb21BdG9taWNBbW91bnQobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KG1vZGVsLmFtb3VudCkpLCBhc3NldC5nZXRBc3NldElkKCksIGFzc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCYWxhbmNlTW9kZWwgYW5kIGFzc2V0IElEIGludG8gYSBCYWxhbmNlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QmFsYW5jZU1vZGVsfSBtb2RlbCAtIFRoZSBiYWxhbmNlIG1vZGVsIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcmV0dXJucyB7QmFsYW5jZX0gVGhlIEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW9kZWxBbmRBc3NldElkKG1vZGVsLCBhc3NldElkKSB7XG4gICAgICAgIGNvbnN0IGFzc2V0ID0gYXNzZXRfMS5Bc3NldC5mcm9tTW9kZWwobW9kZWwuYXNzZXQsIGFzc2V0SWQpO1xuICAgICAgICByZXR1cm4gbmV3IEJhbGFuY2UoYXNzZXQuZnJvbUF0b21pY0Ftb3VudChuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQobW9kZWwuYW1vdW50KSksIGFzc2V0LmdldEFzc2V0SWQoKSwgYXNzZXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFsYW5jZSA9IEJhbGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BalanceMap = void 0;\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\n/**\n * A convenience class for storing and manipulating Asset balances in a human-readable format.\n */\nclass BalanceMap extends Map {\n    /**\n     * Converts a list of Balance models to a BalanceMap.\n     *\n     * @param {BalanceModel[]} balances - The list of balances fetched from the API.\n     * @returns {BalanceMap} The converted BalanceMap object.\n     */\n    static fromBalances(balances) {\n        const balanceMap = new BalanceMap();\n        balances.forEach(balanceModel => {\n            const balance = balance_1.Balance.fromModel(balanceModel);\n            balanceMap.add(balance);\n        });\n        return balanceMap;\n    }\n    /**\n     * Adds a balance to the map.\n     *\n     * @param {Balance} balance - The balance to add to the map.\n     */\n    add(balance) {\n        if (!(balance instanceof balance_1.Balance)) {\n            throw new Error(\"balance must be a Balance\");\n        }\n        this.set(balance.assetId, balance.amount);\n    }\n    /**\n     * Returns a string representation of the balance map.\n     *\n     * @returns The string representation of the balance map.\n     */\n    toString() {\n        const result = {};\n        this.forEach((value, key) => {\n            let str = value.toString();\n            if (value.isInteger()) {\n                str = value.toNumber().toString();\n            }\n            result[key] = str;\n        });\n        return `BalanceMap${JSON.stringify(result)}`;\n    }\n}\nexports.BalanceMap = BalanceMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2JhbGFuY2VfbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9iYWxhbmNlX21hcC5qcz9jMzAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYWxhbmNlTWFwID0gdm9pZCAwO1xuY29uc3QgYmFsYW5jZV8xID0gcmVxdWlyZShcIi4vYmFsYW5jZVwiKTtcbi8qKlxuICogQSBjb252ZW5pZW5jZSBjbGFzcyBmb3Igc3RvcmluZyBhbmQgbWFuaXB1bGF0aW5nIEFzc2V0IGJhbGFuY2VzIGluIGEgaHVtYW4tcmVhZGFibGUgZm9ybWF0LlxuICovXG5jbGFzcyBCYWxhbmNlTWFwIGV4dGVuZHMgTWFwIHtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGxpc3Qgb2YgQmFsYW5jZSBtb2RlbHMgdG8gYSBCYWxhbmNlTWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlTW9kZWxbXX0gYmFsYW5jZXMgLSBUaGUgbGlzdCBvZiBiYWxhbmNlcyBmZXRjaGVkIGZyb20gdGhlIEFQSS5cbiAgICAgKiBAcmV0dXJucyB7QmFsYW5jZU1hcH0gVGhlIGNvbnZlcnRlZCBCYWxhbmNlTWFwIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUJhbGFuY2VzKGJhbGFuY2VzKSB7XG4gICAgICAgIGNvbnN0IGJhbGFuY2VNYXAgPSBuZXcgQmFsYW5jZU1hcCgpO1xuICAgICAgICBiYWxhbmNlcy5mb3JFYWNoKGJhbGFuY2VNb2RlbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gYmFsYW5jZV8xLkJhbGFuY2UuZnJvbU1vZGVsKGJhbGFuY2VNb2RlbCk7XG4gICAgICAgICAgICBiYWxhbmNlTWFwLmFkZChiYWxhbmNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiYWxhbmNlTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgYmFsYW5jZSB0byB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlfSBiYWxhbmNlIC0gVGhlIGJhbGFuY2UgdG8gYWRkIHRvIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkKGJhbGFuY2UpIHtcbiAgICAgICAgaWYgKCEoYmFsYW5jZSBpbnN0YW5jZW9mIGJhbGFuY2VfMS5CYWxhbmNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFsYW5jZSBtdXN0IGJlIGEgQmFsYW5jZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldChiYWxhbmNlLmFzc2V0SWQsIGJhbGFuY2UuYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYmFsYW5jZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBiYWxhbmNlIG1hcC5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUuaXNJbnRlZ2VyKCkpIHtcbiAgICAgICAgICAgICAgICBzdHIgPSB2YWx1ZS50b051bWJlcigpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHN0cjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBgQmFsYW5jZU1hcCR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFsYW5jZU1hcCA9IEJhbGFuY2VNYXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Coinbase = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nconst axios_retry_1 = __importDefault(__webpack_require__(/*! axios-retry */ \"(rsc)/./node_modules/axios-retry/dist/cjs/index.js\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst client_1 = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\");\nconst base_1 = __webpack_require__(/*! ./../client/base */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\nconst configuration_1 = __webpack_require__(/*! ./../client/configuration */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\");\nconst authenticator_1 = __webpack_require__(/*! ./authenticator */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\n/**\n * The Coinbase SDK.\n */\nclass Coinbase {\n    /**\n     * Initializes the Coinbase SDK.\n     *\n     * @deprecated as of v0.5.0, use `configure` or `configureFromJson` instead.\n     *\n     * @class\n     * @param options - The constructor options.\n     * @param options.apiKeyName - The API key name.\n     * @param options.privateKey - The private key associated with the API key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not.\n     * @param options.debugging - If true, logs API requests and responses to the console.\n     * @param options.basePath - The base path for the API.\n     * @param options.maxNetworkRetries - The maximum number of network retries for the API GET requests.\n     * @param options.source - Optional source string to be sent with the API requests. Defaults to `sdk`.\n     * @param options.sourceVersion - Optional source version string to be sent with the API requests.\n     * @throws {InvalidConfigurationError} If the configuration is invalid.\n     * @throws {InvalidAPIKeyFormatError} If not able to create JWT token.\n     */\n    constructor({ apiKeyName, privateKey, useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, maxNetworkRetries = 3, source = \"sdk\", sourceVersion = undefined, }) {\n        if (apiKeyName === \"\") {\n            throw new errors_1.InvalidConfigurationError(\"Invalid configuration: apiKeyName is empty\");\n        }\n        if (privateKey === \"\") {\n            throw new errors_1.InvalidConfigurationError(\"Invalid configuration: privateKey is empty\");\n        }\n        const coinbaseAuthenticator = new authenticator_1.CoinbaseAuthenticator(apiKeyName, privateKey, source, sourceVersion);\n        const config = new configuration_1.Configuration({\n            basePath: basePath,\n        });\n        const axiosInstance = axios_1.default.create();\n        (0, axios_retry_1.default)(axiosInstance, {\n            retries: maxNetworkRetries,\n            retryCondition: (error) => {\n                return (error.config?.method?.toUpperCase() === \"GET\" &&\n                    (error.response?.status || 0) in [500, 502, 503, 504]);\n            },\n        });\n        (0, utils_1.registerAxiosInterceptors)(axiosInstance, config => coinbaseAuthenticator.authenticateRequest(config, debugging), \n        /* istanbul ignore file */\n        response => (0, utils_1.logApiResponse)(response, debugging));\n        Coinbase.apiClients.wallet = (0, client_1.WalletsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.smartWallet = (0, client_1.SmartWalletsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.address = (0, client_1.AddressesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.transfer = (0, client_1.TransfersApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.trade = (0, client_1.TradesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.serverSigner = (0, client_1.ServerSignersApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.stake = (0, client_1.StakeApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.walletStake = (0, client_1.MPCWalletStakeApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.asset = (0, client_1.AssetsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.webhook = (0, client_1.WebhooksApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.contractInvocation = (0, client_1.ContractInvocationsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.externalAddress = (0, client_1.ExternalAddressesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.balanceHistory = (0, client_1.BalanceHistoryApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.contractEvent = (0, client_1.ContractEventsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.smartContract = (0, client_1.SmartContractsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.fund = (0, client_1.FundApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.transactionHistory = (0, client_1.TransactionHistoryApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiKeyPrivateKey = privateKey;\n        Coinbase.useServerSigner = useServerSigner;\n        Coinbase.apiClients.addressReputation = (0, client_1.ReputationApiFactory)(config, basePath, axiosInstance);\n    }\n    /**\n     * Configures the Coinbase SDK with the provided options.\n     *\n     * @param options - The configuration options.\n     * @param options.apiKeyName - The name of the API key.\n     * @param options.privateKey - The private key associated with the API key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not. Defaults to false.\n     * @param options.debugging - If true, logs API requests and responses to the console. Defaults to false.\n     * @param options.basePath - The base path for the API. Defaults to BASE_PATH.\n     * @param options.source - Optional source string to be sent with the API requests. Defaults to `sdk`.\n     * @param options.sourceVersion - Optional source version string to be sent with the API requests.\n     * @returns A new instance of the Coinbase SDK.\n     */\n    static configure({ apiKeyName, privateKey, useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, source = \"sdk\", sourceVersion = undefined, }) {\n        return new Coinbase({\n            apiKeyName,\n            privateKey,\n            useServerSigner,\n            debugging,\n            basePath,\n            source,\n            sourceVersion,\n        });\n    }\n    /**\n     * Reads the API key and private key from a JSON file and initializes the Coinbase SDK.\n     *\n     * @param options - The configuration options.\n     * @param options.filePath - The path to the JSON file containing the API key and private key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not.\n     * @param options.debugging - If true, logs API requests and responses to the console.\n     * @param options.basePath - The base path for the API.\n     * @param options.source - Optional source string to be sent with the API requests. Defaults to `sdk`.\n     * @param options.sourceVersion - Optional source version string to be sent with the API requests.\n     * @returns A new instance of the Coinbase SDK.\n     * @throws {InvalidAPIKeyFormat} If the file does not exist or the configuration values are missing/invalid.\n     * @throws {InvalidConfiguration} If the configuration is invalid.\n     * @throws {InvalidAPIKeyFormat} If not able to create JWT token.\n     */\n    static configureFromJson({ filePath = \"coinbase_cloud_api_key.json\", useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, source = \"sdk\", sourceVersion = undefined, } = {}) {\n        filePath = filePath.startsWith(\"~\") ? filePath.replace(\"~\", os.homedir()) : filePath;\n        if (!fs.existsSync(filePath)) {\n            throw new errors_1.InvalidConfigurationError(`Invalid configuration: file not found at ${filePath}`);\n        }\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            // Support both \"name\" and \"id\" for the API key identifier.\n            const config = JSON.parse(data);\n            const apiKeyIdentifier = config.name || config.id;\n            if (!apiKeyIdentifier || !config.privateKey) {\n                throw new errors_1.InvalidAPIKeyFormatError(\"Invalid configuration: missing API key identifier or privateKey\");\n            }\n            return new Coinbase({\n                apiKeyName: apiKeyIdentifier,\n                privateKey: config.privateKey,\n                useServerSigner: useServerSigner,\n                debugging: debugging,\n                basePath: basePath,\n                source,\n                sourceVersion,\n            });\n        }\n        catch (e) {\n            if (e instanceof SyntaxError) {\n                throw new errors_1.InvalidAPIKeyFormatError(\"Not able to parse the configuration file\");\n            }\n            else {\n                throw new errors_1.InvalidAPIKeyFormatError(`An error occurred while reading the configuration file: ${e.message}`);\n            }\n        }\n    }\n    /**\n     * Converts a network symbol to a string, replacing underscores with hyphens.\n     *\n     * @param network - The network symbol to convert\n     * @returns the converted string\n     */\n    static normalizeNetwork(network) {\n        return network.replace(/_/g, \"-\");\n    }\n    /**\n     * Converts a string to a symbol, replacing hyphens with underscores.\n     *\n     * @param asset - The string to convert\n     * @returns the converted symbol\n     */\n    static toAssetId(asset) {\n        return asset.replace(/-/g, \"_\");\n    }\n}\nexports.Coinbase = Coinbase;\n/**\n * The map of supported networks to network ID. Generated from the OpenAPI spec.\n *\n * @constant\n *\n * @example\n * ```typescript\n * Coinbase.networks.BaseMainnet\n * ```\n */\nCoinbase.networks = client_1.NetworkIdentifier;\n/**\n * The list of supported assets.\n *\n * @constant\n */\nCoinbase.assets = {\n    Eth: \"eth\",\n    Wei: \"wei\",\n    Gwei: \"gwei\",\n    Usdc: \"usdc\",\n    Weth: \"weth\",\n    Sol: \"sol\",\n    Lamport: \"lamport\",\n    Eurc: \"eurc\",\n    Cbbtc: \"cbbtc\",\n};\nCoinbase.apiClients = {};\n/**\n * The default page limit for list methods.\n *\n * @constant\n */\nCoinbase.defaultPageLimit = 100;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GWEI_DECIMALS = void 0;\nexports.GWEI_DECIMALS = 9;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9jb25zdGFudHMuanM/NjY0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR1dFSV9ERUNJTUFMUyA9IHZvaWQgMDtcbmV4cG9ydHMuR1dFSV9ERUNJTUFMUyA9IDk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractEvent = void 0;\n/**\n * A representation of a single contract event.\n */\nclass ContractEvent {\n    /**\n     * Creates the ContractEvent object.\n     *\n     * @param model - The underlying contract event object.\n     */\n    constructor(model) {\n        this.model = model;\n    }\n    /**\n     * Returns the network ID of the ContractEvent.\n     *\n     * @returns The network ID.\n     */\n    networkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the protocol name of the ContractEvent.\n     *\n     * @returns The protocol name.\n     */\n    protocolName() {\n        return this.model.protocol_name;\n    }\n    /**\n     * Returns the contract name of the ContractEvent.\n     *\n     * @returns The contract name.\n     */\n    contractName() {\n        return this.model.contract_name;\n    }\n    /**\n     * Returns the event name of the ContractEvent.\n     *\n     * @returns The event name.\n     */\n    eventName() {\n        return this.model.event_name;\n    }\n    /**\n     * Returns the signature of the ContractEvent.\n     *\n     * @returns The event signature.\n     */\n    sig() {\n        return this.model.sig;\n    }\n    /**\n     * Returns the four bytes of the Keccak hash of the event signature.\n     *\n     * @returns The four bytes of the event signature hash.\n     */\n    fourBytes() {\n        return this.model.four_bytes;\n    }\n    /**\n     * Returns the contract address of the ContractEvent.\n     *\n     * @returns The contract address.\n     */\n    contractAddress() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the block time of the ContractEvent.\n     *\n     * @returns The block time.\n     */\n    blockTime() {\n        return new Date(this.model.block_time);\n    }\n    /**\n     * Returns the block height of the ContractEvent.\n     *\n     * @returns The block height.\n     */\n    blockHeight() {\n        return this.model.block_height;\n    }\n    /**\n     * Returns the transaction hash of the ContractEvent.\n     *\n     * @returns The transaction hash.\n     */\n    txHash() {\n        return this.model.tx_hash;\n    }\n    /**\n     * Returns the transaction index of the ContractEvent.\n     *\n     * @returns The transaction index.\n     */\n    txIndex() {\n        return this.model.tx_index;\n    }\n    /**\n     * Returns the event index of the ContractEvent.\n     *\n     * @returns The event index.\n     */\n    eventIndex() {\n        return this.model.event_index;\n    }\n    /**\n     * Returns the event data of the ContractEvent.\n     *\n     * @returns The event data.\n     */\n    data() {\n        return this.model.data;\n    }\n    /**\n     * Print the ContractEvent as a string.\n     *\n     * @returns The string representation of the ContractEvent.\n     */\n    toString() {\n        return `ContractEvent { networkId: '${this.networkId()}' protocolName: '${this.protocolName()}' contractName: '${this.contractName()}' eventName: '${this.eventName()}' contractAddress: '${this.contractAddress()}' blockHeight: ${this.blockHeight()} txHash: '${this.txHash()}' }`;\n    }\n}\nexports.ContractEvent = ContractEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2NvbnRyYWN0X2V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGNBQWMsaUJBQWlCLG1CQUFtQixvQkFBb0IsbUJBQW1CLG9CQUFvQixnQkFBZ0IsaUJBQWlCLHNCQUFzQix1QkFBdUIsaUJBQWlCLG9CQUFvQixXQUFXLGNBQWMsR0FBRztBQUM1UjtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9jb250cmFjdF9ldmVudC5qcz80MTY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db250cmFjdEV2ZW50ID0gdm9pZCAwO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGNvbnRyYWN0IGV2ZW50LlxuICovXG5jbGFzcyBDb250cmFjdEV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBDb250cmFjdEV2ZW50IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbCAtIFRoZSB1bmRlcmx5aW5nIGNvbnRyYWN0IGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5ldHdvcmsgSUQgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV0d29yayBJRC5cbiAgICAgKi9cbiAgICBuZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLm5ldHdvcmtfaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3RvY29sIG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcHJvdG9jb2wgbmFtZS5cbiAgICAgKi9cbiAgICBwcm90b2NvbE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnByb3RvY29sX25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRyYWN0IG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgY29udHJhY3QgbmFtZS5cbiAgICAgKi9cbiAgICBjb250cmFjdE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNvbnRyYWN0X25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV2ZW50IG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKi9cbiAgICBldmVudE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmV2ZW50X25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNpZ25hdHVyZSBvZiB0aGUgQ29udHJhY3RFdmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBldmVudCBzaWduYXR1cmUuXG4gICAgICovXG4gICAgc2lnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zaWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZvdXIgYnl0ZXMgb2YgdGhlIEtlY2NhayBoYXNoIG9mIHRoZSBldmVudCBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZm91ciBieXRlcyBvZiB0aGUgZXZlbnQgc2lnbmF0dXJlIGhhc2guXG4gICAgICovXG4gICAgZm91ckJ5dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5mb3VyX2J5dGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGNvbnRyYWN0IGFkZHJlc3MuXG4gICAgICovXG4gICAgY29udHJhY3RBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5jb250cmFjdF9hZGRyZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBibG9jayB0aW1lIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJsb2NrIHRpbWUuXG4gICAgICovXG4gICAgYmxvY2tUaW1lKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5tb2RlbC5ibG9ja190aW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYmxvY2sgaGVpZ2h0IG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJsb2NrIGhlaWdodC5cbiAgICAgKi9cbiAgICBibG9ja0hlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYmxvY2tfaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgdHhIYXNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eF9oYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBpbmRleCBvZiB0aGUgQ29udHJhY3RFdmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSB0cmFuc2FjdGlvbiBpbmRleC5cbiAgICAgKi9cbiAgICB0eEluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eF9pbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZXZlbnQgaW5kZXggb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgaW5kZXguXG4gICAgICovXG4gICAgZXZlbnRJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZXZlbnRfaW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV2ZW50IGRhdGEgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgZGF0YS5cbiAgICAgKi9cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmludCB0aGUgQ29udHJhY3RFdmVudCBhcyBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQ29udHJhY3RFdmVudCB7IG5ldHdvcmtJZDogJyR7dGhpcy5uZXR3b3JrSWQoKX0nIHByb3RvY29sTmFtZTogJyR7dGhpcy5wcm90b2NvbE5hbWUoKX0nIGNvbnRyYWN0TmFtZTogJyR7dGhpcy5jb250cmFjdE5hbWUoKX0nIGV2ZW50TmFtZTogJyR7dGhpcy5ldmVudE5hbWUoKX0nIGNvbnRyYWN0QWRkcmVzczogJyR7dGhpcy5jb250cmFjdEFkZHJlc3MoKX0nIGJsb2NrSGVpZ2h0OiAke3RoaXMuYmxvY2tIZWlnaHQoKX0gdHhIYXNoOiAnJHt0aGlzLnR4SGFzaCgpfScgfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db250cmFjdEV2ZW50ID0gQ29udHJhY3RFdmVudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractInvocation = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * A representation of a ContractInvocation, which calls a smart contract method\n * onchain. The fee is assumed to be paid in the native Asset of the Network.\n */\nclass ContractInvocation {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param contractInvocationModel - The ContractInvocation model.\n     * @hideconstructor\n     */\n    constructor(contractInvocationModel) {\n        if (!contractInvocationModel) {\n            throw new Error(\"ContractInvocation model cannot be empty\");\n        }\n        this.model = contractInvocationModel;\n    }\n    /**\n     * Converts a ContractInvocationModel into a ContractInvocation object.\n     *\n     * @param contractInvocationModel - The ContractInvocation model object.\n     * @returns The ContractInvocation object.\n     */\n    static fromModel(contractInvocationModel) {\n        return new ContractInvocation(contractInvocationModel);\n    }\n    /**\n     * Returns the ID of the ContractInvocation.\n     *\n     * @returns The ContractInvocation ID.\n     */\n    getId() {\n        return this.model.contract_invocation_id;\n    }\n    /**\n     * Returns the Network ID of the ContractInvocation.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the ContractInvocation.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the From Address ID of the ContractInvocation.\n     *\n     * @returns The From Address ID.\n     */\n    getFromAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Destination Address ID of the ContractInvocation.\n     *\n     * @returns The Destination Address ID.\n     */\n    getContractAddressId() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the Method of the ContractInvocation.\n     *\n     * @returns The Method.\n     */\n    getMethod() {\n        return this.model.method;\n    }\n    /**\n     * Returns the Arguments of the ContractInvocation.\n     *\n     * @returns {object} The arguments object passed to the contract invocation.\n     * The key is the argument name and the value is the argument value.\n     */\n    getArgs() {\n        return JSON.parse(this.model.args);\n    }\n    /**\n     * Returns the ABI of the ContractInvocation, if specified.\n     *\n     * @returns The ABI as an object, or undefined if not available.\n     */\n    getAbi() {\n        if (!this.model.abi)\n            return undefined;\n        return JSON.parse(this.model.abi);\n    }\n    /**\n     * Returns the amount of the native asset sent to a payable contract method, if applicable.\n     *\n     * @returns The amount in atomic units of the native asset.\n     */\n    getAmount() {\n        return new decimal_js_1.Decimal(this.model.amount);\n    }\n    /**\n     * Returns the Transaction Hash of the ContractInvocation.\n     *\n     * @returns The Transaction Hash as a Hex string, or undefined if not yet available.\n     */\n    getTransactionHash() {\n        return this.getTransaction().getTransactionHash();\n    }\n    /**\n     * Returns the Transaction of the ContractInvocation.\n     *\n     * @returns The ethers.js Transaction object.\n     * @throws (InvalidUnsignedPayload) If the Unsigned Payload is invalid.\n     */\n    getRawTransaction() {\n        return this.getTransaction().rawTransaction();\n    }\n    /**\n     * Signs the ContractInvocation with the provided key and returns the hex signature\n     * required for broadcasting the ContractInvocation.\n     *\n     * @param key - The key to sign the ContractInvocation with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        return this.getTransaction().sign(key);\n    }\n    /**\n     * Returns the Status of the ContractInvocation.\n     *\n     * @returns The Status of the ContractInvocation.\n     */\n    getStatus() {\n        return this.getTransaction().getStatus();\n    }\n    /**\n     * Returns the Transaction of the ContractInvocation.\n     *\n     * @returns The Transaction\n     */\n    getTransaction() {\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer.\n     */\n    getTransactionLink() {\n        return this.getTransaction().getTransactionLink();\n    }\n    /**\n     * Broadcasts the ContractInvocation to the Network.\n     *\n     * @returns The ContractInvocation object\n     * @throws {APIError} if the API request to broadcast a ContractInvocation fails.\n     */\n    async broadcast() {\n        if (!this.getTransaction()?.isSigned())\n            throw new Error(\"Cannot broadcast unsigned ContractInvocation\");\n        const broadcastContractInvocationRequest = {\n            signed_payload: this.getTransaction().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.contractInvocation.broadcastContractInvocation(this.getWalletId(), this.getFromAddressId(), this.getId(), broadcastContractInvocationRequest);\n        return ContractInvocation.fromModel(response.data);\n    }\n    /**\n     * Waits for the ContractInvocation to be confirmed on the Network or fail on chain.\n     * Waits until the ContractInvocation is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the ContractInvocation takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the ContractInvocation.\n     * @param options.timeoutSeconds - The maximum time to wait for the ContractInvocation to be confirmed.\n     *\n     * @returns The ContractInvocation object in a terminal state.\n     * @throws {Error} if the ContractInvocation times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the ContractInvocation is in a terminal state, return the ContractInvocation.\n            const status = this.getStatus();\n            if (status === types_1.TransactionStatus.COMPLETE || status === types_1.TransactionStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"ContractInvocation timed out\");\n    }\n    /**\n     * Reloads the ContractInvocation model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a ContractInvocation fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.contractInvocation.getContractInvocation(this.getWalletId(), this.getFromAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the ContractInvocation.\n     *\n     * @returns The string representation of the ContractInvocation.\n     */\n    toString() {\n        return (`ContractInvocation{contractInvocationId: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `fromAddressId: '${this.getFromAddressId()}', contractAddressId: '${this.getContractAddressId()}', ` +\n            `method: '${this.getMethod()}', args: '${this.getArgs()}', transactionHash: '${this.getTransactionHash()}', ` +\n            `transactionLink: '${this.getTransactionLink()}', status: '${this.getStatus()}'}`);\n    }\n}\nexports.ContractInvocation = ContractInvocation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CryptoAmount = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\n/**\n * A representation of a CryptoAmount that includes the amount and asset.\n */\nclass CryptoAmount {\n    /**\n     * Creates a new CryptoAmount instance.\n     *\n     * @param amount - The amount of the Asset\n     * @param asset - The Asset\n     * @param assetId - Optional Asset ID override\n     */\n    constructor(amount, asset, assetId) {\n        this.amount = amount;\n        this.assetObj = asset;\n        this.assetId = assetId || asset.getAssetId();\n    }\n    /**\n     * Converts a CryptoAmount model to a CryptoAmount.\n     *\n     * @param amountModel - The crypto amount from the API\n     * @returns The converted CryptoAmount object\n     */\n    static fromModel(amountModel) {\n        const asset = asset_1.Asset.fromModel(amountModel.asset);\n        return new CryptoAmount(asset.fromAtomicAmount(new decimal_js_1.default(amountModel.amount)), asset);\n    }\n    /**\n     * Converts a CryptoAmount model and asset ID to a CryptoAmount.\n     * This can be used to specify a non-primary denomination that we want the amount\n     * to be converted to.\n     *\n     * @param amountModel - The crypto amount from the API\n     * @param assetId - The Asset ID of the denomination we want returned\n     * @returns The converted CryptoAmount object\n     */\n    static fromModelAndAssetId(amountModel, assetId) {\n        const asset = asset_1.Asset.fromModel(amountModel.asset, assetId);\n        return new CryptoAmount(asset.fromAtomicAmount(new decimal_js_1.default(amountModel.amount)), asset, assetId);\n    }\n    /**\n     * Gets the amount of the Asset.\n     *\n     * @returns The amount of the Asset\n     */\n    getAmount() {\n        return this.amount;\n    }\n    /**\n     * Gets the Asset.\n     *\n     * @returns The Asset\n     */\n    getAsset() {\n        return this.assetObj;\n    }\n    /**\n     * Gets the Asset ID.\n     *\n     * @returns The Asset ID\n     */\n    getAssetId() {\n        return this.assetId;\n    }\n    /**\n     * Converts the amount to atomic units.\n     *\n     * @returns The amount in atomic units\n     */\n    toAtomicAmount() {\n        return this.assetObj.toAtomicAmount(this.amount);\n    }\n    /**\n     * Returns a string representation of the CryptoAmount.\n     *\n     * @returns A string representation of the CryptoAmount\n     */\n    toString() {\n        return `CryptoAmount{amount: '${this.amount}', assetId: '${this.assetId}'}`;\n    }\n}\nexports.CryptoAmount = CryptoAmount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2NyeXB0b19hbW91bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIscUNBQXFDLG1CQUFPLENBQUMsOERBQVk7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixXQUFXLFlBQVksZUFBZSxhQUFhLEVBQUU7QUFDbEY7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY29pbmJhc2UvY3J5cHRvX2Ftb3VudC5qcz80NjNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcnlwdG9BbW91bnQgPSB2b2lkIDA7XG5jb25zdCBkZWNpbWFsX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanNcIikpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgQ3J5cHRvQW1vdW50IHRoYXQgaW5jbHVkZXMgdGhlIGFtb3VudCBhbmQgYXNzZXQuXG4gKi9cbmNsYXNzIENyeXB0b0Ftb3VudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDcnlwdG9BbW91bnQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiB0aGUgQXNzZXRcbiAgICAgKiBAcGFyYW0gYXNzZXQgLSBUaGUgQXNzZXRcbiAgICAgKiBAcGFyYW0gYXNzZXRJZCAtIE9wdGlvbmFsIEFzc2V0IElEIG92ZXJyaWRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYW1vdW50LCBhc3NldCwgYXNzZXRJZCkge1xuICAgICAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgICAgICAgdGhpcy5hc3NldE9iaiA9IGFzc2V0O1xuICAgICAgICB0aGlzLmFzc2V0SWQgPSBhc3NldElkIHx8IGFzc2V0LmdldEFzc2V0SWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBDcnlwdG9BbW91bnQgbW9kZWwgdG8gYSBDcnlwdG9BbW91bnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW1vdW50TW9kZWwgLSBUaGUgY3J5cHRvIGFtb3VudCBmcm9tIHRoZSBBUElcbiAgICAgKiBAcmV0dXJucyBUaGUgY29udmVydGVkIENyeXB0b0Ftb3VudCBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU1vZGVsKGFtb3VudE1vZGVsKSB7XG4gICAgICAgIGNvbnN0IGFzc2V0ID0gYXNzZXRfMS5Bc3NldC5mcm9tTW9kZWwoYW1vdW50TW9kZWwuYXNzZXQpO1xuICAgICAgICByZXR1cm4gbmV3IENyeXB0b0Ftb3VudChhc3NldC5mcm9tQXRvbWljQW1vdW50KG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdChhbW91bnRNb2RlbC5hbW91bnQpKSwgYXNzZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIENyeXB0b0Ftb3VudCBtb2RlbCBhbmQgYXNzZXQgSUQgdG8gYSBDcnlwdG9BbW91bnQuXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IGEgbm9uLXByaW1hcnkgZGVub21pbmF0aW9uIHRoYXQgd2Ugd2FudCB0aGUgYW1vdW50XG4gICAgICogdG8gYmUgY29udmVydGVkIHRvLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFtb3VudE1vZGVsIC0gVGhlIGNyeXB0byBhbW91bnQgZnJvbSB0aGUgQVBJXG4gICAgICogQHBhcmFtIGFzc2V0SWQgLSBUaGUgQXNzZXQgSUQgb2YgdGhlIGRlbm9taW5hdGlvbiB3ZSB3YW50IHJldHVybmVkXG4gICAgICogQHJldHVybnMgVGhlIGNvbnZlcnRlZCBDcnlwdG9BbW91bnQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIGZyb21Nb2RlbEFuZEFzc2V0SWQoYW1vdW50TW9kZWwsIGFzc2V0SWQpIHtcbiAgICAgICAgY29uc3QgYXNzZXQgPSBhc3NldF8xLkFzc2V0LmZyb21Nb2RlbChhbW91bnRNb2RlbC5hc3NldCwgYXNzZXRJZCk7XG4gICAgICAgIHJldHVybiBuZXcgQ3J5cHRvQW1vdW50KGFzc2V0LmZyb21BdG9taWNBbW91bnQobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KGFtb3VudE1vZGVsLmFtb3VudCkpLCBhc3NldCwgYXNzZXRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFtb3VudCBvZiB0aGUgQXNzZXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgYW1vdW50IG9mIHRoZSBBc3NldFxuICAgICAqL1xuICAgIGdldEFtb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW1vdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBBc3NldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBBc3NldFxuICAgICAqL1xuICAgIGdldEFzc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldE9iajtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgQXNzZXQgSUQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgQXNzZXQgSURcbiAgICAgKi9cbiAgICBnZXRBc3NldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgYW1vdW50IHRvIGF0b21pYyB1bml0cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBhbW91bnQgaW4gYXRvbWljIHVuaXRzXG4gICAgICovXG4gICAgdG9BdG9taWNBbW91bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0T2JqLnRvQXRvbWljQW1vdW50KHRoaXMuYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ3J5cHRvQW1vdW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIENyeXB0b0Ftb3VudFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYENyeXB0b0Ftb3VudHthbW91bnQ6ICcke3RoaXMuYW1vdW50fScsIGFzc2V0SWQ6ICcke3RoaXMuYXNzZXRJZH0nfWA7XG4gICAgfVxufVxuZXhwb3J0cy5DcnlwdG9BbW91bnQgPSBDcnlwdG9BbW91bnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlreadySignedError = exports.NotSignedError = exports.InvalidUnsignedPayloadError = exports.InvalidConfigurationError = exports.ArgumentError = exports.TimeoutError = exports.InvalidAPIKeyFormatError = void 0;\n/**\n * InvalidAPIKeyFormatError error is thrown when the API key format is invalid.\n */\nclass InvalidAPIKeyFormatError extends Error {\n    /**\n     * Initializes a new InvalidAPIKeyFormat instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidAPIKeyFormatError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidAPIKeyFormatError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidAPIKeyFormatError);\n        }\n    }\n}\nexports.InvalidAPIKeyFormatError = InvalidAPIKeyFormatError;\nInvalidAPIKeyFormatError.DEFAULT_MESSAGE = \"Invalid API key format\";\n/**\n * TimeoutError is thrown when an operation times out.\n */\nclass TimeoutError extends Error {\n    /**\n     * Initializes a new TimeoutError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = \"Timeout Error\") {\n        super(message);\n        this.name = \"TimeoutError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, TimeoutError);\n        }\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * ArgumentError is thrown when an argument is invalid.\n */\nclass ArgumentError extends Error {\n    /**\n     * Initializes a new ArgumentError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = ArgumentError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"ArgumentError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ArgumentError);\n        }\n    }\n}\nexports.ArgumentError = ArgumentError;\nArgumentError.DEFAULT_MESSAGE = \"Argument Error\";\n/**\n * InvalidConfigurationError error is thrown when apikey/privateKey configuration is invalid.\n */\nclass InvalidConfigurationError extends Error {\n    /**\n     * Initializes a new InvalidConfiguration instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidConfigurationError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidConfigurationError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidConfigurationError);\n        }\n    }\n}\nexports.InvalidConfigurationError = InvalidConfigurationError;\nInvalidConfigurationError.DEFAULT_MESSAGE = \"Invalid configuration\";\n/**\n * InvalidUnsignedPayload error is thrown when the unsigned payload is invalid.\n */\nclass InvalidUnsignedPayloadError extends Error {\n    /**\n     * Initializes a new InvalidUnsignedPayload instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidUnsignedPayloadError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidUnsignedPayloadError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidUnsignedPayloadError);\n        }\n    }\n}\nexports.InvalidUnsignedPayloadError = InvalidUnsignedPayloadError;\nInvalidUnsignedPayloadError.DEFAULT_MESSAGE = \"Invalid unsigned payload\";\n/**\n * NotSignedError is thrown when a resource is not signed.\n */\nclass NotSignedError extends Error {\n    /**\n     * Initializes a new NotSignedError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = \"Resource not signed\") {\n        super(message);\n        this.name = \"NotSignedError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, NotSignedError);\n        }\n    }\n}\nexports.NotSignedError = NotSignedError;\n/**\n * AlreadySignedError is thrown when a resource is already signed.\n */\nclass AlreadySignedError extends Error {\n    /**\n     * Initializes a new AlreadySignedError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = AlreadySignedError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"AlreadySignedError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AlreadySignedError);\n        }\n    }\n}\nexports.AlreadySignedError = AlreadySignedError;\nAlreadySignedError.DEFAULT_MESSAGE = \"Resource already signed\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyxtQ0FBbUMsR0FBRyxpQ0FBaUMsR0FBRyxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRyxnQ0FBZ0M7QUFDL007QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9lcnJvcnMuanM/NzYzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWxyZWFkeVNpZ25lZEVycm9yID0gZXhwb3J0cy5Ob3RTaWduZWRFcnJvciA9IGV4cG9ydHMuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yID0gZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yID0gZXhwb3J0cy5Bcmd1bWVudEVycm9yID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBleHBvcnRzLkludmFsaWRBUElLZXlGb3JtYXRFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogSW52YWxpZEFQSUtleUZvcm1hdEVycm9yIGVycm9yIGlzIHRocm93biB3aGVuIHRoZSBBUEkga2V5IGZvcm1hdCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkQVBJS2V5Rm9ybWF0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgSW52YWxpZEFQSUtleUZvcm1hdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IEludmFsaWRBUElLZXlGb3JtYXRFcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZEFQSUtleUZvcm1hdEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZEFQSUtleUZvcm1hdEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZEFQSUtleUZvcm1hdEVycm9yID0gSW52YWxpZEFQSUtleUZvcm1hdEVycm9yO1xuSW52YWxpZEFQSUtleUZvcm1hdEVycm9yLkRFRkFVTFRfTUVTU0FHRSA9IFwiSW52YWxpZCBBUEkga2V5IGZvcm1hdFwiO1xuLyoqXG4gKiBUaW1lb3V0RXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIHRpbWVzIG91dC5cbiAqL1xuY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IFRpbWVvdXRFcnJvciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IFwiVGltZW91dCBFcnJvclwiKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlRpbWVvdXRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFRpbWVvdXRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcbi8qKlxuICogQXJndW1lbnRFcnJvciBpcyB0aHJvd24gd2hlbiBhbiBhcmd1bWVudCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBBcmd1bWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IEFyZ3VtZW50RXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBBcmd1bWVudEVycm9yLkRFRkFVTFRfTUVTU0FHRSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBcmd1bWVudEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQXJndW1lbnRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFyZ3VtZW50RXJyb3IgPSBBcmd1bWVudEVycm9yO1xuQXJndW1lbnRFcnJvci5ERUZBVUxUX01FU1NBR0UgPSBcIkFyZ3VtZW50IEVycm9yXCI7XG4vKipcbiAqIEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IgZXJyb3IgaXMgdGhyb3duIHdoZW4gYXBpa2V5L3ByaXZhdGVLZXkgY29uZmlndXJhdGlvbiBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IEludmFsaWRDb25maWd1cmF0aW9uIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yID0gSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvcjtcbkludmFsaWRDb25maWd1cmF0aW9uRXJyb3IuREVGQVVMVF9NRVNTQUdFID0gXCJJbnZhbGlkIGNvbmZpZ3VyYXRpb25cIjtcbi8qKlxuICogSW52YWxpZFVuc2lnbmVkUGF5bG9hZCBlcnJvciBpcyB0aHJvd24gd2hlbiB0aGUgdW5zaWduZWQgcGF5bG9hZCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkVW5zaWduZWRQYXlsb2FkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgSW52YWxpZFVuc2lnbmVkUGF5bG9hZCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IEludmFsaWRVbnNpZ25lZFBheWxvYWRFcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yID0gSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yO1xuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yLkRFRkFVTFRfTUVTU0FHRSA9IFwiSW52YWxpZCB1bnNpZ25lZCBwYXlsb2FkXCI7XG4vKipcbiAqIE5vdFNpZ25lZEVycm9yIGlzIHRocm93biB3aGVuIGEgcmVzb3VyY2UgaXMgbm90IHNpZ25lZC5cbiAqL1xuY2xhc3MgTm90U2lnbmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgTm90U2lnbmVkRXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcIlJlc291cmNlIG5vdCBzaWduZWRcIikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOb3RTaWduZWRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIE5vdFNpZ25lZEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTm90U2lnbmVkRXJyb3IgPSBOb3RTaWduZWRFcnJvcjtcbi8qKlxuICogQWxyZWFkeVNpZ25lZEVycm9yIGlzIHRocm93biB3aGVuIGEgcmVzb3VyY2UgaXMgYWxyZWFkeSBzaWduZWQuXG4gKi9cbmNsYXNzIEFscmVhZHlTaWduZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBBbHJlYWR5U2lnbmVkRXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBBbHJlYWR5U2lnbmVkRXJyb3IuREVGQVVMVF9NRVNTQUdFKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFscmVhZHlTaWduZWRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEFscmVhZHlTaWduZWRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFscmVhZHlTaWduZWRFcnJvciA9IEFscmVhZHlTaWduZWRFcnJvcjtcbkFscmVhZHlTaWduZWRFcnJvci5ERUZBVUxUX01FU1NBR0UgPSBcIlJlc291cmNlIGFscmVhZHkgc2lnbmVkXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FaucetTransaction = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * Represents a transaction from a faucet.\n */\nclass FaucetTransaction {\n    /**\n     * Creates a new FaucetTransaction instance.\n     * Do not use this method directly - instead, use Address.faucet().\n     *\n     * @class\n     * @param {FaucetTransactionModel} model - The FaucetTransaction model.\n     * @throws {Error} If the model does not exist.\n     */\n    constructor(model) {\n        if (!model?.transaction) {\n            throw new Error(\"FaucetTransaction model cannot be empty\");\n        }\n        this.model = model;\n        this._transaction = new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the Transaction of the FaucetTransaction.\n     *\n     * @returns The Faucet Transaction\n     */\n    get transaction() {\n        return this._transaction;\n    }\n    /**\n     * Returns the transaction hash.\n     *\n     * @returns {string} The transaction hash.\n     */\n    getTransactionHash() {\n        return this.transaction.getTransactionHash();\n    }\n    /**\n     * Returns the link to the transaction on the blockchain explorer.\n     *\n     * @returns {string} The link to the transaction on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.transaction.getTransactionLink();\n    }\n    /**\n     * Returns the Status of the FaucetTransaction.\n     *\n     * @returns The Status of the FaucetTransaction.\n     */\n    getStatus() {\n        return this.transaction.getStatus();\n    }\n    /**\n     * Returns the network ID of the FaucetTransaction.\n     *\n     * @returns {string} The network ID.\n     */\n    getNetworkId() {\n        return this.transaction.getNetworkId();\n    }\n    /**\n     * Returns the address that is being funded by the faucet.\n     *\n     * @returns {string} The address ID.\n     */\n    getAddressId() {\n        return this.transaction.toAddressId();\n    }\n    /**\n     * Waits for the FaucetTransaction to be confirmed on the Network or fail on chain.\n     * Waits until the FaucetTransaction is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the FaucetTransaction takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the FaucetTransaction.\n     * @param options.timeoutSeconds - The maximum time to wait for the FaucetTransaction to be confirmed.\n     *\n     * @returns The FaucetTransaction object in a terminal state.\n     * @throws {Error} if the FaucetTransaction times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the FaucetTransaction is in a terminal state, return the FaucetTransaction.\n            if (this.transaction.isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"FaucetTransaction timed out\");\n    }\n    /**\n     * Reloads the FaucetTransaction model with the latest data from the server.\n     *\n     * @returns {FaucetTransaction} The reloaded FaucetTransaction object.\n     * @throws {APIError} if the API request to get a FaucetTransaction fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.externalAddress.getFaucetTransaction(this.transaction.getNetworkId(), this.getAddressId(), this.getTransactionHash());\n        this.model = result?.data;\n        if (!this.model?.transaction) {\n            throw new Error(\"FaucetTransaction model cannot be empty\");\n        }\n        this._transaction = new transaction_1.Transaction(this.model.transaction);\n        return this;\n    }\n    /**\n     * Returns a string representation of the FaucetTransaction.\n     *\n     * @returns {string} A string representation of the FaucetTransaction.\n     */\n    toString() {\n        return `Coinbase::FaucetTransaction{transaction_hash: '${this.getTransactionHash()}', transaction_link: '${this.getTransactionLink()}'}`;\n    }\n}\nexports.FaucetTransaction = FaucetTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2ZhdWNldF90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsbUJBQW1CLG1CQUFPLENBQUMseUZBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQWU7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVM7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMscUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3QkFBd0I7QUFDdkMsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0EsaUJBQWlCLDhDQUE4QyxJQUFJO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUIsMEJBQTBCLHdCQUF3QiwwQkFBMEIsRUFBRTtBQUMvSTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9mYXVjZXRfdHJhbnNhY3Rpb24uanM/MDM0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmF1Y2V0VHJhbnNhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBjb2luYmFzZV8xID0gcmVxdWlyZShcIi4vY29pbmJhc2VcIik7XG5jb25zdCB0cmFuc2FjdGlvbl8xID0gcmVxdWlyZShcIi4vdHJhbnNhY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHRyYW5zYWN0aW9uIGZyb20gYSBmYXVjZXQuXG4gKi9cbmNsYXNzIEZhdWNldFRyYW5zYWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZhdWNldFRyYW5zYWN0aW9uIGluc3RhbmNlLlxuICAgICAqIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgZGlyZWN0bHkgLSBpbnN0ZWFkLCB1c2UgQWRkcmVzcy5mYXVjZXQoKS5cbiAgICAgKlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBwYXJhbSB7RmF1Y2V0VHJhbnNhY3Rpb25Nb2RlbH0gbW9kZWwgLSBUaGUgRmF1Y2V0VHJhbnNhY3Rpb24gbW9kZWwuXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBtb2RlbCBkb2VzIG5vdCBleGlzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICBpZiAoIW1vZGVsPy50cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmF1Y2V0VHJhbnNhY3Rpb24gbW9kZWwgY2Fubm90IGJlIGVtcHR5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24gPSBuZXcgdHJhbnNhY3Rpb25fMS5UcmFuc2FjdGlvbih0aGlzLm1vZGVsLnRyYW5zYWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVHJhbnNhY3Rpb24gb2YgdGhlIEZhdWNldFRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEZhdWNldCBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIGdldCB0cmFuc2FjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zYWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBoYXNoLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25IYXNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbi5nZXRUcmFuc2FjdGlvbkhhc2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGluayB0byB0aGUgdHJhbnNhY3Rpb24gb24gdGhlIGJsb2NrY2hhaW4gZXhwbG9yZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbGluayB0byB0aGUgdHJhbnNhY3Rpb24gb24gdGhlIGJsb2NrY2hhaW4gZXhwbG9yZXJcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkxpbmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLmdldFRyYW5zYWN0aW9uTGluaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIEZhdWNldFRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFN0YXR1cyBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgZ2V0U3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbi5nZXRTdGF0dXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV0d29yayBJRCBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbmV0d29yayBJRC5cbiAgICAgKi9cbiAgICBnZXROZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLmdldE5ldHdvcmtJZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgaXMgYmVpbmcgZnVuZGVkIGJ5IHRoZSBmYXVjZXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYWRkcmVzcyBJRC5cbiAgICAgKi9cbiAgICBnZXRBZGRyZXNzSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLnRvQWRkcmVzc0lkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXRzIGZvciB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24gdG8gYmUgY29uZmlybWVkIG9uIHRoZSBOZXR3b3JrIG9yIGZhaWwgb24gY2hhaW4uXG4gICAgICogV2FpdHMgdW50aWwgdGhlIEZhdWNldFRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlZCBvciBmYWlsZWQgb24tY2hhaW4gYnkgcG9sbGluZyBhdCB0aGUgZ2l2ZW4gaW50ZXJ2YWwuXG4gICAgICogUmFpc2VzIGFuIGVycm9yIGlmIHRoZSBGYXVjZXRUcmFuc2FjdGlvbiB0YWtlcyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gdGltZW91dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSB3YWl0IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmludGVydmFsU2Vjb25kcyAtIFRoZSBpbnRlcnZhbCB0byBjaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBGYXVjZXRUcmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50aW1lb3V0U2Vjb25kcyAtIFRoZSBtYXhpbXVtIHRpbWUgdG8gd2FpdCBmb3IgdGhlIEZhdWNldFRyYW5zYWN0aW9uIHRvIGJlIGNvbmZpcm1lZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBGYXVjZXRUcmFuc2FjdGlvbiBvYmplY3QgaW4gYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIEZhdWNldFRyYW5zYWN0aW9uIHRpbWVzIG91dC5cbiAgICAgKi9cbiAgICBhc3luYyB3YWl0KHsgaW50ZXJ2YWxTZWNvbmRzID0gMC4yLCB0aW1lb3V0U2Vjb25kcyA9IDEwLCB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0U2Vjb25kcyAqIDEwMDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24gaXMgaW4gYSB0ZXJtaW5hbCBzdGF0ZSwgcmV0dXJuIHRoZSBGYXVjZXRUcmFuc2FjdGlvbi5cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzVGVybWluYWxTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCAoMCwgdXRpbHNfMS5kZWxheSkoaW50ZXJ2YWxTZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVGltZW91dEVycm9yKFwiRmF1Y2V0VHJhbnNhY3Rpb24gdGltZWQgb3V0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxvYWRzIHRoZSBGYXVjZXRUcmFuc2FjdGlvbiBtb2RlbCB3aXRoIHRoZSBsYXRlc3QgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RmF1Y2V0VHJhbnNhY3Rpb259IFRoZSByZWxvYWRlZCBGYXVjZXRUcmFuc2FjdGlvbiBvYmplY3QuXG4gICAgICogQHRocm93cyB7QVBJRXJyb3J9IGlmIHRoZSBBUEkgcmVxdWVzdCB0byBnZXQgYSBGYXVjZXRUcmFuc2FjdGlvbiBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyByZWxvYWQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5leHRlcm5hbEFkZHJlc3MuZ2V0RmF1Y2V0VHJhbnNhY3Rpb24odGhpcy50cmFuc2FjdGlvbi5nZXROZXR3b3JrSWQoKSwgdGhpcy5nZXRBZGRyZXNzSWQoKSwgdGhpcy5nZXRUcmFuc2FjdGlvbkhhc2goKSk7XG4gICAgICAgIHRoaXMubW9kZWwgPSByZXN1bHQ/LmRhdGE7XG4gICAgICAgIGlmICghdGhpcy5tb2RlbD8udHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhdWNldFRyYW5zYWN0aW9uIG1vZGVsIGNhbm5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbiA9IG5ldyB0cmFuc2FjdGlvbl8xLlRyYW5zYWN0aW9uKHRoaXMubW9kZWwudHJhbnNhY3Rpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQ29pbmJhc2U6OkZhdWNldFRyYW5zYWN0aW9ue3RyYW5zYWN0aW9uX2hhc2g6ICcke3RoaXMuZ2V0VHJhbnNhY3Rpb25IYXNoKCl9JywgdHJhbnNhY3Rpb25fbGluazogJyR7dGhpcy5nZXRUcmFuc2FjdGlvbkxpbmsoKX0nfWA7XG4gICAgfVxufVxuZXhwb3J0cy5GYXVjZXRUcmFuc2FjdGlvbiA9IEZhdWNldFRyYW5zYWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fiat_amount.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fiat_amount.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FiatAmount = void 0;\n/**\n * A representation of a FiatAmount that includes the amount and currency.\n */\nclass FiatAmount {\n    /**\n     * Initialize a new FiatAmount. Do not use this directly, use the fromModel method instead.\n     *\n     * @param amount - The amount in the fiat currency\n     * @param currency - The currency code (e.g. 'USD')\n     */\n    constructor(amount, currency) {\n        this.amount = amount;\n        this.currency = currency;\n    }\n    /**\n     * Convert a FiatAmount model to a FiatAmount.\n     *\n     * @param fiatAmountModel - The fiat amount from the API.\n     * @returns The converted FiatAmount object.\n     */\n    static fromModel(fiatAmountModel) {\n        return new FiatAmount(fiatAmountModel.amount, fiatAmountModel.currency);\n    }\n    /**\n     * Get the amount in the fiat currency.\n     *\n     * @returns The amount in the fiat currency.\n     */\n    getAmount() {\n        return this.amount;\n    }\n    /**\n     * Get the currency code.\n     *\n     * @returns The currency code.\n     */\n    getCurrency() {\n        return this.currency;\n    }\n    /**\n     * Get a string representation of the FiatAmount.\n     *\n     * @returns A string representation of the FiatAmount.\n     */\n    toString() {\n        return `FiatAmount(amount: '${this.amount}', currency: '${this.currency}')`;\n    }\n}\nexports.FiatAmount = FiatAmount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2ZpYXRfYW1vdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsWUFBWSxnQkFBZ0IsY0FBYztBQUNoRjtBQUNBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9maWF0X2Ftb3VudC5qcz8wNTk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWF0QW1vdW50ID0gdm9pZCAwO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgRmlhdEFtb3VudCB0aGF0IGluY2x1ZGVzIHRoZSBhbW91bnQgYW5kIGN1cnJlbmN5LlxuICovXG5jbGFzcyBGaWF0QW1vdW50IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGEgbmV3IEZpYXRBbW91bnQuIERvIG5vdCB1c2UgdGhpcyBkaXJlY3RseSwgdXNlIHRoZSBmcm9tTW9kZWwgbWV0aG9kIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBpbiB0aGUgZmlhdCBjdXJyZW5jeVxuICAgICAqIEBwYXJhbSBjdXJyZW5jeSAtIFRoZSBjdXJyZW5jeSBjb2RlIChlLmcuICdVU0QnKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFtb3VudCwgY3VycmVuY3kpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgICAgIHRoaXMuY3VycmVuY3kgPSBjdXJyZW5jeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIEZpYXRBbW91bnQgbW9kZWwgdG8gYSBGaWF0QW1vdW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpYXRBbW91bnRNb2RlbCAtIFRoZSBmaWF0IGFtb3VudCBmcm9tIHRoZSBBUEkuXG4gICAgICogQHJldHVybnMgVGhlIGNvbnZlcnRlZCBGaWF0QW1vdW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU1vZGVsKGZpYXRBbW91bnRNb2RlbCkge1xuICAgICAgICByZXR1cm4gbmV3IEZpYXRBbW91bnQoZmlhdEFtb3VudE1vZGVsLmFtb3VudCwgZmlhdEFtb3VudE1vZGVsLmN1cnJlbmN5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbW91bnQgaW4gdGhlIGZpYXQgY3VycmVuY3kuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgYW1vdW50IGluIHRoZSBmaWF0IGN1cnJlbmN5LlxuICAgICAqL1xuICAgIGdldEFtb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW1vdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbmN5IGNvZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgY3VycmVuY3kgY29kZS5cbiAgICAgKi9cbiAgICBnZXRDdXJyZW5jeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVuY3k7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmlhdEFtb3VudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBGaWF0QW1vdW50LlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYEZpYXRBbW91bnQoYW1vdW50OiAnJHt0aGlzLmFtb3VudH0nLCBjdXJyZW5jeTogJyR7dGhpcy5jdXJyZW5jeX0nKWA7XG4gICAgfVxufVxuZXhwb3J0cy5GaWF0QW1vdW50ID0gRmlhdEFtb3VudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fiat_amount.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FundOperation = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst crypto_amount_1 = __webpack_require__(/*! ./crypto_amount */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js\");\n/**\n * A representation of a Fund Operation.\n */\nclass FundOperation {\n    /**\n     * Creates a new FundOperation instance.\n     *\n     * @param model - The model representing the fund operation\n     */\n    constructor(model) {\n        this.asset = null;\n        this.model = model;\n    }\n    /**\n     * Converts a FundOperationModel into a FundOperation object.\n     *\n     * @param fundOperationModel - The FundOperation model object.\n     * @returns The FundOperation object.\n     */\n    static fromModel(fundOperationModel) {\n        return new FundOperation(fundOperationModel);\n    }\n    /**\n     * Create a new Fund Operation.\n     *\n     * @param walletId - The Wallet ID\n     * @param addressId - The Address ID\n     * @param amount - The amount of the Asset\n     * @param assetId - The Asset ID\n     * @param networkId - The Network ID\n     * @param quote - Optional Fund Quote\n     * @returns The new FundOperation object\n     */\n    static async create(walletId, addressId, amount, assetId, networkId, quote) {\n        const asset = await asset_1.Asset.fetch(networkId, assetId);\n        const createRequest = {\n            amount: asset.toAtomicAmount(amount).toString(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n        };\n        if (quote) {\n            Object.assign(createRequest, { fund_quote_id: quote.getId() });\n        }\n        const response = await coinbase_1.Coinbase.apiClients.fund.createFundOperation(walletId, addressId, createRequest);\n        return FundOperation.fromModel(response.data);\n    }\n    /**\n     * List fund operations.\n     *\n     * @param walletId - The wallet ID\n     * @param addressId - The address ID\n     * @param options - The pagination options\n     * @param options.limit - The maximum number of Fund Operations to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Fund Operations. Don't include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     * @returns The paginated list response of fund operations\n     */\n    static async listFundOperations(walletId, addressId, { limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.fund.listFundOperations(walletId, addressId, limit, page);\n        response.data.data.forEach(operationModel => {\n            data.push(FundOperation.fromModel(operationModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Gets the Fund Operation ID.\n     *\n     * @returns {string} The unique identifier of the fund operation\n     */\n    getId() {\n        return this.model.fund_operation_id;\n    }\n    /**\n     * Gets the Network ID.\n     *\n     * @returns {string} The network identifier\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Gets the Wallet ID.\n     *\n     * @returns {string} The wallet identifier\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Gets the Address ID.\n     *\n     * @returns {string} The address identifier\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Gets the Asset.\n     *\n     * @returns {Asset} The asset associated with this operation\n     */\n    getAsset() {\n        if (!this.asset) {\n            this.asset = asset_1.Asset.fromModel(this.model.crypto_amount.asset);\n        }\n        return this.asset;\n    }\n    /**\n     * Gets the amount.\n     *\n     * @returns {CryptoAmount} The crypto amount\n     */\n    getAmount() {\n        return crypto_amount_1.CryptoAmount.fromModel(this.model.crypto_amount);\n    }\n    /**\n     * Gets the fiat amount.\n     *\n     * @returns {Decimal} The fiat amount in decimal format\n     */\n    getFiatAmount() {\n        return new decimal_js_1.Decimal(this.model.fiat_amount.amount);\n    }\n    /**\n     * Gets the fiat currency.\n     *\n     * @returns {string} The fiat currency code\n     */\n    getFiatCurrency() {\n        return this.model.fiat_amount.currency;\n    }\n    /**\n     * Returns the Status of the Transfer.\n     *\n     * @returns The Status of the Transfer.\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.FundOperationStatus.PENDING:\n                return types_1.FundOperationStatus.PENDING;\n            case types_1.FundOperationStatus.COMPLETE:\n                return types_1.FundOperationStatus.COMPLETE;\n            case types_1.FundOperationStatus.FAILED:\n                return types_1.FundOperationStatus.FAILED;\n            default:\n                throw new Error(`Unknown fund operation status: ${this.model.status}`);\n        }\n    }\n    /**\n     * Reloads the fund operation from the server.\n     *\n     * @returns {Promise<FundOperation>} A promise that resolves to the updated fund operation\n     */\n    async reload() {\n        const response = await coinbase_1.Coinbase.apiClients.fund.getFundOperation(this.getWalletId(), this.getAddressId(), this.getId());\n        this.model = response.data;\n        return this;\n    }\n    /**\n     * Wait for the fund operation to complete.\n     *\n     * @param options - Options for waiting\n     * @param options.intervalSeconds - The interval between checks in seconds\n     * @param options.timeoutSeconds - The timeout in seconds\n     * @returns The completed fund operation\n     * @throws {TimeoutError} If the operation takes too long\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 20 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            if (this.isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Fund operation timed out\");\n    }\n    /**\n     * Check if the operation is in a terminal state.\n     *\n     * @returns {boolean} True if the operation is in a terminal state, false otherwise\n     */\n    isTerminalState() {\n        return FundOperation.Status.TERMINAL_STATES.has(this.getStatus());\n    }\n}\nexports.FundOperation = FundOperation;\n/**\n * Fund Operation status constants.\n */\nFundOperation.Status = {\n    TERMINAL_STATES: new Set([\"complete\", \"failed\"]),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_quote.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_quote.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FundQuote = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst crypto_amount_1 = __webpack_require__(/*! ./crypto_amount */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst fund_operation_1 = __webpack_require__(/*! ./fund_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js\");\n/**\n * A representation of a Fund Operation Quote.\n */\nclass FundQuote {\n    /**\n     * Creates a new FundQuote instance.\n     *\n     * @param model - The model representing the fund quote\n     */\n    constructor(model) {\n        this.asset = null;\n        this.model = model;\n    }\n    /**\n     * Converts a FundQuoteModel into a FundQuote object.\n     *\n     * @param fundQuoteModel - The FundQuote model object.\n     * @returns The FundQuote object.\n     */\n    static fromModel(fundQuoteModel) {\n        return new FundQuote(fundQuoteModel);\n    }\n    /**\n     * Create a new Fund Operation Quote.\n     *\n     * @param walletId - The Wallet ID\n     * @param addressId - The Address ID\n     * @param amount - The amount of the Asset\n     * @param assetId - The Asset ID\n     * @param networkId - The Network ID\n     * @returns The new FundQuote object\n     */\n    static async create(walletId, addressId, amount, assetId, networkId) {\n        const asset = await asset_1.Asset.fetch(networkId, assetId);\n        const response = await coinbase_1.Coinbase.apiClients.fund.createFundQuote(walletId, addressId, {\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            amount: asset.toAtomicAmount(amount).toString(),\n        });\n        return FundQuote.fromModel(response.data);\n    }\n    /**\n     * Gets the Fund Quote ID.\n     *\n     * @returns {string} The unique identifier of the fund quote\n     */\n    getId() {\n        return this.model.fund_quote_id;\n    }\n    /**\n     * Gets the Network ID.\n     *\n     * @returns {string} The network identifier\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Gets the Wallet ID.\n     *\n     * @returns {string} The wallet identifier\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Gets the Address ID.\n     *\n     * @returns {string} The address identifier\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Gets the Asset.\n     *\n     * @returns {Asset} The asset associated with this quote\n     */\n    getAsset() {\n        if (!this.asset) {\n            this.asset = asset_1.Asset.fromModel(this.model.crypto_amount.asset);\n        }\n        return this.asset;\n    }\n    /**\n     * Gets the crypto amount.\n     *\n     * @returns {CryptoAmount} The cryptocurrency amount\n     */\n    getAmount() {\n        return crypto_amount_1.CryptoAmount.fromModel(this.model.crypto_amount);\n    }\n    /**\n     * Gets the fiat amount.\n     *\n     * @returns {Decimal} The fiat amount in decimal format\n     */\n    getFiatAmount() {\n        return new decimal_js_1.Decimal(this.model.fiat_amount.amount);\n    }\n    /**\n     * Gets the fiat currency.\n     *\n     * @returns {string} The fiat currency code\n     */\n    getFiatCurrency() {\n        return this.model.fiat_amount.currency;\n    }\n    /**\n     * Gets the buy fee.\n     *\n     * @returns {{ amount: string; currency: string }} The buy fee amount and currency\n     */\n    getBuyFee() {\n        return {\n            amount: this.model.fees.buy_fee.amount,\n            currency: this.model.fees.buy_fee.currency,\n        };\n    }\n    /**\n     * Gets the transfer fee.\n     *\n     * @returns {CryptoAmount} The transfer fee as a crypto amount\n     */\n    getTransferFee() {\n        return crypto_amount_1.CryptoAmount.fromModel(this.model.fees.transfer_fee);\n    }\n    /**\n     * Execute the fund quote to create a fund operation.\n     *\n     * @returns {Promise<FundOperation>} A promise that resolves to the created fund operation\n     */\n    async execute() {\n        return fund_operation_1.FundOperation.create(this.getWalletId(), this.getAddressId(), this.getAmount().getAmount(), this.getAsset().getAssetId(), this.getNetworkId(), this);\n    }\n}\nexports.FundQuote = FundQuote;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2Z1bmRfcXVvdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLHFCQUFxQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFTO0FBQ2pDLHdCQUF3QixtQkFBTyxDQUFDLG1HQUFpQjtBQUNqRCxtQkFBbUIsbUJBQU8sQ0FBQyx5RkFBWTtBQUN2Qyx5QkFBeUIsbUJBQU8sQ0FBQyxxR0FBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCLG9CQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9mdW5kX3F1b3RlLmpzPzgyOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZ1bmRRdW90ZSA9IHZvaWQgMDtcbmNvbnN0IGRlY2ltYWxfanNfMSA9IHJlcXVpcmUoXCJkZWNpbWFsLmpzXCIpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuY29uc3QgY3J5cHRvX2Ftb3VudF8xID0gcmVxdWlyZShcIi4vY3J5cHRvX2Ftb3VudFwiKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbmNvbnN0IGZ1bmRfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9mdW5kX29wZXJhdGlvblwiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIEZ1bmQgT3BlcmF0aW9uIFF1b3RlLlxuICovXG5jbGFzcyBGdW5kUXVvdGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRnVuZFF1b3RlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIG1vZGVsIHJlcHJlc2VudGluZyB0aGUgZnVuZCBxdW90ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGVsKSB7XG4gICAgICAgIHRoaXMuYXNzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgRnVuZFF1b3RlTW9kZWwgaW50byBhIEZ1bmRRdW90ZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuZFF1b3RlTW9kZWwgLSBUaGUgRnVuZFF1b3RlIG1vZGVsIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBUaGUgRnVuZFF1b3RlIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU1vZGVsKGZ1bmRRdW90ZU1vZGVsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuZFF1b3RlKGZ1bmRRdW90ZU1vZGVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEZ1bmQgT3BlcmF0aW9uIFF1b3RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHdhbGxldElkIC0gVGhlIFdhbGxldCBJRFxuICAgICAqIEBwYXJhbSBhZGRyZXNzSWQgLSBUaGUgQWRkcmVzcyBJRFxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIHRoZSBBc3NldFxuICAgICAqIEBwYXJhbSBhc3NldElkIC0gVGhlIEFzc2V0IElEXG4gICAgICogQHBhcmFtIG5ldHdvcmtJZCAtIFRoZSBOZXR3b3JrIElEXG4gICAgICogQHJldHVybnMgVGhlIG5ldyBGdW5kUXVvdGUgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZSh3YWxsZXRJZCwgYWRkcmVzc0lkLCBhbW91bnQsIGFzc2V0SWQsIG5ldHdvcmtJZCkge1xuICAgICAgICBjb25zdCBhc3NldCA9IGF3YWl0IGFzc2V0XzEuQXNzZXQuZmV0Y2gobmV0d29ya0lkLCBhc3NldElkKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuZnVuZC5jcmVhdGVGdW5kUXVvdGUod2FsbGV0SWQsIGFkZHJlc3NJZCwge1xuICAgICAgICAgICAgYXNzZXRfaWQ6IGFzc2V0XzEuQXNzZXQucHJpbWFyeURlbm9taW5hdGlvbihhc3NldElkKSxcbiAgICAgICAgICAgIGFtb3VudDogYXNzZXQudG9BdG9taWNBbW91bnQoYW1vdW50KS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEZ1bmRRdW90ZS5mcm9tTW9kZWwocmVzcG9uc2UuZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEZ1bmQgUXVvdGUgSUQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGZ1bmQgcXVvdGVcbiAgICAgKi9cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZnVuZF9xdW90ZV9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgTmV0d29yayBJRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBuZXR3b3JrIGlkZW50aWZpZXJcbiAgICAgKi9cbiAgICBnZXROZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLm5ldHdvcmtfaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFdhbGxldCBJRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB3YWxsZXQgaWRlbnRpZmllclxuICAgICAqL1xuICAgIGdldFdhbGxldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC53YWxsZXRfaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEFkZHJlc3MgSUQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYWRkcmVzcyBpZGVudGlmaWVyXG4gICAgICovXG4gICAgZ2V0QWRkcmVzc0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5hZGRyZXNzX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBBc3NldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBc3NldH0gVGhlIGFzc2V0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHF1b3RlXG4gICAgICovXG4gICAgZ2V0QXNzZXQoKSB7XG4gICAgICAgIGlmICghdGhpcy5hc3NldCkge1xuICAgICAgICAgICAgdGhpcy5hc3NldCA9IGFzc2V0XzEuQXNzZXQuZnJvbU1vZGVsKHRoaXMubW9kZWwuY3J5cHRvX2Ftb3VudC5hc3NldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNyeXB0byBhbW91bnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Q3J5cHRvQW1vdW50fSBUaGUgY3J5cHRvY3VycmVuY3kgYW1vdW50XG4gICAgICovXG4gICAgZ2V0QW1vdW50KCkge1xuICAgICAgICByZXR1cm4gY3J5cHRvX2Ftb3VudF8xLkNyeXB0b0Ftb3VudC5mcm9tTW9kZWwodGhpcy5tb2RlbC5jcnlwdG9fYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlhdCBhbW91bnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RGVjaW1hbH0gVGhlIGZpYXQgYW1vdW50IGluIGRlY2ltYWwgZm9ybWF0XG4gICAgICovXG4gICAgZ2V0RmlhdEFtb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNpbWFsX2pzXzEuRGVjaW1hbCh0aGlzLm1vZGVsLmZpYXRfYW1vdW50LmFtb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpYXQgY3VycmVuY3kuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZmlhdCBjdXJyZW5jeSBjb2RlXG4gICAgICovXG4gICAgZ2V0RmlhdEN1cnJlbmN5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5maWF0X2Ftb3VudC5jdXJyZW5jeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYnV5IGZlZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt7IGFtb3VudDogc3RyaW5nOyBjdXJyZW5jeTogc3RyaW5nIH19IFRoZSBidXkgZmVlIGFtb3VudCBhbmQgY3VycmVuY3lcbiAgICAgKi9cbiAgICBnZXRCdXlGZWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbW91bnQ6IHRoaXMubW9kZWwuZmVlcy5idXlfZmVlLmFtb3VudCxcbiAgICAgICAgICAgIGN1cnJlbmN5OiB0aGlzLm1vZGVsLmZlZXMuYnV5X2ZlZS5jdXJyZW5jeSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdHJhbnNmZXIgZmVlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0NyeXB0b0Ftb3VudH0gVGhlIHRyYW5zZmVyIGZlZSBhcyBhIGNyeXB0byBhbW91bnRcbiAgICAgKi9cbiAgICBnZXRUcmFuc2ZlckZlZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0b19hbW91bnRfMS5DcnlwdG9BbW91bnQuZnJvbU1vZGVsKHRoaXMubW9kZWwuZmVlcy50cmFuc2Zlcl9mZWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBmdW5kIHF1b3RlIHRvIGNyZWF0ZSBhIGZ1bmQgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuZE9wZXJhdGlvbj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBjcmVhdGVkIGZ1bmQgb3BlcmF0aW9uXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmRfb3BlcmF0aW9uXzEuRnVuZE9wZXJhdGlvbi5jcmVhdGUodGhpcy5nZXRXYWxsZXRJZCgpLCB0aGlzLmdldEFkZHJlc3NJZCgpLCB0aGlzLmdldEFtb3VudCgpLmdldEFtb3VudCgpLCB0aGlzLmdldEFzc2V0KCkuZ2V0QXNzZXRJZCgpLCB0aGlzLmdldE5ldHdvcmtJZCgpLCB0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLkZ1bmRRdW90ZSA9IEZ1bmRRdW90ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_quote.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashTypedDataMessage = exports.hashMessage = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\n/**\n * Computes the EIP-191 personal-sign message digest to sign.\n *\n * @returns The EIP-191 hash of the message as a string.\n * @throws {Error} if the message cannot be hashed.\n * @param message - The message to hash.\n */\nconst hashMessage = (message) => {\n    return ethers_1.ethers.hashMessage(message);\n};\nexports.hashMessage = hashMessage;\n/**\n * Computes the hash of the EIP-712 compliant typed data message.\n *\n * @param domain - The domain parameters for the EIP-712 message, including the name, version, chainId, and verifying contract.\n * @param types - The types definitions for the EIP-712 message, represented as a record of type names to their fields.\n * @param value - The actual data object to hash, conforming to the types defined.\n *\n * @returns The EIP-712 hash of the typed data as a hex-encoded string.\n * @throws {Error} if the typed data cannot be hashed.\n */\nconst hashTypedDataMessage = (domain, types, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue) => {\n    return ethers_1.ethers.TypedDataEncoder.hash(domain, types, value);\n};\nexports.hashTypedDataMessage = hashTypedDataMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLGlFQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hhc2guanM/OGIyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFR5cGVkRGF0YU1lc3NhZ2UgPSBleHBvcnRzLmhhc2hNZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuLyoqXG4gKiBDb21wdXRlcyB0aGUgRUlQLTE5MSBwZXJzb25hbC1zaWduIG1lc3NhZ2UgZGlnZXN0IHRvIHNpZ24uXG4gKlxuICogQHJldHVybnMgVGhlIEVJUC0xOTEgaGFzaCBvZiB0aGUgbWVzc2FnZSBhcyBhIHN0cmluZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgbWVzc2FnZSBjYW5ub3QgYmUgaGFzaGVkLlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuICovXG5jb25zdCBoYXNoTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIGV0aGVyc18xLmV0aGVycy5oYXNoTWVzc2FnZShtZXNzYWdlKTtcbn07XG5leHBvcnRzLmhhc2hNZXNzYWdlID0gaGFzaE1lc3NhZ2U7XG4vKipcbiAqIENvbXB1dGVzIHRoZSBoYXNoIG9mIHRoZSBFSVAtNzEyIGNvbXBsaWFudCB0eXBlZCBkYXRhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIGRvbWFpbiAtIFRoZSBkb21haW4gcGFyYW1ldGVycyBmb3IgdGhlIEVJUC03MTIgbWVzc2FnZSwgaW5jbHVkaW5nIHRoZSBuYW1lLCB2ZXJzaW9uLCBjaGFpbklkLCBhbmQgdmVyaWZ5aW5nIGNvbnRyYWN0LlxuICogQHBhcmFtIHR5cGVzIC0gVGhlIHR5cGVzIGRlZmluaXRpb25zIGZvciB0aGUgRUlQLTcxMiBtZXNzYWdlLCByZXByZXNlbnRlZCBhcyBhIHJlY29yZCBvZiB0eXBlIG5hbWVzIHRvIHRoZWlyIGZpZWxkcy5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBhY3R1YWwgZGF0YSBvYmplY3QgdG8gaGFzaCwgY29uZm9ybWluZyB0byB0aGUgdHlwZXMgZGVmaW5lZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgRUlQLTcxMiBoYXNoIG9mIHRoZSB0eXBlZCBkYXRhIGFzIGEgaGV4LWVuY29kZWQgc3RyaW5nLlxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSB0eXBlZCBkYXRhIGNhbm5vdCBiZSBoYXNoZWQuXG4gKi9cbmNvbnN0IGhhc2hUeXBlZERhdGFNZXNzYWdlID0gKGRvbWFpbiwgdHlwZXMsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGV0aGVyc18xLmV0aGVycy5UeXBlZERhdGFFbmNvZGVyLmhhc2goZG9tYWluLCB0eXBlcywgdmFsdWUpO1xufTtcbmV4cG9ydHMuaGFzaFR5cGVkRGF0YU1lc3NhZ2UgPSBoYXNoVHlwZWREYXRhTWVzc2FnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HistoricalBalance = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\n/** A representation of historical balance. */\nclass HistoricalBalance {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param {Decimal} amount - The amount of the balance.\n     * @param {Decimal} blockHeight - The block height at which the balance was recorded.\n     * @param {string} blockHash - The block hash at which the balance was recorded\n     * @param {string} asset - The asset we want to fetch.\n     * @hideconstructor\n     */\n    constructor(amount, blockHeight, blockHash, asset) {\n        this.amount = amount;\n        this.blockHeight = blockHeight;\n        this.blockHash = blockHash;\n        this.asset = asset;\n    }\n    /**\n     * Converts a HistoricalBalanceModel into a HistoricalBalance object.\n     *\n     * @param {HistoricalBalanceModel} model - The historical balance model object.\n     * @returns {HistoricalBalance} The HistoricalBalance object.\n     */\n    static fromModel(model) {\n        const asset = asset_1.Asset.fromModel(model.asset);\n        return new HistoricalBalance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), new decimal_js_1.default(model.block_height), model.block_hash, asset);\n    }\n}\nexports.HistoricalBalance = HistoricalBalance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hpc3RvcmljYWxfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixxQ0FBcUMsbUJBQU8sQ0FBQyw4REFBWTtBQUN6RCxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0JBQXdCO0FBQ3ZDLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9oaXN0b3JpY2FsX2JhbGFuY2UuanM/OWM1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGlzdG9yaWNhbEJhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBkZWNpbWFsX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanNcIikpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuLyoqIEEgcmVwcmVzZW50YXRpb24gb2YgaGlzdG9yaWNhbCBiYWxhbmNlLiAqL1xuY2xhc3MgSGlzdG9yaWNhbEJhbGFuY2Uge1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgY29uc3RydWN0b3IgdG8gcHJldmVudCBkaXJlY3QgaW5zdGFudGlhdGlvbiBvdXRzaWRlIG9mIHRoZSBmYWN0b3J5IG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAaWdub3JlXG4gICAgICogQHBhcmFtIHtEZWNpbWFsfSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIHRoZSBiYWxhbmNlLlxuICAgICAqIEBwYXJhbSB7RGVjaW1hbH0gYmxvY2tIZWlnaHQgLSBUaGUgYmxvY2sgaGVpZ2h0IGF0IHdoaWNoIHRoZSBiYWxhbmNlIHdhcyByZWNvcmRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmxvY2tIYXNoIC0gVGhlIGJsb2NrIGhhc2ggYXQgd2hpY2ggdGhlIGJhbGFuY2Ugd2FzIHJlY29yZGVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFzc2V0IC0gVGhlIGFzc2V0IHdlIHdhbnQgdG8gZmV0Y2guXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFtb3VudCwgYmxvY2tIZWlnaHQsIGJsb2NrSGFzaCwgYXNzZXQpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgICAgIHRoaXMuYmxvY2tIZWlnaHQgPSBibG9ja0hlaWdodDtcbiAgICAgICAgdGhpcy5ibG9ja0hhc2ggPSBibG9ja0hhc2g7XG4gICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBIaXN0b3JpY2FsQmFsYW5jZU1vZGVsIGludG8gYSBIaXN0b3JpY2FsQmFsYW5jZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hpc3RvcmljYWxCYWxhbmNlTW9kZWx9IG1vZGVsIC0gVGhlIGhpc3RvcmljYWwgYmFsYW5jZSBtb2RlbCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0hpc3RvcmljYWxCYWxhbmNlfSBUaGUgSGlzdG9yaWNhbEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW9kZWwobW9kZWwpIHtcbiAgICAgICAgY29uc3QgYXNzZXQgPSBhc3NldF8xLkFzc2V0LmZyb21Nb2RlbChtb2RlbC5hc3NldCk7XG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9yaWNhbEJhbGFuY2UoYXNzZXQuZnJvbUF0b21pY0Ftb3VudChuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQobW9kZWwuYW1vdW50KSksIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdChtb2RlbC5ibG9ja19oZWlnaHQpLCBtb2RlbC5ibG9ja19oYXNoLCBhc3NldCk7XG4gICAgfVxufVxuZXhwb3J0cy5IaXN0b3JpY2FsQmFsYW5jZSA9IEhpc3RvcmljYWxCYWxhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PayloadSignature = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Payload Signature.\n */\nclass PayloadSignature {\n    /**\n     * Constructs a Payload Signature.\n     *\n     * @class\n     * @param model - The underlying Payload Signature object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the ID of the Payload Signature.\n     *\n     * @returns The ID of the Payload Signature\n     */\n    getId() {\n        return this.model.payload_signature_id;\n    }\n    /**\n     * Returns the Wallet ID of the Payload Signature.\n     *\n     * @returns The Wallet ID\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID of the Payload Signature.\n     *\n     * @returns The Address ID\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Unsigned Payload of the Payload Signature.\n     *\n     * @returns The Unsigned Payload\n     */\n    getUnsignedPayload() {\n        return this.model.unsigned_payload;\n    }\n    /**\n     * Returns the Signature of the Payload Signature.\n     *\n     * @returns The Signature\n     */\n    getSignature() {\n        return this.model.signature;\n    }\n    /**\n     * Returns the Status of the Payload Signature.\n     *\n     * @returns The Status\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.PayloadSignatureStatus.PENDING:\n                return types_1.PayloadSignatureStatus.PENDING;\n            case types_1.PayloadSignatureStatus.SIGNED:\n                return types_1.PayloadSignatureStatus.SIGNED;\n            case types_1.PayloadSignatureStatus.FAILED:\n                return types_1.PayloadSignatureStatus.FAILED;\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * Returns whether the Payload Signature is in a terminal State.\n     *\n     * @returns Whether the Payload Signature is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        if (!status)\n            return false;\n        return [types_1.PayloadSignatureStatus.SIGNED, types_1.PayloadSignatureStatus.FAILED].includes(status);\n    }\n    /**\n     * Waits for the Payload Signature to be signed or for the signature operation to fail.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the Payload Signature.\n     * @param options.timeoutSeconds - The maximum time to wait for the Payload Signature to be confirmed.\n     *\n     * @returns The Payload Signature object in a terminal state.\n     * @throws {Error} if the Payload Signature times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the Payload Signature is in a terminal state, return the Payload Signature.\n            if (this.isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Payload Signature timed out\");\n    }\n    /**\n     * Reloads the Payload Signature model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Payload Signature fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.address.getPayloadSignature(this.getWalletId(), this.getAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the Payload Signature.\n     *\n     * @returns A string representation of the Payload Signature.\n     */\n    toString() {\n        return `PayloadSignature { status: '${this.getStatus()}', unsignedPayload: '${this.getUnsignedPayload()}', signature: ${this.getSignature()} }`;\n    }\n}\nexports.PayloadSignature = PayloadSignature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3BheWxvYWRfc2lnbmF0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBVTtBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx5RkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxpQkFBaUIsOENBQThDLElBQUk7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVyxpQkFBaUIsdUJBQXVCLDBCQUEwQixnQkFBZ0Isc0JBQXNCO0FBQ3RKO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3BheWxvYWRfc2lnbmF0dXJlLmpzPzA3NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBheWxvYWRTaWduYXR1cmUgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIFBheWxvYWQgU2lnbmF0dXJlLlxuICovXG5jbGFzcyBQYXlsb2FkU2lnbmF0dXJlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAcGFyYW0gbW9kZWwgLSBUaGUgdW5kZXJseWluZyBQYXlsb2FkIFNpZ25hdHVyZSBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtb2RlbCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZVxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5wYXlsb2FkX3NpZ25hdHVyZV9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgV2FsbGV0IElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBXYWxsZXQgSURcbiAgICAgKi9cbiAgICBnZXRXYWxsZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwud2FsbGV0X2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBBZGRyZXNzIElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBBZGRyZXNzIElEXG4gICAgICovXG4gICAgZ2V0QWRkcmVzc0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5hZGRyZXNzX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBVbnNpZ25lZCBQYXlsb2FkIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBVbnNpZ25lZCBQYXlsb2FkXG4gICAgICovXG4gICAgZ2V0VW5zaWduZWRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC51bnNpZ25lZF9wYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTaWduYXR1cmUgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFNpZ25hdHVyZVxuICAgICAqL1xuICAgIGdldFNpZ25hdHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFN0YXR1c1xuICAgICAqL1xuICAgIGdldFN0YXR1cygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGVsLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlBheWxvYWRTaWduYXR1cmVTdGF0dXMuUEVORElORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLlBFTkRJTkc7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5TSUdORUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5TSUdORUQ7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5GQUlMRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5GQUlMRUQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSBpcyBpbiBhIHRlcm1pbmFsIFN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgUGF5bG9hZCBTaWduYXR1cmUgaXMgaW4gYSB0ZXJtaW5hbCBTdGF0ZVxuICAgICAqL1xuICAgIGlzVGVybWluYWxTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5nZXRTdGF0dXMoKTtcbiAgICAgICAgaWYgKCFzdGF0dXMpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBbdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLlNJR05FRCwgdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLkZBSUxFRF0uaW5jbHVkZXMoc3RhdHVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdHMgZm9yIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0byBiZSBzaWduZWQgb3IgZm9yIHRoZSBzaWduYXR1cmUgb3BlcmF0aW9uIHRvIGZhaWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgd2FpdCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5pbnRlcnZhbFNlY29uZHMgLSBUaGUgaW50ZXJ2YWwgdG8gY2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudGltZW91dFNlY29uZHMgLSBUaGUgbWF4aW11bSB0aW1lIHRvIHdhaXQgZm9yIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0byBiZSBjb25maXJtZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgUGF5bG9hZCBTaWduYXR1cmUgb2JqZWN0IGluIGEgdGVybWluYWwgc3RhdGUuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0aW1lcyBvdXQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdCh7IGludGVydmFsU2Vjb25kcyA9IDAuMiwgdGltZW91dFNlY29uZHMgPSAxMCwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgdGltZW91dFNlY29uZHMgKiAxMDAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIFBheWxvYWQgU2lnbmF0dXJlIGlzIGluIGEgdGVybWluYWwgc3RhdGUsIHJldHVybiB0aGUgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Rlcm1pbmFsU3RhdGUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgKDAsIHV0aWxzXzEuZGVsYXkpKGludGVydmFsU2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlRpbWVvdXRFcnJvcihcIlBheWxvYWQgU2lnbmF0dXJlIHRpbWVkIG91dFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsb2FkcyB0aGUgUGF5bG9hZCBTaWduYXR1cmUgbW9kZWwgd2l0aCB0aGUgbGF0ZXN0IGRhdGEgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHRocm93cyB7QVBJRXJyb3J9IGlmIHRoZSBBUEkgcmVxdWVzdCB0byBnZXQgYSBQYXlsb2FkIFNpZ25hdHVyZSBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyByZWxvYWQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5hZGRyZXNzLmdldFBheWxvYWRTaWduYXR1cmUodGhpcy5nZXRXYWxsZXRJZCgpLCB0aGlzLmdldEFkZHJlc3NJZCgpLCB0aGlzLmdldElkKCkpO1xuICAgICAgICB0aGlzLm1vZGVsID0gcmVzdWx0Py5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBQYXlsb2FkU2lnbmF0dXJlIHsgc3RhdHVzOiAnJHt0aGlzLmdldFN0YXR1cygpfScsIHVuc2lnbmVkUGF5bG9hZDogJyR7dGhpcy5nZXRVbnNpZ25lZFBheWxvYWQoKX0nLCBzaWduYXR1cmU6ICR7dGhpcy5nZXRTaWduYXR1cmUoKX0gfWA7XG4gICAgfVxufVxuZXhwb3J0cy5QYXlsb2FkU2lnbmF0dXJlID0gUGF5bG9hZFNpZ25hdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readContract = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * Converts a SolidityValue to its corresponding JavaScript type.\n *\n * @param {SolidityValue} solidityValue - The Solidity value to convert.\n * @returns {unknown} The converted JavaScript value.\n */\nfunction convertSolidityValue(solidityValue) {\n    const { type, value, values } = solidityValue;\n    switch (type) {\n        case \"uint8\":\n        case \"uint16\":\n        case \"uint32\":\n        case \"int8\":\n        case \"int16\":\n        case \"int32\":\n            return Number(value);\n        case \"uint64\":\n        case \"uint128\":\n        case \"uint256\":\n        case \"int64\":\n        case \"int128\":\n        case \"int256\":\n            return BigInt(value);\n        case \"address\":\n            return value;\n        case \"bool\":\n            return value === \"true\";\n        case \"string\":\n            return value;\n        case \"bytes\":\n        case \"bytes1\":\n        case \"bytes2\":\n        case \"bytes3\":\n        case \"bytes4\":\n        case \"bytes5\":\n        case \"bytes6\":\n        case \"bytes7\":\n        case \"bytes8\":\n        case \"bytes9\":\n        case \"bytes10\":\n        case \"bytes11\":\n        case \"bytes12\":\n        case \"bytes13\":\n        case \"bytes14\":\n        case \"bytes15\":\n        case \"bytes16\":\n        case \"bytes17\":\n        case \"bytes18\":\n        case \"bytes19\":\n        case \"bytes20\":\n        case \"bytes21\":\n        case \"bytes22\":\n        case \"bytes23\":\n        case \"bytes24\":\n        case \"bytes25\":\n        case \"bytes26\":\n        case \"bytes27\":\n        case \"bytes28\":\n        case \"bytes29\":\n        case \"bytes30\":\n        case \"bytes31\":\n        case \"bytes32\":\n            return value;\n        case \"array\":\n            return values.map(convertSolidityValue);\n        case \"tuple\":\n            return values.reduce((acc, val) => {\n                if (!val.name) {\n                    throw new Error(\"Tuple field missing name\");\n                }\n                acc[val.name] = convertSolidityValue(val);\n                return acc;\n            }, {});\n        default:\n            throw new Error(`Unsupported Solidity type: ${type}`);\n    }\n}\n/**\n * Parses a SolidityValue to a specific type T.\n *\n * @template T\n * @param {SolidityValue} solidityValue - The Solidity value to parse.\n * @returns {T} The parsed value of type T.\n */\nfunction parseSolidityValue(solidityValue) {\n    return convertSolidityValue(solidityValue);\n}\n/**\n * Reads data from a smart contract using the Coinbase API.\n *\n * @template TAbi - The ABI type.\n * @template TFunctionName - The contract function name type.\n * @template TArgs - The function arguments type.\n * @param {object} params - The parameters for reading the contract.\n * @param {string} params.networkId - The network ID.\n * @param {string} params.contractAddress - The contract address (as a hexadecimal string).\n * @param {TFunctionName} params.method - The contract method to call.\n * @param {TArgs} params.args - The arguments for the contract method.\n * @param {TAbi} [params.abi] - The contract ABI (optional).\n * @returns {Promise<any>} The result of the contract call.\n */\nasync function readContract(params) {\n    const response = await coinbase_1.Coinbase.apiClients.smartContract.readContract(params.networkId, params.contractAddress, {\n        method: params.method,\n        args: JSON.stringify(params.args || {}),\n        abi: params.abi ? JSON.stringify(params.abi) : undefined,\n    });\n    return parseSolidityValue(response.data);\n}\nexports.readContract = readContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3JlYWRfY29udHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0EsMERBQTBELEtBQUs7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLE9BQU87QUFDbEIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9yZWFkX2NvbnRyYWN0LmpzP2ExYWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlYWRDb250cmFjdCA9IHZvaWQgMDtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbi8qKlxuICogQ29udmVydHMgYSBTb2xpZGl0eVZhbHVlIHRvIGl0cyBjb3JyZXNwb25kaW5nIEphdmFTY3JpcHQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1NvbGlkaXR5VmFsdWV9IHNvbGlkaXR5VmFsdWUgLSBUaGUgU29saWRpdHkgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHt1bmtub3dufSBUaGUgY29udmVydGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRTb2xpZGl0eVZhbHVlKHNvbGlkaXR5VmFsdWUpIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlLCB2YWx1ZXMgfSA9IHNvbGlkaXR5VmFsdWU7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ1aW50OFwiOlxuICAgICAgICBjYXNlIFwidWludDE2XCI6XG4gICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIGNhc2UgXCJpbnQzMlwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgY2FzZSBcInVpbnQxMjhcIjpcbiAgICAgICAgY2FzZSBcInVpbnQyNTZcIjpcbiAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIGNhc2UgXCJpbnQxMjhcIjpcbiAgICAgICAgY2FzZSBcImludDI1NlwiOlxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IFwidHJ1ZVwiO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxXCI6XG4gICAgICAgIGNhc2UgXCJieXRlczJcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXM0XCI6XG4gICAgICAgIGNhc2UgXCJieXRlczVcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXM3XCI6XG4gICAgICAgIGNhc2UgXCJieXRlczhcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxN1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxOFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyN1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyOFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMlwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGNvbnZlcnRTb2xpZGl0eVZhbHVlKTtcbiAgICAgICAgY2FzZSBcInR1cGxlXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLnJlZHVjZSgoYWNjLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR1cGxlIGZpZWxkIG1pc3NpbmcgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjW3ZhbC5uYW1lXSA9IGNvbnZlcnRTb2xpZGl0eVZhbHVlKHZhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgU29saWRpdHkgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbn1cbi8qKlxuICogUGFyc2VzIGEgU29saWRpdHlWYWx1ZSB0byBhIHNwZWNpZmljIHR5cGUgVC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTb2xpZGl0eVZhbHVlfSBzb2xpZGl0eVZhbHVlIC0gVGhlIFNvbGlkaXR5IHZhbHVlIHRvIHBhcnNlLlxuICogQHJldHVybnMge1R9IFRoZSBwYXJzZWQgdmFsdWUgb2YgdHlwZSBULlxuICovXG5mdW5jdGlvbiBwYXJzZVNvbGlkaXR5VmFsdWUoc29saWRpdHlWYWx1ZSkge1xuICAgIHJldHVybiBjb252ZXJ0U29saWRpdHlWYWx1ZShzb2xpZGl0eVZhbHVlKTtcbn1cbi8qKlxuICogUmVhZHMgZGF0YSBmcm9tIGEgc21hcnQgY29udHJhY3QgdXNpbmcgdGhlIENvaW5iYXNlIEFQSS5cbiAqXG4gKiBAdGVtcGxhdGUgVEFiaSAtIFRoZSBBQkkgdHlwZS5cbiAqIEB0ZW1wbGF0ZSBURnVuY3Rpb25OYW1lIC0gVGhlIGNvbnRyYWN0IGZ1bmN0aW9uIG5hbWUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSBUQXJncyAtIFRoZSBmdW5jdGlvbiBhcmd1bWVudHMgdHlwZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyBmb3IgcmVhZGluZyB0aGUgY29udHJhY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLm5ldHdvcmtJZCAtIFRoZSBuZXR3b3JrIElELlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jb250cmFjdEFkZHJlc3MgLSBUaGUgY29udHJhY3QgYWRkcmVzcyAoYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmcpLlxuICogQHBhcmFtIHtURnVuY3Rpb25OYW1lfSBwYXJhbXMubWV0aG9kIC0gVGhlIGNvbnRyYWN0IG1ldGhvZCB0byBjYWxsLlxuICogQHBhcmFtIHtUQXJnc30gcGFyYW1zLmFyZ3MgLSBUaGUgYXJndW1lbnRzIGZvciB0aGUgY29udHJhY3QgbWV0aG9kLlxuICogQHBhcmFtIHtUQWJpfSBbcGFyYW1zLmFiaV0gLSBUaGUgY29udHJhY3QgQUJJIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBUaGUgcmVzdWx0IG9mIHRoZSBjb250cmFjdCBjYWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiByZWFkQ29udHJhY3QocGFyYW1zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuc21hcnRDb250cmFjdC5yZWFkQ29udHJhY3QocGFyYW1zLm5ldHdvcmtJZCwgcGFyYW1zLmNvbnRyYWN0QWRkcmVzcywge1xuICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgIGFyZ3M6IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5hcmdzIHx8IHt9KSxcbiAgICAgICAgYWJpOiBwYXJhbXMuYWJpID8gSlNPTi5zdHJpbmdpZnkocGFyYW1zLmFiaSkgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlU29saWRpdHlWYWx1ZShyZXNwb25zZS5kYXRhKTtcbn1cbmV4cG9ydHMucmVhZENvbnRyYWN0ID0gcmVhZENvbnRyYWN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerSigner = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Server-Signer. Server-Signers are assigned to sign transactions for a Wallet.\n */\nclass ServerSigner {\n    /**\n     * Private constructor to prevent direct instantiation outside of factory method.\n     * Creates a new ServerSigner instance.\n     * Do not use this method directly. Instead, use ServerSigner.getDefault().\n     *\n     * @ignore\n     * @param serverSignerModel - The Server-Signer model.\n     * @hideconstructor\n     */\n    constructor(serverSignerModel) {\n        this.model = serverSignerModel;\n    }\n    /**\n     * Returns the default Server-Signer for the CDP Project.\n     *\n     * @returns The default Server-Signer.\n     * @throws {APIError} if the API request to list Server-Signers fails.\n     * @throws {Error} if there is no Server-Signer associated with the CDP Project.\n     */\n    static async getDefault() {\n        const response = await coinbase_1.Coinbase.apiClients.serverSigner.listServerSigners();\n        if (response.data.data.length === 0) {\n            throw new Error(\"No Server-Signer is associated with the project\");\n        }\n        return new ServerSigner(response.data.data[0]);\n    }\n    /**\n     * Returns the ID of the Server-Signer.\n     *\n     * @returns The Server-Signer ID.\n     */\n    getId() {\n        return this.model.server_signer_id;\n    }\n    /**\n     * Returns the IDs of the Wallet's the Server-Signer can sign for.\n     *\n     * @returns The Wallet IDs.\n     */\n    getWallets() {\n        return this.model.wallets;\n    }\n    /**\n     * Returns a String representation of the Server-Signer.\n     *\n     * @returns a String representation of the Server-Signer.\n     */\n    toString() {\n        return `ServerSigner{id: '${this.getId()}', wallets: '${this.getWallets()}'}`;\n    }\n}\nexports.ServerSigner = ServerSigner;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3NlcnZlcl9zaWduZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsT0FBTyxhQUFhLGVBQWUsa0JBQWtCLEVBQUU7QUFDcEY7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY29pbmJhc2Uvc2VydmVyX3NpZ25lci5qcz82NGY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJ2ZXJTaWduZXIgPSB2b2lkIDA7XG5jb25zdCBjb2luYmFzZV8xID0gcmVxdWlyZShcIi4vY29pbmJhc2VcIik7XG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBTZXJ2ZXItU2lnbmVyLiBTZXJ2ZXItU2lnbmVycyBhcmUgYXNzaWduZWQgdG8gc2lnbiB0cmFuc2FjdGlvbnMgZm9yIGEgV2FsbGV0LlxuICovXG5jbGFzcyBTZXJ2ZXJTaWduZXIge1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgY29uc3RydWN0b3IgdG8gcHJldmVudCBkaXJlY3QgaW5zdGFudGlhdGlvbiBvdXRzaWRlIG9mIGZhY3RvcnkgbWV0aG9kLlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2VydmVyU2lnbmVyIGluc3RhbmNlLlxuICAgICAqIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSBTZXJ2ZXJTaWduZXIuZ2V0RGVmYXVsdCgpLlxuICAgICAqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEBwYXJhbSBzZXJ2ZXJTaWduZXJNb2RlbCAtIFRoZSBTZXJ2ZXItU2lnbmVyIG1vZGVsLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZXJ2ZXJTaWduZXJNb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gc2VydmVyU2lnbmVyTW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRlZmF1bHQgU2VydmVyLVNpZ25lciBmb3IgdGhlIENEUCBQcm9qZWN0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgU2VydmVyLVNpZ25lci5cbiAgICAgKiBAdGhyb3dzIHtBUElFcnJvcn0gaWYgdGhlIEFQSSByZXF1ZXN0IHRvIGxpc3QgU2VydmVyLVNpZ25lcnMgZmFpbHMuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIGlzIG5vIFNlcnZlci1TaWduZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBDRFAgUHJvamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0RGVmYXVsdCgpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuc2VydmVyU2lnbmVyLmxpc3RTZXJ2ZXJTaWduZXJzKCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBTZXJ2ZXItU2lnbmVyIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcnZlclNpZ25lcihyZXNwb25zZS5kYXRhLmRhdGFbMF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgU2VydmVyLVNpZ25lci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBTZXJ2ZXItU2lnbmVyIElELlxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXJ2ZXJfc2lnbmVyX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRHMgb2YgdGhlIFdhbGxldCdzIHRoZSBTZXJ2ZXItU2lnbmVyIGNhbiBzaWduIGZvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBXYWxsZXQgSURzLlxuICAgICAqL1xuICAgIGdldFdhbGxldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLndhbGxldHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFNlcnZlci1TaWduZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgU2VydmVyLVNpZ25lci5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTZXJ2ZXJTaWduZXJ7aWQ6ICcke3RoaXMuZ2V0SWQoKX0nLCB3YWxsZXRzOiAnJHt0aGlzLmdldFdhbGxldHMoKX0nfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTaWduZXIgPSBTZXJ2ZXJTaWduZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmartContract = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst contract_event_1 = __webpack_require__(/*! ./contract_event */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\");\n/**\n * A representation of a SmartContract on the blockchain.\n */\nclass SmartContract {\n    /**\n     * Creates a new SmartContract instance.\n     *\n     * @param contractModel - The SmartContract model from the API.\n     */\n    constructor(contractModel) {\n        if (!contractModel) {\n            throw new Error(\"SmartContract model cannot be empty\");\n        }\n        this.model = contractModel;\n    }\n    /**\n     * Returns whether the SmartContract is external.\n     *\n     * @returns True if the SmartContract is external, false otherwise.\n     */\n    get isExternal() {\n        return this.model.is_external;\n    }\n    /**\n     * Returns a list of ContractEvents for the provided network, contract, and event details.\n     *\n     * @param networkId - The network ID.\n     * @param protocolName - The protocol name.\n     * @param contractAddress - The contract address.\n     * @param contractName - The contract name.\n     * @param eventName - The event name.\n     * @param fromBlockHeight - The start block height.\n     * @param toBlockHeight - The end block height.\n     * @returns The contract events.\n     */\n    static async listEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight) {\n        const contractEvents = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const response = await coinbase_1.Coinbase.apiClients.contractEvent.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, page?.length ? page : undefined);\n            response.data.data.forEach(contractEvent => {\n                contractEvents.push(new contract_event_1.ContractEvent(contractEvent));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return contractEvents;\n    }\n    /**\n     * Register a smart contract.\n     *\n     * @param options - The options to register a smart contract.\n     * @param options.networkId - The network ID.\n     * @param options.contractAddress - The contract address.\n     * @param options.abi - The ABI of the contract.\n     * @param options.contractName - The contract name.\n     * @returns The smart contract.\n     */\n    static async register({ networkId, contractAddress, abi, contractName, }) {\n        const response = await coinbase_1.Coinbase.apiClients.smartContract.registerSmartContract(networkId, contractAddress, {\n            abi: JSON.stringify(abi),\n            contract_name: contractName,\n        });\n        return SmartContract.fromModel(response.data);\n    }\n    /**\n     * Lists Smart Contracts.\n     *\n     * @param options - The pagination options.\n     * @param options.page - The cursor for pagination across multiple pages of Smart Contract. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Smart Contracts.\n     */\n    static async list({ page = undefined } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.smartContract.listSmartContracts(page);\n        const smartContracts = response.data.data;\n        for (const sc of smartContracts) {\n            data.push(new SmartContract(sc));\n        }\n        const hasMore = response.data.has_more ? response.data.has_more : false;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Converts a SmartContractModel into a SmartContract object.\n     *\n     * @param contractModel - The SmartContract model object.\n     * @returns The SmartContract object.\n     */\n    static fromModel(contractModel) {\n        return new SmartContract(contractModel);\n    }\n    /**\n     * Returns the ID of the SmartContract.\n     *\n     * @returns The SmartContract ID.\n     */\n    getId() {\n        return this.model.smart_contract_id;\n    }\n    /**\n     * Returns the Network ID of the SmartContract.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID that deployed the smart contract.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        if (!this.model.wallet_id)\n            return undefined;\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the name of the smart contract.\n     *\n     * @returns The contract name.\n     */\n    getContractName() {\n        return this.model.contract_name;\n    }\n    /**\n     * Returns the Contract Address of the smart contract.\n     *\n     * @returns The Contract Address.\n     */\n    getContractAddress() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the Deployer Address of the smart contract.\n     *\n     * @returns The Deployer Address.\n     */\n    getDeployerAddress() {\n        if (!this.model.deployer_address)\n            return undefined;\n        return this.model.deployer_address;\n    }\n    /**\n     * Returns the Type of the smart contract.\n     *\n     * @returns The Smart Contract Type.\n     */\n    getType() {\n        switch (this.model.type) {\n            case api_1.SmartContractType.Erc20:\n                return types_1.SmartContractType.ERC20;\n            case api_1.SmartContractType.Erc721:\n                return types_1.SmartContractType.ERC721;\n            case api_1.SmartContractType.Erc1155:\n                return types_1.SmartContractType.ERC1155;\n            case api_1.SmartContractType.Custom:\n                return types_1.SmartContractType.CUSTOM;\n            default:\n                throw new Error(`Unknown smart contract type: ${this.model.type}`);\n        }\n    }\n    /**\n     * Returns the Options of the smart contract.\n     *\n     * @returns The Smart Contract Options.\n     */\n    getOptions() {\n        if (this.isExternal)\n            throw new Error(\"SmartContract options cannot be returned for external SmartContract\");\n        const options = this.model.options;\n        if (this.isERC20(this.getType(), options)) {\n            return {\n                name: options.name,\n                symbol: options.symbol,\n                totalSupply: options.total_supply,\n            };\n        }\n        else if (this.isERC721(this.getType(), options)) {\n            return {\n                name: options.name,\n                symbol: options.symbol,\n                baseURI: options.base_uri,\n            };\n        }\n        else if (this.isERC1155(this.getType(), options)) {\n            return {\n                uri: options.uri,\n            };\n        }\n        else {\n            return options;\n        }\n    }\n    /**\n     * Returns the ABI of the smart contract.\n     *\n     * @returns The ABI as a JSON-encoded string.\n     */\n    getAbi() {\n        return JSON.parse(this.model.abi);\n    }\n    /**\n     * Returns the Transaction of the smart contract deployment.\n     *\n     * @returns The Transaction.\n     */\n    getTransaction() {\n        if (this.isExternal)\n            return undefined;\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Signs the SmartContract deployment with the provided key and returns the hex signature\n     * required for broadcasting the SmartContract deployment.\n     *\n     * @param key - The key to sign the SmartContract deployment with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        if (this.isExternal)\n            throw new Error(\"Cannot sign an external SmartContract\");\n        return this.getTransaction().sign(key);\n    }\n    /**\n     * Update a smart contract.\n     *\n     * @param options - The options to update a smart contract.\n     * @param options.abi - The new ABI of the contract.\n     * @param options.contractName - The new contract name.\n     * @returns The smart contract.\n     */\n    async update({ abi, contractName }) {\n        const response = await coinbase_1.Coinbase.apiClients.smartContract.updateSmartContract(this.getNetworkId(), this.getContractAddress(), {\n            abi: JSON.stringify(abi),\n            contract_name: contractName,\n        });\n        return SmartContract.fromModel(response.data);\n    }\n    /**\n     * Broadcasts the SmartContract deployment to the Network.\n     *\n     * @returns The SmartContract object\n     * @throws {APIError} if the API request to broadcast a SmartContract deployment fails.\n     */\n    async broadcast() {\n        if (this.isExternal)\n            throw new Error(\"Cannot broadcast an external SmartContract\");\n        if (!this.getTransaction().isSigned())\n            throw new Error(\"Cannot broadcast unsigned SmartContract deployment\");\n        const deploySmartContractRequest = {\n            signed_payload: this.getTransaction().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.smartContract.deploySmartContract(this.getWalletId(), this.getDeployerAddress(), this.getId(), deploySmartContractRequest);\n        return SmartContract.fromModel(response.data);\n    }\n    /**\n     * Waits for the SmartContract deployment to be confirmed on the Network or fail on chain.\n     * Waits until the SmartContract deployment is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the SmartContract deployment takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the SmartContract deployment.\n     * @param options.timeoutSeconds - The maximum time to wait for the SmartContract deployment to be confirmed.\n     *\n     * @returns The SmartContract object in a terminal state.\n     * @throws {Error} if the SmartContract deployment times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        if (this.isExternal)\n            throw new Error(\"Cannot wait for an external SmartContract\");\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the SmartContract deployment is in a terminal state, return the SmartContract.\n            const status = this.getTransaction().getStatus();\n            if (status === types_1.TransactionStatus.COMPLETE || status === types_1.TransactionStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"SmartContract deployment timed out\");\n    }\n    /**\n     * Reloads the SmartContract model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a SmartContract fails.\n     */\n    async reload() {\n        if (this.isExternal)\n            throw new Error(\"Cannot reload an external SmartContract\");\n        const result = await coinbase_1.Coinbase.apiClients.smartContract.getSmartContract(this.getWalletId(), this.getDeployerAddress(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the SmartContract.\n     *\n     * @returns The string representation of the SmartContract.\n     */\n    toString() {\n        return (`SmartContract{id: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `contractAddress: '${this.getContractAddress()}', deployerAddress: '${this.getDeployerAddress()}', ` +\n            `type: '${this.getType()}'}`);\n    }\n    /**\n     * Type guard for checking if the smart contract is an ERC20.\n     *\n     * @param type - The type of the smart contract.\n     * @param options - The options of the smart contract.\n     * @returns True if the smart contract is an ERC20, false otherwise.\n     */\n    isERC20(type, options) {\n        return type === types_1.SmartContractType.ERC20;\n    }\n    /**\n     * Type guard for checking if the smart contract is an ERC721.\n     *\n     * @param type - The type of the smart contract.\n     * @param options - The options of the smart contract.\n     * @returns True if the smart contract is an ERC721, false otherwise.\n     */\n    isERC721(type, options) {\n        return type === types_1.SmartContractType.ERC721;\n    }\n    /**\n     * Type guard for checking if the smart contract is an ERC1155.\n     *\n     * @param type - The type of the smart contract.\n     * @param options - The options of the smart contract.\n     * @returns True if the smart contract is an ERC1155, false otherwise.\n     */\n    isERC1155(type, options) {\n        return type === types_1.SmartContractType.ERC1155;\n    }\n}\nexports.SmartContract = SmartContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SponsoredSend = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of an onchain Sponsored Send.\n */\nclass SponsoredSend {\n    /**\n     * Sponsored Sends should be constructed via higher level abstractions like Transfer.\n     *\n     * @class\n     * @param model - The underlying Sponsored Send object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Keccak256 hash of the typed data. This payload must be signed\n     * by the sender to be used as an approval in the EIP-3009 transaction.\n     *\n     * @returns The Keccak256 hash of the typed data.\n     */\n    getTypedDataHash() {\n        return this.model.typed_data_hash;\n    }\n    /**\n     * Returns the signature of the typed data.\n     *\n     * @returns The hash of the typed data signature.\n     */\n    getSignature() {\n        return this.model.signature;\n    }\n    /**\n     * Signs the Sponsored Send with the provided key and returns the hex signature.\n     *\n     * @param key - The key to sign the Sponsored Send with\n     * @returns The hex-encoded signature\n     */\n    async sign(key) {\n        ethers_1.ethers.toBeArray;\n        const signature = key.signingKey.sign(ethers_1.ethers.getBytes(this.getTypedDataHash())).serialized;\n        this.model.signature = signature;\n        return signature;\n    }\n    /**\n     * Returns whether the Sponsored Send has been signed.\n     *\n     * @returns if the Sponsored Send has been signed.\n     */\n    isSigned() {\n        return !!this.getSignature();\n    }\n    /**\n     * Returns the Status of the Sponsored Send.\n     *\n     * @returns the Status of the Sponsored Send\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.SponsoredSendStatus.PENDING:\n                return types_1.SponsoredSendStatus.PENDING;\n            case types_1.SponsoredSendStatus.SIGNED:\n                return types_1.SponsoredSendStatus.SIGNED;\n            case types_1.SponsoredSendStatus.SUBMITTED:\n                return types_1.SponsoredSendStatus.SUBMITTED;\n            case types_1.SponsoredSendStatus.COMPLETE:\n                return types_1.SponsoredSendStatus.COMPLETE;\n            case types_1.SponsoredSendStatus.FAILED:\n                return types_1.SponsoredSendStatus.FAILED;\n            default:\n                undefined;\n        }\n    }\n    /**\n     * Returns whether the Sponsored Send is in a terminal State.\n     *\n     * @returns Whether the Sponsored Send is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        if (!status)\n            return false;\n        return [types_1.SponsoredSendStatus.COMPLETE, types_1.SponsoredSendStatus.FAILED].includes(status);\n    }\n    /**\n     * Returns the Transaction Hash of the Sponsored Send.\n     *\n     * @returns The Transaction Hash\n     */\n    getTransactionHash() {\n        return this.model.transaction_hash;\n    }\n    /**\n     * Returns the link to the Sponsored Send on the blockchain explorer.\n     *\n     * @returns The link to the Sponsored Send on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.model.transaction_link;\n    }\n    /**\n     * Returns a string representation of the Sponsored Send.\n     *\n     * @returns A string representation of the Sponsored Send\n     */\n    toString() {\n        return `SponsoredSend { transactionHash: '${this.getTransactionHash()}', status: '${this.getStatus()}', typedDataHash: '${this.getTypedDataHash()}', signature: ${this.getSignature()}, transactionLink: ${this.getTransactionLink()} }`;\n    }\n}\nexports.SponsoredSend = SponsoredSend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3Nwb25zb3JlZF9zZW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBUTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLG9CQUFvQiwwQkFBMEIsY0FBYyxpQkFBaUIscUJBQXFCLHdCQUF3QixnQkFBZ0Isb0JBQW9CLHFCQUFxQiw0QkFBNEI7QUFDL087QUFDQTtBQUNBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY29pbmJhc2Uvc3BvbnNvcmVkX3NlbmQuanM/MzJlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BvbnNvcmVkU2VuZCA9IHZvaWQgMDtcbmNvbnN0IGV0aGVyc18xID0gcmVxdWlyZShcImV0aGVyc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhbiBvbmNoYWluIFNwb25zb3JlZCBTZW5kLlxuICovXG5jbGFzcyBTcG9uc29yZWRTZW5kIHtcbiAgICAvKipcbiAgICAgKiBTcG9uc29yZWQgU2VuZHMgc2hvdWxkIGJlIGNvbnN0cnVjdGVkIHZpYSBoaWdoZXIgbGV2ZWwgYWJzdHJhY3Rpb25zIGxpa2UgVHJhbnNmZXIuXG4gICAgICpcbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAcGFyYW0gbW9kZWwgLSBUaGUgdW5kZXJseWluZyBTcG9uc29yZWQgU2VuZCBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtb2RlbCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgS2VjY2FrMjU2IGhhc2ggb2YgdGhlIHR5cGVkIGRhdGEuIFRoaXMgcGF5bG9hZCBtdXN0IGJlIHNpZ25lZFxuICAgICAqIGJ5IHRoZSBzZW5kZXIgdG8gYmUgdXNlZCBhcyBhbiBhcHByb3ZhbCBpbiB0aGUgRUlQLTMwMDkgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgS2VjY2FrMjU2IGhhc2ggb2YgdGhlIHR5cGVkIGRhdGEuXG4gICAgICovXG4gICAgZ2V0VHlwZWREYXRhSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudHlwZWRfZGF0YV9oYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaWduYXR1cmUgb2YgdGhlIHR5cGVkIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgaGFzaCBvZiB0aGUgdHlwZWQgZGF0YSBzaWduYXR1cmUuXG4gICAgICovXG4gICAgZ2V0U2lnbmF0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIHRoZSBTcG9uc29yZWQgU2VuZCB3aXRoIHRoZSBwcm92aWRlZCBrZXkgYW5kIHJldHVybnMgdGhlIGhleCBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byBzaWduIHRoZSBTcG9uc29yZWQgU2VuZCB3aXRoXG4gICAgICogQHJldHVybnMgVGhlIGhleC1lbmNvZGVkIHNpZ25hdHVyZVxuICAgICAqL1xuICAgIGFzeW5jIHNpZ24oa2V5KSB7XG4gICAgICAgIGV0aGVyc18xLmV0aGVycy50b0JlQXJyYXk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGtleS5zaWduaW5nS2V5LnNpZ24oZXRoZXJzXzEuZXRoZXJzLmdldEJ5dGVzKHRoaXMuZ2V0VHlwZWREYXRhSGFzaCgpKSkuc2VyaWFsaXplZDtcbiAgICAgICAgdGhpcy5tb2RlbC5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgU3BvbnNvcmVkIFNlbmQgaGFzIGJlZW4gc2lnbmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgaWYgdGhlIFNwb25zb3JlZCBTZW5kIGhhcyBiZWVuIHNpZ25lZC5cbiAgICAgKi9cbiAgICBpc1NpZ25lZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5nZXRTaWduYXR1cmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgU3RhdHVzIG9mIHRoZSBTcG9uc29yZWQgU2VuZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIFNwb25zb3JlZCBTZW5kXG4gICAgICovXG4gICAgZ2V0U3RhdHVzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZWwuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5QRU5ESU5HOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuUEVORElORztcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNJR05FRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNJR05FRDtcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNVQk1JVFRFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNVQk1JVFRFRDtcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLkNPTVBMRVRFOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuQ09NUExFVEU7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRUQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIFNwb25zb3JlZCBTZW5kIGlzIGluIGEgdGVybWluYWwgU3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBTcG9uc29yZWQgU2VuZCBpcyBpbiBhIHRlcm1pbmFsIFN0YXRlXG4gICAgICovXG4gICAgaXNUZXJtaW5hbFN0YXRlKCkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldFN0YXR1cygpO1xuICAgICAgICBpZiAoIXN0YXR1cylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIFt0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuQ09NUExFVEUsIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRURdLmluY2x1ZGVzKHN0YXR1cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFRyYW5zYWN0aW9uIEhhc2ggb2YgdGhlIFNwb25zb3JlZCBTZW5kLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFRyYW5zYWN0aW9uIEhhc2hcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkhhc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnRyYW5zYWN0aW9uX2hhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpbmsgdG8gdGhlIFNwb25zb3JlZCBTZW5kIG9uIHRoZSBibG9ja2NoYWluIGV4cGxvcmVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGxpbmsgdG8gdGhlIFNwb25zb3JlZCBTZW5kIG9uIHRoZSBibG9ja2NoYWluIGV4cGxvcmVyXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25MaW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50cmFuc2FjdGlvbl9saW5rO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTcG9uc29yZWQgU2VuZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTcG9uc29yZWQgU2VuZFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFNwb25zb3JlZFNlbmQgeyB0cmFuc2FjdGlvbkhhc2g6ICcke3RoaXMuZ2V0VHJhbnNhY3Rpb25IYXNoKCl9Jywgc3RhdHVzOiAnJHt0aGlzLmdldFN0YXR1cygpfScsIHR5cGVkRGF0YUhhc2g6ICcke3RoaXMuZ2V0VHlwZWREYXRhSGFzaCgpfScsIHNpZ25hdHVyZTogJHt0aGlzLmdldFNpZ25hdHVyZSgpfSwgdHJhbnNhY3Rpb25MaW5rOiAke3RoaXMuZ2V0VHJhbnNhY3Rpb25MaW5rKCl9IH1gO1xuICAgIH1cbn1cbmV4cG9ydHMuU3BvbnNvcmVkU2VuZCA9IFNwb25zb3JlZFNlbmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingBalance = void 0;\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of the staking balance for a given asset on a specific date.\n */\nclass StakingBalance {\n    /**\n     * Creates the StakingBalance object.\n     *\n     * @param model - The underlying staking balance object.\n     */\n    constructor(model) {\n        this.model = model;\n    }\n    /**\n     * Returns a list of StakingBalances for the provided network, asset, and address.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param addressId - The address ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @returns The staking balances.\n     */\n    static async list(networkId, assetId, addressId, startTime, endTime) {\n        const stakingBalances = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const response = await coinbase_1.Coinbase.apiClients.stake.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, 100, page?.length ? page : undefined);\n            response.data.data.forEach(stakingBalance => {\n                stakingBalances.push(new StakingBalance(stakingBalance));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return stakingBalances;\n    }\n    /**\n     * Returns the bonded stake amount of the StakingBalance.\n     *\n     * @returns The Balance.\n     */\n    bondedStake() {\n        return balance_1.Balance.fromModel(this.model.bonded_stake);\n    }\n    /**\n     * Returns the unbonded stake amount of the StakingBalance.\n     *\n     * @returns The Balance.\n     */\n    unbondedBalance() {\n        return balance_1.Balance.fromModel(this.model.unbonded_balance);\n    }\n    /**\n     * Returns the participant type of the address.\n     *\n     * @returns The participant type.\n     */\n    participantType() {\n        return this.model.participant_type;\n    }\n    /**\n     * Returns the date of the StakingBalance.\n     *\n     * @returns The date.\n     */\n    date() {\n        return new Date(this.model.date);\n    }\n    /**\n     * Returns the onchain address of the StakingBalance.\n     *\n     * @returns The onchain address.\n     */\n    address() {\n        return this.model.address;\n    }\n    /**\n     * Print the Staking Balance as a string.\n     *\n     * @returns The string representation of the Staking Balance.\n     */\n    toString() {\n        return `StakingBalance { date: '${this.date().toISOString()}' address: '${this.address()}' bondedStake: '${this.bondedStake().amount} ${this.bondedStake().asset?.assetId?.toUpperCase()}' unbondedBalance: '${this.unbondedBalance().amount} ${this.unbondedBalance().asset?.assetId?.toUpperCase()}' participantType: '${this.participantType()}' }`;\n    }\n}\nexports.StakingBalance = StakingBalance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3N0YWtpbmdfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMsdUZBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMseUZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxTQUFTLDBCQUEwQixjQUFjLGVBQWUsa0JBQWtCLDJCQUEyQixFQUFFLGlEQUFpRCxzQkFBc0IsK0JBQStCLEVBQUUscURBQXFELHNCQUFzQix1QkFBdUIsR0FBRztBQUM3VjtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9zdGFraW5nX2JhbGFuY2UuanM/YmUwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Rha2luZ0JhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBiYWxhbmNlXzEgPSByZXF1aXJlKFwiLi9iYWxhbmNlXCIpO1xuY29uc3QgY29pbmJhc2VfMSA9IHJlcXVpcmUoXCIuL2NvaW5iYXNlXCIpO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdGFraW5nIGJhbGFuY2UgZm9yIGEgZ2l2ZW4gYXNzZXQgb24gYSBzcGVjaWZpYyBkYXRlLlxuICovXG5jbGFzcyBTdGFraW5nQmFsYW5jZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgU3Rha2luZ0JhbGFuY2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIHVuZGVybHlpbmcgc3Rha2luZyBiYWxhbmNlIG9iamVjdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIFN0YWtpbmdCYWxhbmNlcyBmb3IgdGhlIHByb3ZpZGVkIG5ldHdvcmssIGFzc2V0LCBhbmQgYWRkcmVzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXR3b3JrSWQgLSBUaGUgbmV0d29yayBJRC5cbiAgICAgKiBAcGFyYW0gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzc0lkIC0gVGhlIGFkZHJlc3MgSUQuXG4gICAgICogQHBhcmFtIHN0YXJ0VGltZSAtIFRoZSBzdGFydCB0aW1lLlxuICAgICAqIEBwYXJhbSBlbmRUaW1lIC0gVGhlIGVuZCB0aW1lLlxuICAgICAqIEByZXR1cm5zIFRoZSBzdGFraW5nIGJhbGFuY2VzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsaXN0KG5ldHdvcmtJZCwgYXNzZXRJZCwgYWRkcmVzc0lkLCBzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgY29uc3Qgc3Rha2luZ0JhbGFuY2VzID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW1wiXCJdO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zdGFrZS5mZXRjaEhpc3RvcmljYWxTdGFraW5nQmFsYW5jZXMobmV0d29ya0lkLCBhc3NldElkLCBhZGRyZXNzSWQsIHN0YXJ0VGltZSwgZW5kVGltZSwgMTAwLCBwYWdlPy5sZW5ndGggPyBwYWdlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZGF0YS5mb3JFYWNoKHN0YWtpbmdCYWxhbmNlID0+IHtcbiAgICAgICAgICAgICAgICBzdGFraW5nQmFsYW5jZXMucHVzaChuZXcgU3Rha2luZ0JhbGFuY2Uoc3Rha2luZ0JhbGFuY2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuaGFzX21vcmUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5uZXh0X3BhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChyZXNwb25zZS5kYXRhLm5leHRfcGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFraW5nQmFsYW5jZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJvbmRlZCBzdGFrZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEJhbGFuY2UuXG4gICAgICovXG4gICAgYm9uZGVkU3Rha2UoKSB7XG4gICAgICAgIHJldHVybiBiYWxhbmNlXzEuQmFsYW5jZS5mcm9tTW9kZWwodGhpcy5tb2RlbC5ib25kZWRfc3Rha2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmJvbmRlZCBzdGFrZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEJhbGFuY2UuXG4gICAgICovXG4gICAgdW5ib25kZWRCYWxhbmNlKCkge1xuICAgICAgICByZXR1cm4gYmFsYW5jZV8xLkJhbGFuY2UuZnJvbU1vZGVsKHRoaXMubW9kZWwudW5ib25kZWRfYmFsYW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcnRpY2lwYW50IHR5cGUgb2YgdGhlIGFkZHJlc3MuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcGFydGljaXBhbnQgdHlwZS5cbiAgICAgKi9cbiAgICBwYXJ0aWNpcGFudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnBhcnRpY2lwYW50X3R5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRhdGUgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGRhdGUuXG4gICAgICovXG4gICAgZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMubW9kZWwuZGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9uY2hhaW4gYWRkcmVzcyBvZiB0aGUgU3Rha2luZ0JhbGFuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb25jaGFpbiBhZGRyZXNzLlxuICAgICAqL1xuICAgIGFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmFkZHJlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByaW50IHRoZSBTdGFraW5nIEJhbGFuY2UgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTdGFraW5nIEJhbGFuY2UuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgU3Rha2luZ0JhbGFuY2UgeyBkYXRlOiAnJHt0aGlzLmRhdGUoKS50b0lTT1N0cmluZygpfScgYWRkcmVzczogJyR7dGhpcy5hZGRyZXNzKCl9JyBib25kZWRTdGFrZTogJyR7dGhpcy5ib25kZWRTdGFrZSgpLmFtb3VudH0gJHt0aGlzLmJvbmRlZFN0YWtlKCkuYXNzZXQ/LmFzc2V0SWQ/LnRvVXBwZXJDYXNlKCl9JyB1bmJvbmRlZEJhbGFuY2U6ICcke3RoaXMudW5ib25kZWRCYWxhbmNlKCkuYW1vdW50fSAke3RoaXMudW5ib25kZWRCYWxhbmNlKCkuYXNzZXQ/LmFzc2V0SWQ/LnRvVXBwZXJDYXNlKCl9JyBwYXJ0aWNpcGFudFR5cGU6ICcke3RoaXMucGFydGljaXBhbnRUeXBlKCl9JyB9YDtcbiAgICB9XG59XG5leHBvcnRzLlN0YWtpbmdCYWxhbmNlID0gU3Rha2luZ0JhbGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingOperation = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of a staking operation (stake, unstake, claim stake, etc.). It\n * may have multiple steps with some being transactions to sign, and others to wait.\n */\nclass StakingOperation {\n    /**\n     * Creates a StakingOperation object.\n     *\n     * @class\n     * @param model - The staking operation response from the API call.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n        this.transactions = [];\n        this.loadTransactionsFromModel();\n    }\n    /**\n     * Get the staking operation for the given ID.\n     *\n     * @param networkId - The network ID.\n     * @param addressId - The address ID.\n     * @param id - The staking operation ID.\n     * @param walletId - The wallet ID of the staking operation.\n     * @throws {Error} If the wallet id is defined but empty.\n     *\n     * @returns The staking operation object.\n     */\n    static async fetch(networkId, addressId, id, walletId) {\n        if (walletId === undefined) {\n            const result = await coinbase_1.Coinbase.apiClients.stake.getExternalStakingOperation(networkId, addressId, id);\n            return new StakingOperation(result.data);\n        }\n        else if (walletId != undefined && walletId != \"\") {\n            const result = await coinbase_1.Coinbase.apiClients.walletStake.getStakingOperation(walletId, addressId, id);\n            return new StakingOperation(result.data);\n        }\n        else {\n            throw new Error(\"Invalid wallet ID\");\n        }\n    }\n    /**\n     * Returns the Staking Operation ID.\n     *\n     * @returns The Staking Operation ID.\n     */\n    getID() {\n        return this.model.id;\n    }\n    /**\n     * Get the status of the staking operation.\n     *\n     * @returns The status of the staking operation.\n     */\n    getStatus() {\n        return this.model.status;\n    }\n    /**\n     * Returns the Wallet ID if it exists.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletID() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID.\n     *\n     * @returns The Address ID.\n     */\n    getAddressID() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Network ID.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkID() {\n        return this.model.network_id;\n    }\n    /**\n     * Return a human-readable string representation of the StakingOperation object.\n     *\n     * @returns The string representation of the StakingOperation object.\n     */\n    toString() {\n        return `StakingOperation { id: ${this.getID()} status: ${this.getStatus()} network_id: ${this.getNetworkID()} address_id: ${this.getAddressID()} }`;\n    }\n    /**\n     * Returns whether the Staking operation is in a terminal State.\n     *\n     * @returns Whether the Staking operation is in a terminal State\n     */\n    isTerminalState() {\n        return this.isCompleteState() || this.isFailedState();\n    }\n    /**\n     * Returns whether the Staking operation is in a failed state.\n     *\n     * @returns Whether the Staking operation is in a failed state.\n     */\n    isFailedState() {\n        return this.getStatus() === api_1.StakingOperationStatusEnum.Failed;\n    }\n    /**\n     * Returns whether the Staking operation is in a complete state.\n     *\n     * @returns Whether the Staking operation is in a complete state.\n     */\n    isCompleteState() {\n        return this.getStatus() === api_1.StakingOperationStatusEnum.Complete;\n    }\n    /**\n     * Get the transactions associated with this staking operation.\n     *\n     * @returns The array of transactions.\n     */\n    getTransactions() {\n        return this.transactions;\n    }\n    /**\n     * Get signed voluntary exit messages for native eth unstaking\n     *\n     * @returns The signed voluntary exit messages for a native eth unstaking operation.\n     */\n    getSignedVoluntaryExitMessages() {\n        const signedVoluntaryExitMessages = [];\n        if (this.model.metadata) {\n            this.model.metadata.forEach(metadata => {\n                const decodedSignedVoluntaryExitMessage = atob(metadata.signed_voluntary_exit);\n                signedVoluntaryExitMessages.push(decodedSignedVoluntaryExitMessage);\n            });\n        }\n        return signedVoluntaryExitMessages;\n    }\n    /**\n     * Reloads the StakingOperation model with the latest data from the server.\n     * If the StakingOperation object was created by an ExternalAddress then it will\n     * not have a wallet ID.\n     *\n     * @throws {APIError} if the API request to get the StakingOperation fails.\n     * @throws {Error} if this function is called on a StakingOperation without a wallet ID.\n     */\n    async reload() {\n        if (this.getWalletID() === undefined) {\n            const result = await coinbase_1.Coinbase.apiClients.stake.getExternalStakingOperation(this.getNetworkID(), this.getAddressID(), this.getID());\n            this.model = result.data;\n        }\n        else if (this.getWalletID() != undefined && this.getWalletID() != \"\") {\n            const result = await coinbase_1.Coinbase.apiClients.walletStake.getStakingOperation(this.getWalletID(), this.getAddressID(), this.getID());\n            this.model = result.data;\n        }\n        this.loadTransactionsFromModel();\n    }\n    /**\n     * Waits until the Staking Operation is completed or failed by polling its status at the given interval.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval at which to poll, in seconds\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the StakingOperation to complete, in seconds\n     * @throws {Error} If the StakingOperation takes longer than the given timeout.\n     * @returns The completed StakingOperation object.\n     */\n    async wait({ intervalSeconds = 5, timeoutSeconds = 3600, } = {}) {\n        if (this.getWalletID() != undefined) {\n            throw new Error(\"cannot wait on staking operation for wallet address.\");\n        }\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            if (this.isTerminalState()) {\n                return this.model;\n            }\n            if (Date.now() - startTime > timeoutSeconds * 1000) {\n                throw new Error(\"Staking operation timed out\");\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Staking operation timed out\");\n    }\n    /**\n     * Sign the transactions in the StakingOperation object.\n     *\n     * @param key - The key used to sign the transactions.\n     */\n    async sign(key) {\n        for (const tx of this.transactions) {\n            if (!tx.isSigned()) {\n                await tx.sign(key);\n            }\n        }\n    }\n    /**\n     * loadTransactionsFromModel loads new unsigned transactions from the model into the transactions array.\n     * Note: For External Address model since tx signing and broadcast status happens by the end user and not our backend\n     * we need to be careful to not overwrite the transactions array with the response from the API. Ex: End user could have used\n     * stakingOperation.sign() method to sign the transactions, and we should not overwrite them with the response from the API.\n     * This however is ok to do so for the Wallet Address model since the transactions states are maintained by our backend.\n     * This method attempts to be safe for both address models, and only adds newly created unsigned transactions that are not\n     *  already in the transactions array.\n     */\n    loadTransactionsFromModel() {\n        // Only overwrite the transactions if the response is populated.\n        if (this.model.transactions && this.model.transactions.length > 0) {\n            // Create a set of existing unsigned payloads to avoid duplicates.\n            const existingUnsignedPayloads = new Set(this.transactions.map(tx => tx.getUnsignedPayload()));\n            // Add transactions that are not already in the transactions array.\n            this.model.transactions.forEach(transaction => {\n                if (!existingUnsignedPayloads.has(transaction.unsigned_payload)) {\n                    this.transactions.push(new transaction_1.Transaction(transaction));\n                }\n            });\n        }\n    }\n}\nexports.StakingOperation = StakingOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingReward = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of a staking reward earned on a network for a given asset.\n */\nclass StakingReward {\n    /**\n     * Creates the StakingReward object.\n     *\n     * @param model - The underlying staking reward object.\n     * @param asset - The asset for the staking reward.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     */\n    constructor(model, asset, format) {\n        this.model = model;\n        this.asset = asset;\n        this.format = format;\n    }\n    /**\n     * Returns a list of StakingRewards for the provided network, asset, and addresses.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param addressIds - The address ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @returns The staking rewards.\n     */\n    static async list(networkId, assetId, addressIds, startTime, endTime, format = types_1.StakingRewardFormat.USD) {\n        const stakingRewards = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const request = {\n                network_id: coinbase_1.Coinbase.normalizeNetwork(networkId),\n                asset_id: assetId,\n                address_ids: addressIds,\n                start_time: startTime,\n                end_time: endTime,\n                format: format,\n            };\n            const response = await coinbase_1.Coinbase.apiClients.stake.fetchStakingRewards(request, 100, page?.length ? page : undefined);\n            const asset = await asset_1.Asset.fetch(networkId, assetId);\n            response.data.data.forEach(stakingReward => {\n                stakingRewards.push(new StakingReward(stakingReward, asset, format));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return stakingRewards;\n    }\n    /**\n     * Returns the amount of the StakingReward.\n     *\n     * @returns The amount.\n     */\n    amount() {\n        if (this.model.amount == \"\")\n            return 0;\n        if (this.format == types_1.StakingRewardFormat.USD) {\n            return new decimal_js_1.default(this.model.amount).div(new decimal_js_1.default(\"100\"));\n        }\n        return this.asset.fromAtomicAmount(new decimal_js_1.default(this.model.amount)).toNumber();\n    }\n    /**\n     * Returns the date of the StakingReward.\n     *\n     * @returns The date.\n     */\n    date() {\n        return new Date(this.model.date);\n    }\n    /**\n     * Returns the onchain address of the StakingReward.\n     *\n     * @returns The onchain address.\n     */\n    addressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the USD value of the StakingReward.\n     *\n     * @returns The USD value.\n     */\n    usdValue() {\n        return new decimal_js_1.default(this.model.usd_value.amount).div(new decimal_js_1.default(\"100\"));\n    }\n    /**\n     * Returns the conversion price of the StakingReward in USD.\n     *\n     * @returns The conversion price.\n     */\n    conversionPrice() {\n        return new decimal_js_1.default(this.model.usd_value.conversion_price);\n    }\n    /**\n     * Returns the time of calculating the conversion price.\n     *\n     * @returns The conversion time.\n     */\n    conversionTime() {\n        return new Date(this.model.usd_value.conversion_time);\n    }\n    /**\n     * Print the Staking Reward as a string.\n     *\n     * @returns The string representation of the Staking Reward.\n     */\n    toString() {\n        return `StakingReward { date: '${this.date().toISOString()}' address: '${this.addressId()}' amount: '${this.amount().toString()}' usd_value: '${this.usdValue().toString()}' conversion_price: '${this.conversionPrice().toString()}' conversion_time: '${this.conversionTime().toISOString()}' }`;\n    }\n}\nexports.StakingReward = StakingReward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3N0YWtpbmdfcmV3YXJkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLHFDQUFxQyxtQkFBTyxDQUFDLDhEQUFZO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsU0FBUywwQkFBMEIsY0FBYyxpQkFBaUIsYUFBYSx5QkFBeUIsZ0JBQWdCLDJCQUEyQix1QkFBdUIsa0NBQWtDLHNCQUFzQixvQ0FBb0MsR0FBRztBQUN6UztBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9zdGFraW5nX3Jld2FyZC5qcz85MzVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdGFraW5nUmV3YXJkID0gdm9pZCAwO1xuY29uc3QgZGVjaW1hbF9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWNpbWFsLmpzXCIpKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbmNvbnN0IGFzc2V0XzEgPSByZXF1aXJlKFwiLi9hc3NldFwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIHN0YWtpbmcgcmV3YXJkIGVhcm5lZCBvbiBhIG5ldHdvcmsgZm9yIGEgZ2l2ZW4gYXNzZXQuXG4gKi9cbmNsYXNzIFN0YWtpbmdSZXdhcmQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIFN0YWtpbmdSZXdhcmQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIHVuZGVybHlpbmcgc3Rha2luZyByZXdhcmQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBhc3NldCAtIFRoZSBhc3NldCBmb3IgdGhlIHN0YWtpbmcgcmV3YXJkLlxuICAgICAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZm9ybWF0IHRvIHJldHVybiB0aGUgcmV3YXJkcyBpbi4gKHVzZCwgbmF0aXZlKS4gRGVmYXVsdHMgdG8gdXNkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCBhc3NldCwgZm9ybWF0KSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5hc3NldCA9IGFzc2V0O1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgU3Rha2luZ1Jld2FyZHMgZm9yIHRoZSBwcm92aWRlZCBuZXR3b3JrLCBhc3NldCwgYW5kIGFkZHJlc3Nlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXR3b3JrSWQgLSBUaGUgbmV0d29yayBJRC5cbiAgICAgKiBAcGFyYW0gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzc0lkcyAtIFRoZSBhZGRyZXNzIElELlxuICAgICAqIEBwYXJhbSBzdGFydFRpbWUgLSBUaGUgc3RhcnQgdGltZS5cbiAgICAgKiBAcGFyYW0gZW5kVGltZSAtIFRoZSBlbmQgdGltZS5cbiAgICAgKiBAcGFyYW0gZm9ybWF0IC0gVGhlIGZvcm1hdCB0byByZXR1cm4gdGhlIHJld2FyZHMgaW4uICh1c2QsIG5hdGl2ZSkuIERlZmF1bHRzIHRvIHVzZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgc3Rha2luZyByZXdhcmRzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsaXN0KG5ldHdvcmtJZCwgYXNzZXRJZCwgYWRkcmVzc0lkcywgc3RhcnRUaW1lLCBlbmRUaW1lLCBmb3JtYXQgPSB0eXBlc18xLlN0YWtpbmdSZXdhcmRGb3JtYXQuVVNEKSB7XG4gICAgICAgIGNvbnN0IHN0YWtpbmdSZXdhcmRzID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW1wiXCJdO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIG5ldHdvcmtfaWQ6IGNvaW5iYXNlXzEuQ29pbmJhc2Uubm9ybWFsaXplTmV0d29yayhuZXR3b3JrSWQpLFxuICAgICAgICAgICAgICAgIGFzc2V0X2lkOiBhc3NldElkLFxuICAgICAgICAgICAgICAgIGFkZHJlc3NfaWRzOiBhZGRyZXNzSWRzLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBlbmRfdGltZTogZW5kVGltZSxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zdGFrZS5mZXRjaFN0YWtpbmdSZXdhcmRzKHJlcXVlc3QsIDEwMCwgcGFnZT8ubGVuZ3RoID8gcGFnZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjb25zdCBhc3NldCA9IGF3YWl0IGFzc2V0XzEuQXNzZXQuZmV0Y2gobmV0d29ya0lkLCBhc3NldElkKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZGF0YS5mb3JFYWNoKHN0YWtpbmdSZXdhcmQgPT4ge1xuICAgICAgICAgICAgICAgIHN0YWtpbmdSZXdhcmRzLnB1c2gobmV3IFN0YWtpbmdSZXdhcmQoc3Rha2luZ1Jld2FyZCwgYXNzZXQsIGZvcm1hdCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5oYXNfbW9yZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5leHRfcGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHJlc3BvbnNlLmRhdGEubmV4dF9wYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWtpbmdSZXdhcmRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdSZXdhcmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgYW1vdW50LlxuICAgICAqL1xuICAgIGFtb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwuYW1vdW50ID09IFwiXCIpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09IHR5cGVzXzEuU3Rha2luZ1Jld2FyZEZvcm1hdC5VU0QpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQodGhpcy5tb2RlbC5hbW91bnQpLmRpdihuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQoXCIxMDBcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0LmZyb21BdG9taWNBbW91bnQobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KHRoaXMubW9kZWwuYW1vdW50KSkudG9OdW1iZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGF0ZSBvZiB0aGUgU3Rha2luZ1Jld2FyZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRlLlxuICAgICAqL1xuICAgIGRhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLm1vZGVsLmRhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvbmNoYWluIGFkZHJlc3Mgb2YgdGhlIFN0YWtpbmdSZXdhcmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb25jaGFpbiBhZGRyZXNzLlxuICAgICAqL1xuICAgIGFkZHJlc3NJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzc19pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVVNEIHZhbHVlIG9mIHRoZSBTdGFraW5nUmV3YXJkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFVTRCB2YWx1ZS5cbiAgICAgKi9cbiAgICB1c2RWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdCh0aGlzLm1vZGVsLnVzZF92YWx1ZS5hbW91bnQpLmRpdihuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQoXCIxMDBcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb252ZXJzaW9uIHByaWNlIG9mIHRoZSBTdGFraW5nUmV3YXJkIGluIFVTRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJzaW9uIHByaWNlLlxuICAgICAqL1xuICAgIGNvbnZlcnNpb25QcmljZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdCh0aGlzLm1vZGVsLnVzZF92YWx1ZS5jb252ZXJzaW9uX3ByaWNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGltZSBvZiBjYWxjdWxhdGluZyB0aGUgY29udmVyc2lvbiBwcmljZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJzaW9uIHRpbWUuXG4gICAgICovXG4gICAgY29udmVyc2lvblRpbWUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLm1vZGVsLnVzZF92YWx1ZS5jb252ZXJzaW9uX3RpbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmludCB0aGUgU3Rha2luZyBSZXdhcmQgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTdGFraW5nIFJld2FyZC5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTdGFraW5nUmV3YXJkIHsgZGF0ZTogJyR7dGhpcy5kYXRlKCkudG9JU09TdHJpbmcoKX0nIGFkZHJlc3M6ICcke3RoaXMuYWRkcmVzc0lkKCl9JyBhbW91bnQ6ICcke3RoaXMuYW1vdW50KCkudG9TdHJpbmcoKX0nIHVzZF92YWx1ZTogJyR7dGhpcy51c2RWYWx1ZSgpLnRvU3RyaW5nKCl9JyBjb252ZXJzaW9uX3ByaWNlOiAnJHt0aGlzLmNvbnZlcnNpb25QcmljZSgpLnRvU3RyaW5nKCl9JyBjb252ZXJzaW9uX3RpbWU6ICcke3RoaXMuY29udmVyc2lvblRpbWUoKS50b0lTT1N0cmluZygpfScgfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TdGFraW5nUmV3YXJkID0gU3Rha2luZ1Jld2FyZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Trade = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of a Trade, which trades an amount of an Asset to another Asset on a Network.\n * The fee is assumed to be paid in the native Asset of the Network.\n */\nclass Trade {\n    /**\n     * Trades should be created through Wallet.trade or Address.trade.\n     *\n     * @class\n     * @param model - The underlying Trade object.\n     * @throws {Error} - If the Trade model is empty.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Trade model cannot be empty\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Trade ID.\n     *\n     * @returns The Trade ID.\n     */\n    getId() {\n        return this.model.trade_id;\n    }\n    /**\n     * Returns the Network ID of the Trade.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the Trade.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID of the Trade.\n     *\n     * @returns The Address ID.\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the From Asset ID of the Trade.\n     *\n     * @returns The From Asset ID.\n     */\n    getFromAssetId() {\n        return this.model.from_asset.asset_id;\n    }\n    /**\n     * Returns the amount of the from asset for the Trade.\n     *\n     * @returns The amount of the from asset.\n     */\n    getFromAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.from_amount);\n        return amount.div(decimal_js_1.Decimal.pow(10, this.model.from_asset.decimals));\n    }\n    /**\n     * Returns the To Asset ID of the Trade.\n     *\n     * @returns The To Asset ID.\n     */\n    getToAssetId() {\n        return this.model.to_asset.asset_id;\n    }\n    /**\n     * Returns the amount of the to asset for the Trade.\n     *\n     * @returns The amount of the to asset.\n     */\n    getToAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.to_amount);\n        return amount.div(decimal_js_1.Decimal.pow(10, this.model.to_asset.decimals));\n    }\n    /**\n     * Returns the Trade transaction.\n     *\n     * @returns The Trade transaction.\n     */\n    getTransaction() {\n        this.transaction = new transaction_1.Transaction(this.model.transaction);\n        return this.transaction;\n    }\n    /**\n     * Returns the approve transaction if it exists.\n     *\n     * @returns The approve transaction.\n     */\n    getApproveTransaction() {\n        if (!this.approveTransaction && this.model.approve_transaction) {\n            this.approveTransaction = new transaction_1.Transaction(this.model.approve_transaction);\n        }\n        return this.approveTransaction;\n    }\n    /**\n     * Signs the Trade with the provided key.\n     * This signs the transfer transaction and will sign the approval transaction if present.\n     *\n     * @param key - The key to sign the Transfer with\n     */\n    async sign(key) {\n        if (this.getApproveTransaction()) {\n            await this.getApproveTransaction().sign(key);\n        }\n        await this.getTransaction().sign(key);\n    }\n    /**\n     * Broadcasts the Trade to the Network.\n     *\n     * @returns The Trade object\n     * @throws {APIError} if the API request to broadcast a Trade fails.\n     */\n    async broadcast() {\n        const tx = this.getTransaction();\n        const approveTx = this.getApproveTransaction();\n        if (!tx.isSigned()) {\n            throw new errors_1.NotSignedError(\"Cannot broadcast Trade with unsigned transaction\");\n        }\n        if (approveTx && !approveTx.isSigned()) {\n            throw new errors_1.NotSignedError(\"Cannot broadcast Trade with unsigned approve transaction\");\n        }\n        const response = await coinbase_1.Coinbase.apiClients.trade.broadcastTrade(this.getWalletId(), tx.fromAddressId(), this.getId(), {\n            signed_payload: tx.getSignature(),\n            approve_transaction_signed_payload: approveTx ? approveTx.getSignature() : undefined,\n        });\n        this.resetModel(response.data);\n        return this;\n    }\n    /**\n     * Returns the status of the Trade.\n     *\n     * @returns The status.\n     */\n    getStatus() {\n        return this.getTransaction()?.getStatus();\n    }\n    /**\n     * Waits until the Trade is completed or failed by polling the Network at the given interval.\n     * Raises an error if the Trade takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval at which to poll the Network, in seconds\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the Trade to complete, in seconds\n     * @throws {Error} If the Trade takes longer than the given timeout.\n     * @throws {APIError} If the request fails.\n     * @returns The completed Trade object.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            if (this.getTransaction().isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Trade timed out\");\n    }\n    /**\n     * Reloads the Trade model with the latest version from the server side.\n     *\n     * @returns The most recent version of Trade from the server.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.trade.getTrade(this.getWalletId(), this.getAddressId(), this.getId());\n        return this.resetModel(result?.data);\n    }\n    /**\n     * Returns a String representation of the Trade.\n     *\n     * @returns A String representation of the Trade.\n     */\n    toString() {\n        return (`Trade { transfer_id: '${this.getId()}', network_id: '${this.getNetworkId()}', ` +\n            `address_id: '${this.getAddressId()}', from_asset_id: '${this.getFromAssetId()}', ` +\n            `to_asset_id: '${this.getToAssetId()}', from_amount: '${this.getFromAmount()}', ` +\n            `to_amount: '${this.getToAmount()}', status: '${this.getStatus()}' }`);\n    }\n    /**\n     * Resets the trade model with the specified data from the server.\n     *\n     * @param model - The Trade model\n     * @returns The updated Trade object\n     */\n    resetModel(model) {\n        this.model = model;\n        this.transaction = new transaction_1.Transaction(this.model.transaction);\n        this.approveTransaction = this.model.approve_transaction\n            ? new transaction_1.Transaction(this.model.approve_transaction)\n            : undefined;\n        return this;\n    }\n}\nexports.Trade = Trade;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of an onchain Transaction.\n */\nclass Transaction {\n    /**\n     * Transactions should be constructed via higher level abstractions like Trade or Transfer.\n     *\n     * @class\n     * @param model - The underlying Transaction object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Unsigned Payload of the Transaction.\n     *\n     * @returns The Unsigned Payload\n     */\n    getUnsignedPayload() {\n        return this.model.unsigned_payload;\n    }\n    /**\n     * Returns the Signed Payload of the Transaction.\n     *\n     * @returns The Signed Payload\n     */\n    getSignedPayload() {\n        return this.model.signed_payload;\n    }\n    /**\n     * Returns the Transaction Hash of the Transaction.\n     *\n     * @returns The Transaction Hash\n     */\n    getTransactionHash() {\n        return this.model.transaction_hash;\n    }\n    /**\n     * Returns the Status of the Transaction.\n     *\n     * @returns The Status\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.TransactionStatus.PENDING:\n                return types_1.TransactionStatus.PENDING;\n            case types_1.TransactionStatus.BROADCAST:\n                return types_1.TransactionStatus.BROADCAST;\n            case types_1.TransactionStatus.SIGNED:\n                return types_1.TransactionStatus.SIGNED;\n            case types_1.TransactionStatus.COMPLETE:\n                return types_1.TransactionStatus.COMPLETE;\n            case types_1.TransactionStatus.FAILED:\n                return types_1.TransactionStatus.FAILED;\n            default:\n                return types_1.TransactionStatus.UNSPECIFIED;\n        }\n    }\n    /**\n     * Returns whether the Transaction is in a terminal State.\n     *\n     * @returns Whether the Transaction is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        return [types_1.TransactionStatus.COMPLETE, types_1.TransactionStatus.FAILED].includes(status);\n    }\n    /**\n     * Returns the From Address ID for the Transaction.\n     *\n     * @returns The From Address ID\n     */\n    fromAddressId() {\n        return this.model.from_address_id;\n    }\n    /**\n     * Returns the To Address ID for the Transaction if it's available.\n     *\n     * @returns The To Address ID\n     */\n    toAddressId() {\n        return this.model.to_address_id;\n    }\n    /**\n     * Returns the Block Height where the Transaction is recorded.\n     *\n     * @returns The Block Height\n     */\n    blockHeight() {\n        return this.model.block_height;\n    }\n    /**\n     * Returns the Block Hash where the Transaction is recorded.\n     *\n     * @returns The Block Hash\n     */\n    blockHash() {\n        return this.model.block_hash;\n    }\n    /**\n     * Returns the Content of the Transaction.\n     *\n     * @returns The transaction content\n     */\n    content() {\n        return this.model.content;\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.model.transaction_link;\n    }\n    /**\n     * Returns the Network ID of the Transaction.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the underlying raw transaction.\n     *\n     * @throws {InvalidUnsignedPayload} If the Unsigned Payload is invalid.\n     * @returns The ethers.js Transaction object\n     */\n    rawTransaction() {\n        if (this.raw) {\n            return this.raw;\n        }\n        const parsedPayload = (0, utils_1.parseUnsignedPayload)(this.getUnsignedPayload());\n        const transaction = new ethers_1.ethers.Transaction();\n        transaction.chainId = BigInt(parsedPayload.chainId);\n        transaction.nonce = BigInt(parsedPayload.nonce);\n        transaction.maxPriorityFeePerGas = BigInt(parsedPayload.maxPriorityFeePerGas);\n        transaction.maxFeePerGas = BigInt(parsedPayload.maxFeePerGas);\n        // TODO: Handle multiple currencies.\n        transaction.gasLimit = BigInt(parsedPayload.gas);\n        transaction.to = parsedPayload.to;\n        transaction.value = BigInt(parsedPayload.value);\n        transaction.data = parsedPayload.input;\n        this.raw = transaction;\n        return this.raw;\n    }\n    /**\n     * Signs the Transaction with the provided key and returns the hex signing payload.\n     *\n     * @param key - The key to sign the transaction with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        const signedPayload = await key.signTransaction(this.rawTransaction());\n        this.model.signed_payload = signedPayload;\n        // Removes the '0x' prefix as required by the API.\n        return signedPayload.slice(2);\n    }\n    /**\n     * Returns the Signed Payload of the Transaction.\n     *\n     * @returns The Signed Payload\n     */\n    getSignature() {\n        return this.getSignedPayload()?.slice(2);\n    }\n    /**\n     * Returns whether the transaction has been signed.\n     *\n     * @returns if the transaction has been signed.\n     */\n    isSigned() {\n        return !!this.getSignature();\n    }\n    /**\n     * Returns a string representation of the Transaction.\n     *\n     * @returns A string representation of the Transaction.\n     */\n    toString() {\n        return `Transaction { transactionHash: '${this.getTransactionHash()}', status: '${this.getStatus()}', unsignedPayload: '${this.getUnsignedPayload()}', signedPayload: ${this.getSignedPayload()}, transactionLink: ${this.getTransactionLink()} }`;\n    }\n}\nexports.Transaction = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transfer = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst sponsored_send_1 = __webpack_require__(/*! ./sponsored_send */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * A representation of a Transfer, which moves an Amount of an Asset from\n * a user-controlled Wallet to another Address. The fee is assumed to be paid\n * in the native Asset of the Network.\n */\nclass Transfer {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param transferModel - The Transfer model.\n     * @hideconstructor\n     */\n    constructor(transferModel) {\n        if (!transferModel) {\n            throw new Error(\"Transfer model cannot be empty\");\n        }\n        this.model = transferModel;\n    }\n    /**\n     * Converts a TransferModel into a Transfer object.\n     *\n     * @param transferModel - The Transfer model object.\n     * @returns The Transfer object.\n     */\n    static fromModel(transferModel) {\n        return new Transfer(transferModel);\n    }\n    /**\n     * Returns the ID of the Transfer.\n     *\n     * @returns The Transfer ID.\n     */\n    getId() {\n        return this.model.transfer_id;\n    }\n    /**\n     * Returns the Network ID of the Transfer.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the Transfer.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the From Address ID of the Transfer.\n     *\n     * @returns The From Address ID.\n     */\n    getFromAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Destination Address ID of the Transfer.\n     *\n     * @returns The Destination Address ID.\n     */\n    getDestinationAddressId() {\n        return this.model.destination;\n    }\n    /**\n     * Returns the Asset ID of the Transfer.\n     *\n     * @returns The Asset ID.\n     */\n    getAssetId() {\n        return this.model.asset_id;\n    }\n    /**\n     * Returns the Amount of the Transfer.\n     *\n     * @returns The Amount of the Asset.\n     */\n    getAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.amount);\n        return amount.dividedBy(new decimal_js_1.Decimal(10).pow(this.model.asset.decimals));\n    }\n    /**\n     * Returns the Transaction Hash of the Transfer.\n     *\n     * @returns The Transaction Hash as a Hex string, or undefined if not yet available.\n     */\n    getTransactionHash() {\n        return this.getSendTransactionDelegate()?.getTransactionHash();\n    }\n    /**\n     * Returns the Transaction of the Transfer.\n     *\n     * @returns The ethers.js Transaction object.\n     * @throws (InvalidUnsignedPayload) If the Unsigned Payload is invalid.\n     */\n    getRawTransaction() {\n        if (!this.getTransaction())\n            return undefined;\n        return this.getTransaction().rawTransaction();\n    }\n    /**\n     * Signs the Transfer with the provided key and returns the hex signature\n     * required for broadcasting the Transfer.\n     *\n     * @param key - The key to sign the Transfer with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        return this.getSendTransactionDelegate().sign(key);\n    }\n    /**\n     * Returns the Status of the Transfer.\n     *\n     * @returns The Status of the Transfer.\n     */\n    getStatus() {\n        switch (this.getSendTransactionDelegate().getStatus()) {\n            case types_1.TransactionStatus.PENDING:\n                return types_1.TransferStatus.PENDING;\n            case types_1.SponsoredSendStatus.PENDING:\n                return types_1.TransferStatus.PENDING;\n            case types_1.SponsoredSendStatus.SIGNED:\n                return types_1.TransferStatus.PENDING;\n            case types_1.TransactionStatus.BROADCAST:\n                return types_1.TransferStatus.BROADCAST;\n            case types_1.SponsoredSendStatus.SUBMITTED:\n                return types_1.TransferStatus.BROADCAST;\n            case types_1.TransactionStatus.COMPLETE:\n                return types_1.TransferStatus.COMPLETE;\n            case types_1.SponsoredSendStatus.COMPLETE:\n                return types_1.TransferStatus.COMPLETE;\n            case types_1.TransactionStatus.FAILED:\n                return types_1.TransferStatus.FAILED;\n            case types_1.SponsoredSendStatus.FAILED:\n                return types_1.TransferStatus.FAILED;\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * Returns the Transaction of the Transfer.\n     *\n     * @returns The Transaction\n     */\n    getTransaction() {\n        if (!this.model.transaction)\n            return undefined;\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the Sponsored Send of the Transfer.\n     *\n     * @returns The Sponsored Send\n     */\n    getSponsoredSend() {\n        if (!this.model.sponsored_send)\n            return undefined;\n        return new sponsored_send_1.SponsoredSend(this.model.sponsored_send);\n    }\n    /**\n     * Returns the Send Transaction Delegate of the Transfer.\n     *\n     * @returns Either the Transaction or the Sponsored Send\n     */\n    getSendTransactionDelegate() {\n        return !this.getTransaction() ? this.getSponsoredSend() : this.getTransaction();\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer.\n     */\n    getTransactionLink() {\n        return this.getSendTransactionDelegate()?.getTransactionLink();\n    }\n    /**\n     * Broadcasts the Transfer to the Network.\n     *\n     * @returns The Transfer object\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async broadcast() {\n        if (!this.getSendTransactionDelegate()?.isSigned())\n            throw new Error(\"Cannot broadcast unsigned Transfer\");\n        const broadcastTransferRequest = {\n            signed_payload: this.getSendTransactionDelegate().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.transfer.broadcastTransfer(this.getWalletId(), this.getFromAddressId(), this.getId(), broadcastTransferRequest);\n        return Transfer.fromModel(response.data);\n    }\n    /**\n     * Waits for the Transfer to be confirmed on the Network or fail on chain.\n     * Waits until the Transfer is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the Trade takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the Transfer.\n     * @param options.timeoutSeconds - The maximum time to wait for the Transfer to be confirmed.\n     *\n     * @returns The Transfer object in a terminal state.\n     * @throws {Error} if the Transfer times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the Transfer is in a terminal state, return the Transfer.\n            const status = this.getStatus();\n            if (status === types_1.TransferStatus.COMPLETE || status === types_1.TransferStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Transfer timed out\");\n    }\n    /**\n     * Reloads the Transfer model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Transfer fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.transfer.getTransfer(this.getWalletId(), this.getFromAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the Transfer.\n     *\n     * @returns The string representation of the Transfer.\n     */\n    toString() {\n        return (`Transfer{transferId: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `fromAddressId: '${this.getFromAddressId()}', destinationAddressId: '${this.getDestinationAddressId()}', ` +\n            `assetId: '${this.getAssetId()}', amount: '${this.getAmount()}', transactionHash: '${this.getTransactionHash()}', ` +\n            `transactionLink: '${this.getTransactionLink()}', status: '${this.getStatus()}'}`);\n    }\n}\nexports.Transfer = Transfer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmartContractType = exports.StakeOptionsMode = exports.ServerSignerStatus = exports.isMnemonicSeedPhrase = exports.isWalletData = exports.FundOperationStatus = exports.PayloadSignatureStatus = exports.StakingRewardFormat = exports.ValidatorStatus = exports.SponsoredSendStatus = exports.TransactionStatus = exports.TransferStatus = void 0;\n/**\n * Transfer status type definition.\n */\nvar TransferStatus;\n(function (TransferStatus) {\n    TransferStatus[\"PENDING\"] = \"pending\";\n    TransferStatus[\"BROADCAST\"] = \"broadcast\";\n    TransferStatus[\"COMPLETE\"] = \"complete\";\n    TransferStatus[\"FAILED\"] = \"failed\";\n})(TransferStatus || (exports.TransferStatus = TransferStatus = {}));\n/**\n * Transaction status type definition.\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    TransactionStatus[\"PENDING\"] = \"pending\";\n    TransactionStatus[\"SIGNED\"] = \"signed\";\n    TransactionStatus[\"BROADCAST\"] = \"broadcast\";\n    TransactionStatus[\"COMPLETE\"] = \"complete\";\n    TransactionStatus[\"FAILED\"] = \"failed\";\n    TransactionStatus[\"UNSPECIFIED\"] = \"unspecified\";\n})(TransactionStatus || (exports.TransactionStatus = TransactionStatus = {}));\n/**\n * Sponsored Send status type definition.\n */\nvar SponsoredSendStatus;\n(function (SponsoredSendStatus) {\n    SponsoredSendStatus[\"PENDING\"] = \"pending\";\n    SponsoredSendStatus[\"SIGNED\"] = \"signed\";\n    SponsoredSendStatus[\"SUBMITTED\"] = \"submitted\";\n    SponsoredSendStatus[\"COMPLETE\"] = \"complete\";\n    SponsoredSendStatus[\"FAILED\"] = \"failed\";\n})(SponsoredSendStatus || (exports.SponsoredSendStatus = SponsoredSendStatus = {}));\n/**\n * Validator status type definition.\n * Represents the various states a validator can be in.\n */\nvar ValidatorStatus;\n(function (ValidatorStatus) {\n    ValidatorStatus[\"UNKNOWN\"] = \"unknown\";\n    ValidatorStatus[\"PROVISIONING\"] = \"provisioning\";\n    ValidatorStatus[\"PROVISIONED\"] = \"provisioned\";\n    ValidatorStatus[\"DEPOSITED\"] = \"deposited\";\n    ValidatorStatus[\"PENDING_ACTIVATION\"] = \"pending_activation\";\n    ValidatorStatus[\"ACTIVE\"] = \"active\";\n    ValidatorStatus[\"EXITING\"] = \"exiting\";\n    ValidatorStatus[\"EXITED\"] = \"exited\";\n    ValidatorStatus[\"WITHDRAWAL_AVAILABLE\"] = \"withdrawal_available\";\n    ValidatorStatus[\"WITHDRAWAL_COMPLETE\"] = \"withdrawal_complete\";\n    ValidatorStatus[\"ACTIVE_SLASHED\"] = \"active_slashed\";\n    ValidatorStatus[\"EXITED_SLASHED\"] = \"exited_slashed\";\n    ValidatorStatus[\"REAPED\"] = \"reaped\";\n})(ValidatorStatus || (exports.ValidatorStatus = ValidatorStatus = {}));\n/**\n * Staking reward format type definition.\n * Represents the format in which staking rewards can be queried.\n */\nvar StakingRewardFormat;\n(function (StakingRewardFormat) {\n    StakingRewardFormat[\"USD\"] = \"usd\";\n    StakingRewardFormat[\"NATIVE\"] = \"native\";\n})(StakingRewardFormat || (exports.StakingRewardFormat = StakingRewardFormat = {}));\n/**\n * Payload Signature status type definition.\n */\nvar PayloadSignatureStatus;\n(function (PayloadSignatureStatus) {\n    PayloadSignatureStatus[\"PENDING\"] = \"pending\";\n    PayloadSignatureStatus[\"SIGNED\"] = \"signed\";\n    PayloadSignatureStatus[\"FAILED\"] = \"failed\";\n})(PayloadSignatureStatus || (exports.PayloadSignatureStatus = PayloadSignatureStatus = {}));\n/**\n * Fund Operation status type definition.\n */\nvar FundOperationStatus;\n(function (FundOperationStatus) {\n    FundOperationStatus[\"PENDING\"] = \"pending\";\n    FundOperationStatus[\"COMPLETE\"] = \"complete\";\n    FundOperationStatus[\"FAILED\"] = \"failed\";\n})(FundOperationStatus || (exports.FundOperationStatus = FundOperationStatus = {}));\n/**\n * Type guard to check if data matches the appropriate WalletData format.\n * WalletData must have:\n * - exactly one of (walletId or wallet_id)\n * - at most one of (networkId or network_id)\n * - a seed\n *\n * @param data - The data to check\n * @returns True if data matches the appropriate WalletData format\n */\nfunction isWalletData(data) {\n    if (typeof data !== \"object\" || data === null) {\n        return false;\n    }\n    const { walletId, wallet_id, networkId, network_id, seed } = data;\n    // Check that exactly one of walletId or wallet_id is present (but not both)\n    const hasWalletId = typeof walletId === \"string\";\n    const hasWalletSnakeId = typeof wallet_id === \"string\";\n    if (!(hasWalletId !== hasWalletSnakeId)) {\n        return false;\n    }\n    // Check that at most one of networkId or network_id is present (but not both)\n    const hasNetworkId = typeof networkId === \"string\";\n    const hasNetworkSnakeId = typeof network_id === \"string\";\n    if (hasNetworkId && hasNetworkSnakeId) {\n        return false;\n    }\n    // Check that seed is present and is a string\n    return typeof seed === \"string\";\n}\nexports.isWalletData = isWalletData;\n/**\n * Type guard to check if data matches the MnemonicSeedPhrase format.\n *\n * @param data - The data to check\n * @returns True if data matches the MnemonicSeedPhrase format\n */\nfunction isMnemonicSeedPhrase(data) {\n    if (typeof data !== \"object\" || data === null) {\n        return false;\n    }\n    const { mnemonicPhrase } = data;\n    return typeof mnemonicPhrase === \"string\";\n}\nexports.isMnemonicSeedPhrase = isMnemonicSeedPhrase;\n/**\n * ServerSigner status type definition.\n */\nvar ServerSignerStatus;\n(function (ServerSignerStatus) {\n    ServerSignerStatus[\"PENDING\"] = \"pending_seed_creation\";\n    ServerSignerStatus[\"ACTIVE\"] = \"active_seed\";\n})(ServerSignerStatus || (exports.ServerSignerStatus = ServerSignerStatus = {}));\n/**\n * StakeOptionsMode type definition.\n */\nvar StakeOptionsMode;\n(function (StakeOptionsMode) {\n    /**\n     * Defaults to the mode specific to the asset.\n     */\n    StakeOptionsMode[\"DEFAULT\"] = \"default\";\n    /**\n     * Partial represents Partial Ethereum Staking mode.\n     */\n    StakeOptionsMode[\"PARTIAL\"] = \"partial\";\n    /**\n     * Native represents Native Ethereum Staking mode.\n     */\n    StakeOptionsMode[\"NATIVE\"] = \"native\";\n})(StakeOptionsMode || (exports.StakeOptionsMode = StakeOptionsMode = {}));\n/**\n * Smart Contract Type\n */\nvar SmartContractType;\n(function (SmartContractType) {\n    SmartContractType[\"ERC20\"] = \"erc20\";\n    SmartContractType[\"ERC721\"] = \"erc721\";\n    SmartContractType[\"ERC1155\"] = \"erc1155\";\n    SmartContractType[\"CUSTOM\"] = \"custom\";\n})(SmartContractType || (exports.SmartContractType = SmartContractType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getWeekBackDate = exports.formatDate = exports.parseUnsignedPayload = exports.delay = exports.convertStringToHex = exports.registerAxiosInterceptors = exports.logApiResponse = void 0;\nconst api_error_1 = __webpack_require__(/*! ./api_error */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * Prints Axios response to the console for debugging purposes.\n *\n * @param response - The Axios response object.\n * @param debugging - Flag to enable or disable logging.\n * @returns The Axios response object.\n */\nconst logApiResponse = (response, debugging = false) => {\n    if (debugging) {\n        let output = typeof response.data === \"string\" ? response.data : \"\";\n        if (typeof response.data === \"object\") {\n            output = JSON.stringify(response.data, null, 4);\n        }\n        console.log(`API RESPONSE: \n      Status: ${response.status} \n      URL: ${response.config.url} \n      Data: ${output}`);\n    }\n    return response;\n};\nexports.logApiResponse = logApiResponse;\n/**\n * Registers request and response interceptors to an Axios instance.\n *\n * @param axiosInstance - The Axios instance to register the interceptors.\n * @param requestFn - The request interceptor function.\n * @param responseFn - The response interceptor function.\n */\nconst registerAxiosInterceptors = (axiosInstance, requestFn, responseFn) => {\n    axiosInstance.interceptors.request.use(requestFn);\n    axiosInstance.interceptors.response.use(responseFn, error => {\n        return Promise.reject(api_error_1.APIError.fromError(error));\n    });\n};\nexports.registerAxiosInterceptors = registerAxiosInterceptors;\n/**\n * Converts a Uint8Array to a hex string.\n *\n * @param key - The key to convert.\n * @returns The converted hex string.\n */\nconst convertStringToHex = (key) => {\n    return Buffer.from(key).toString(\"hex\");\n};\nexports.convertStringToHex = convertStringToHex;\n/**\n * Delays the execution of the function by the specified number of seconds.\n *\n * @param seconds - The number of seconds to delay the execution.\n * @returns A promise that resolves after the specified number of seconds.\n */\nasync function delay(seconds) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\nexports.delay = delay;\n/**\n * Parses an Unsigned Payload and returns the JSON object.\n *\n * @throws {InvalidUnsignedPayload} If the Unsigned Payload is invalid.\n * @param payload - The Unsigned Payload.\n * @returns The parsed JSON object.\n */\nfunction parseUnsignedPayload(payload) {\n    const rawPayload = payload.match(/../g)?.map(byte => parseInt(byte, 16));\n    if (!rawPayload) {\n        throw new errors_1.InvalidUnsignedPayloadError(\"Unable to parse unsigned payload\");\n    }\n    let parsedPayload;\n    try {\n        const rawPayloadBytes = new Uint8Array(rawPayload);\n        const decoder = new TextDecoder();\n        parsedPayload = JSON.parse(decoder.decode(rawPayloadBytes));\n    }\n    catch (error) {\n        throw new errors_1.InvalidUnsignedPayloadError(\"Unable to decode unsigned payload JSON\");\n    }\n    return parsedPayload;\n}\nexports.parseUnsignedPayload = parseUnsignedPayload;\n/**\n * Formats the input date to 'YYYY-MM-DD'\n *\n * @param date - The date to format.\n *\n * @returns a formated date of 'YYYY-MM-DD'\n */\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are zero-based, so add 1\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}T00:00:00Z`;\n}\nexports.formatDate = formatDate;\n/**\n *\n * Takes a date and subtracts a week from it. (7 days)\n *\n * @param date - The date to be formatted.\n *\n * @returns a formatted date that is one week ago.\n */\nfunction getWeekBackDate(date) {\n    date.setDate(date.getDate() - 7);\n    return formatDate(date);\n}\nexports.getWeekBackDate = getWeekBackDate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLGtCQUFrQixHQUFHLDRCQUE0QixHQUFHLGFBQWEsR0FBRywwQkFBMEIsR0FBRyxpQ0FBaUMsR0FBRyxzQkFBc0I7QUFDckwsb0JBQW9CLG1CQUFPLENBQUMsMkZBQWE7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMscUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0EsY0FBYyxLQUFLLEdBQUcsTUFBTSxHQUFHLElBQUk7QUFDbkM7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS91dGlscy5qcz84ODc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRXZWVrQmFja0RhdGUgPSBleHBvcnRzLmZvcm1hdERhdGUgPSBleHBvcnRzLnBhcnNlVW5zaWduZWRQYXlsb2FkID0gZXhwb3J0cy5kZWxheSA9IGV4cG9ydHMuY29udmVydFN0cmluZ1RvSGV4ID0gZXhwb3J0cy5yZWdpc3RlckF4aW9zSW50ZXJjZXB0b3JzID0gZXhwb3J0cy5sb2dBcGlSZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IGFwaV9lcnJvcl8xID0gcmVxdWlyZShcIi4vYXBpX2Vycm9yXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG4vKipcbiAqIFByaW50cyBBeGlvcyByZXNwb25zZSB0byB0aGUgY29uc29sZSBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICpcbiAqIEBwYXJhbSByZXNwb25zZSAtIFRoZSBBeGlvcyByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0gZGVidWdnaW5nIC0gRmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSBsb2dnaW5nLlxuICogQHJldHVybnMgVGhlIEF4aW9zIHJlc3BvbnNlIG9iamVjdC5cbiAqL1xuY29uc3QgbG9nQXBpUmVzcG9uc2UgPSAocmVzcG9uc2UsIGRlYnVnZ2luZyA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKGRlYnVnZ2luZykge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdHlwZW9mIHJlc3BvbnNlLmRhdGEgPT09IFwic3RyaW5nXCIgPyByZXNwb25zZS5kYXRhIDogXCJcIjtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5kYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhLCBudWxsLCA0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgQVBJIFJFU1BPTlNFOiBcbiAgICAgIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9IFxuICAgICAgVVJMOiAke3Jlc3BvbnNlLmNvbmZpZy51cmx9IFxuICAgICAgRGF0YTogJHtvdXRwdXR9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnRzLmxvZ0FwaVJlc3BvbnNlID0gbG9nQXBpUmVzcG9uc2U7XG4vKipcbiAqIFJlZ2lzdGVycyByZXF1ZXN0IGFuZCByZXNwb25zZSBpbnRlcmNlcHRvcnMgdG8gYW4gQXhpb3MgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGF4aW9zSW5zdGFuY2UgLSBUaGUgQXhpb3MgaW5zdGFuY2UgdG8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9ycy5cbiAqIEBwYXJhbSByZXF1ZXN0Rm4gLSBUaGUgcmVxdWVzdCBpbnRlcmNlcHRvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSByZXNwb25zZUZuIC0gVGhlIHJlc3BvbnNlIGludGVyY2VwdG9yIGZ1bmN0aW9uLlxuICovXG5jb25zdCByZWdpc3RlckF4aW9zSW50ZXJjZXB0b3JzID0gKGF4aW9zSW5zdGFuY2UsIHJlcXVlc3RGbiwgcmVzcG9uc2VGbikgPT4ge1xuICAgIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKHJlcXVlc3RGbik7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlRm4sIGVycm9yID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGFwaV9lcnJvcl8xLkFQSUVycm9yLmZyb21FcnJvcihlcnJvcikpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMucmVnaXN0ZXJBeGlvc0ludGVyY2VwdG9ycyA9IHJlZ2lzdGVyQXhpb3NJbnRlcmNlcHRvcnM7XG4vKipcbiAqIENvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIGhleCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgaGV4IHN0cmluZy5cbiAqL1xuY29uc3QgY29udmVydFN0cmluZ1RvSGV4ID0gKGtleSkgPT4ge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShrZXkpLnRvU3RyaW5nKFwiaGV4XCIpO1xufTtcbmV4cG9ydHMuY29udmVydFN0cmluZ1RvSGV4ID0gY29udmVydFN0cmluZ1RvSGV4O1xuLyoqXG4gKiBEZWxheXMgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb24gYnkgdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byBkZWxheSB0aGUgZXhlY3V0aW9uLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc2Vjb25kcy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZGVsYXkoc2Vjb25kcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyAqIDEwMDApKTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8qKlxuICogUGFyc2VzIGFuIFVuc2lnbmVkIFBheWxvYWQgYW5kIHJldHVybnMgdGhlIEpTT04gb2JqZWN0LlxuICpcbiAqIEB0aHJvd3Mge0ludmFsaWRVbnNpZ25lZFBheWxvYWR9IElmIHRoZSBVbnNpZ25lZCBQYXlsb2FkIGlzIGludmFsaWQuXG4gKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBVbnNpZ25lZCBQYXlsb2FkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBKU09OIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VVbnNpZ25lZFBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IHJhd1BheWxvYWQgPSBwYXlsb2FkLm1hdGNoKC8uLi9nKT8ubWFwKGJ5dGUgPT4gcGFyc2VJbnQoYnl0ZSwgMTYpKTtcbiAgICBpZiAoIXJhd1BheWxvYWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRVbnNpZ25lZFBheWxvYWRFcnJvcihcIlVuYWJsZSB0byBwYXJzZSB1bnNpZ25lZCBwYXlsb2FkXCIpO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkUGF5bG9hZDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByYXdQYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShyYXdQYXlsb2FkKTtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICBwYXJzZWRQYXlsb2FkID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShyYXdQYXlsb2FkQnl0ZXMpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkVW5zaWduZWRQYXlsb2FkRXJyb3IoXCJVbmFibGUgdG8gZGVjb2RlIHVuc2lnbmVkIHBheWxvYWQgSlNPTlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZFBheWxvYWQ7XG59XG5leHBvcnRzLnBhcnNlVW5zaWduZWRQYXlsb2FkID0gcGFyc2VVbnNpZ25lZFBheWxvYWQ7XG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IGRhdGUgdG8gJ1lZWVktTU0tREQnXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBmb3JtYXQuXG4gKlxuICogQHJldHVybnMgYSBmb3JtYXRlZCBkYXRlIG9mICdZWVlZLU1NLUREJ1xuICovXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsIFwiMFwiKTsgLy8gTW9udGhzIGFyZSB6ZXJvLWJhc2VkLCBzbyBhZGQgMVxuICAgIGNvbnN0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIHJldHVybiBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1UMDA6MDA6MDBaYDtcbn1cbmV4cG9ydHMuZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7XG4vKipcbiAqXG4gKiBUYWtlcyBhIGRhdGUgYW5kIHN1YnRyYWN0cyBhIHdlZWsgZnJvbSBpdC4gKDcgZGF5cylcbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGJlIGZvcm1hdHRlZC5cbiAqXG4gKiBAcmV0dXJucyBhIGZvcm1hdHRlZCBkYXRlIHRoYXQgaXMgb25lIHdlZWsgYWdvLlxuICovXG5mdW5jdGlvbiBnZXRXZWVrQmFja0RhdGUoZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIDcpO1xuICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUpO1xufVxuZXhwb3J0cy5nZXRXZWVrQmFja0RhdGUgPSBnZXRXZWVrQmFja0RhdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Validator = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of a validator onchain.\n */\nclass Validator {\n    /**\n     * Creates a Validator object.\n     *\n     * @class\n     * @param model - The underlying Validator object.\n     * @throws {Error} - If the Validator model is empty.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the list of Validators.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param status - The status to filter by.\n     * @returns The list of Validators.\n     */\n    static async list(networkId, assetId, status) {\n        const validators = [];\n        const response = await coinbase_1.Coinbase.apiClients.stake.listValidators(networkId, assetId, Validator.getAPIValidatorStatus(status));\n        response.data.data.forEach(validator => {\n            validators.push(new Validator(validator));\n        });\n        return validators;\n    }\n    /**\n     *\n     * Returns the details of a specific validator.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param id - The unique publicly identifiable id of the validator for which to fetch the data.\n     * @returns The requested validator details.\n     */\n    static async fetch(networkId, assetId, id) {\n        const response = await coinbase_1.Coinbase.apiClients.stake.getValidator(networkId, assetId, id);\n        return new Validator(response.data);\n    }\n    /**\n     * Returns the Validator status.\n     *\n     * @param status - The API Validator status.\n     * @returns The Validator status.\n     */\n    static getAPIValidatorStatus(status) {\n        /* istanbul ignore next */\n        switch (status) {\n            case types_1.ValidatorStatus.UNKNOWN:\n                return api_1.ValidatorStatus.Unknown;\n            case types_1.ValidatorStatus.PROVISIONING:\n                return api_1.ValidatorStatus.Provisioning;\n            case types_1.ValidatorStatus.PROVISIONED:\n                return api_1.ValidatorStatus.Provisioned;\n            case types_1.ValidatorStatus.DEPOSITED:\n                return api_1.ValidatorStatus.Deposited;\n            case types_1.ValidatorStatus.PENDING_ACTIVATION:\n                return api_1.ValidatorStatus.PendingActivation;\n            case types_1.ValidatorStatus.ACTIVE:\n                return api_1.ValidatorStatus.Active;\n            case types_1.ValidatorStatus.EXITING:\n                return api_1.ValidatorStatus.Exiting;\n            case types_1.ValidatorStatus.EXITED:\n                return api_1.ValidatorStatus.Exited;\n            case types_1.ValidatorStatus.WITHDRAWAL_AVAILABLE:\n                return api_1.ValidatorStatus.WithdrawalAvailable;\n            case types_1.ValidatorStatus.WITHDRAWAL_COMPLETE:\n                return api_1.ValidatorStatus.WithdrawalComplete;\n            case types_1.ValidatorStatus.ACTIVE_SLASHED:\n                return api_1.ValidatorStatus.ActiveSlashed;\n            case types_1.ValidatorStatus.EXITED_SLASHED:\n                return api_1.ValidatorStatus.ExitedSlashed;\n            case types_1.ValidatorStatus.REAPED:\n                return api_1.ValidatorStatus.Reaped;\n            default:\n                return api_1.ValidatorStatus.Unknown;\n        }\n    }\n    /**\n     * Returns the Validator ID.\n     *\n     * @returns The Validator ID.\n     */\n    getValidatorId() {\n        return this.model.validator_id;\n    }\n    /**\n     * Returns the Validator status.\n     *\n     * @returns The Validator status.\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case api_1.ValidatorStatus.Unknown:\n                return types_1.ValidatorStatus.UNKNOWN;\n            case api_1.ValidatorStatus.Provisioning:\n                return types_1.ValidatorStatus.PROVISIONING;\n            case api_1.ValidatorStatus.Provisioned:\n                return types_1.ValidatorStatus.PROVISIONED;\n            case api_1.ValidatorStatus.Deposited:\n                return types_1.ValidatorStatus.DEPOSITED;\n            case api_1.ValidatorStatus.PendingActivation:\n                return types_1.ValidatorStatus.PENDING_ACTIVATION;\n            case api_1.ValidatorStatus.Active:\n                return types_1.ValidatorStatus.ACTIVE;\n            case api_1.ValidatorStatus.Exiting:\n                return types_1.ValidatorStatus.EXITING;\n            case api_1.ValidatorStatus.Exited:\n                return types_1.ValidatorStatus.EXITED;\n            case api_1.ValidatorStatus.WithdrawalAvailable:\n                return types_1.ValidatorStatus.WITHDRAWAL_AVAILABLE;\n            case api_1.ValidatorStatus.WithdrawalComplete:\n                return types_1.ValidatorStatus.WITHDRAWAL_COMPLETE;\n            case api_1.ValidatorStatus.ActiveSlashed:\n                return types_1.ValidatorStatus.ACTIVE_SLASHED;\n            case api_1.ValidatorStatus.ExitedSlashed:\n                return types_1.ValidatorStatus.EXITED_SLASHED;\n            case api_1.ValidatorStatus.Reaped:\n                return types_1.ValidatorStatus.REAPED;\n            default:\n                return types_1.ValidatorStatus.UNKNOWN;\n        }\n    }\n    /**\n     * Returns the network ID.\n     *\n     * @returns The network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the asset ID.\n     *\n     * @returns The asset ID.\n     */\n    getAssetId() {\n        return this.model.asset_id;\n    }\n    /**\n     * Returns the activation epoch of the validator.\n     *\n     * @returns The activation epoch as a string.\n     */\n    getActivationEpoch() {\n        return this.model.details?.activationEpoch || \"\";\n    }\n    /**\n     * Returns the balance of the validator.\n     *\n     * @returns The balance object.\n     */\n    getBalance() {\n        return this.model.details?.balance;\n    }\n    /**\n     * Returns the effective balance of the validator.\n     *\n     * @returns The effective balance object.\n     */\n    getEffectiveBalance() {\n        return this.model.details?.effective_balance;\n    }\n    /**\n     * Returns the exit epoch of the validator.\n     *\n     * @returns The exit epoch as a string.\n     */\n    getExitEpoch() {\n        return this.model.details?.exitEpoch || \"\";\n    }\n    /**\n     * Returns the index of the validator.\n     *\n     * @returns The validator index as a string.\n     */\n    getIndex() {\n        return this.model.details?.index || \"\";\n    }\n    /**\n     * Returns the public key of the validator.\n     *\n     * @returns The validator's public key as a string.\n     */\n    getPublicKey() {\n        return this.model.details?.public_key || \"\";\n    }\n    /**\n     * Returns whether the validator has been slashed.\n     *\n     * @returns True if the validator has been slashed, false otherwise.\n     */\n    isSlashed() {\n        return this.model.details?.slashed || false;\n    }\n    /**\n     * Returns the withdrawable epoch of the validator.\n     *\n     * @returns The withdrawable epoch as a string.\n     */\n    getWithdrawableEpoch() {\n        return this.model.details?.withdrawableEpoch || \"\";\n    }\n    /**\n     * Returns the withdrawal address of the validator.\n     *\n     * @returns The withdrawal address as a string.\n     */\n    getWithdrawalAddress() {\n        return this.model.details?.withdrawal_address || \"\";\n    }\n    /**\n     * Returns the address for execution layer rewards (MEV & tx fees).If using a reward splitter plan, this is a smart contract\n     * address that splits rewards based on defined commissions and send a portion to the forwarded_fee_recipient_address.\n     *\n     * @returns The fee recipient address as a string.\n     */\n    getFeeRecipientAddress() {\n        return this.model.details?.fee_recipient_address || \"\";\n    }\n    /**\n     * If using a reward splitter plan, this address receives a defined percentage of the total execution layer rewards.\n     *\n     * @returns The forwarded fee recipient address as a string.\n     */\n    getForwardedFeeRecipientAddress() {\n        return this.model.details?.forwarded_fee_recipient_address || \"\";\n    }\n    /**\n     * Returns the string representation of the Validator.\n     *\n     * @returns The string representation of the Validator.\n     */\n    toString() {\n        return `Id: ${this.getValidatorId()} Status: ${this.getStatus()}`;\n    }\n    /**\n     * Returns the JSON representation of the Validator.\n     *\n     * @returns The JSON representation of the Validator.\n     */\n    toJSON() {\n        return JSON.stringify(this.model);\n    }\n}\nexports.Validator = Validator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wallet = void 0;\nconst bip32_1 = __webpack_require__(/*! @scure/bip32 */ \"(rsc)/./node_modules/@scure/bip32/lib/index.js\");\nconst bip39_1 = __webpack_require__(/*! @scure/bip39 */ \"(rsc)/./node_modules/@scure/bip39/index.js\");\nconst english_1 = __webpack_require__(/*! @scure/bip39/wordlists/english */ \"(rsc)/./node_modules/@scure/bip39/wordlists/english.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.js\"));\nconst ethers_2 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst ed2curve = __importStar(__webpack_require__(/*! ed2curve */ \"(rsc)/./node_modules/ed2curve/ed2curve.js\"));\nconst secp256k1 = __importStar(__webpack_require__(/*! secp256k1 */ \"(rsc)/./node_modules/secp256k1/index.js\"));\nconst wallet_address_1 = __webpack_require__(/*! ./address/wallet_address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst balance_map_1 = __webpack_require__(/*! ./balance_map */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst webhook_1 = __webpack_require__(/*! ./webhook */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\");\n/**\n * A representation of a Wallet. Wallets come with a single default Address, but can expand to have a set of Addresses,\n * each of which can hold a balance of one or more Assets. Wallets can create new Addresses, list their addresses,\n * list their balances, and transfer Assets to other Addresses. Wallets should be created through User.createWallet or User.importWallet.\n * Wallets should be created using `Wallet.create`, imported using `Wallet.import`, or fetched using `Wallet.fetch`.\n * Existing wallets can be imported with a seed using `Wallet.import`.\n * Wallets backed by a Server Signer can be fetched with `Wallet.fetch` and used for signing operations immediately.\n */\nclass Wallet {\n    /**\n     * Private constructor to prevent direct instantiation outside of factory method. Use Wallet.init instead.\n     *\n     * @ignore\n     * @param model - The wallet model object.\n     * @param master - The HD master key.\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix.\n     * @hideconstructor\n     */\n    constructor(model, master, seed) {\n        this.addresses = [];\n        this.addressPathPrefix = \"m/44'/60'/0'/0\";\n        this.model = model;\n        this.master = master;\n        this.seed = seed;\n    }\n    /**\n     * Lists the Wallets belonging to the CDP Project.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Wallets to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Wallets. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Wallets.\n     */\n    static async listWallets({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.wallet.listWallets(limit, page);\n        const wallets = response.data.data;\n        for (const wallet of wallets) {\n            data.push(Wallet.init(wallet, \"\"));\n        }\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Fetches a Wallet by its ID. The returned wallet can be immediately used for signing operations if backed by a server signer.\n     * If the wallet is not backed by a server signer, the wallet's seed will need to be set before it can be used for signing operations.\n     *\n     * @param wallet_id - The ID of the Wallet to fetch\n     * @returns The fetched Wallet\n     */\n    static async fetch(wallet_id) {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.getWallet(wallet_id);\n        return Wallet.init(response.data, \"\");\n    }\n    /**\n     * Loads an existing CDP Wallet using a wallet data object or mnemonic seed phrase.\n     *\n     * @param data - The data used to import the wallet:\n     *   - If WalletData: Must contain walletId (or wallet_id) and seed.\n     *     Allows for the loading of an existing CDP wallet into CDP.\n     *   - If MnemonicSeedPhrase: Must contain a valid BIP-39 mnemonic phrase (12, 15, 18, 21, or 24 words).\n     *     Allows for the import of an external wallet into CDP as a 1-of-1 wallet.\n     * @param networkId - the ID of the blockchain network. Defaults to 'base-sepolia'.\n     * @returns A Promise that resolves to the loaded Wallet instance\n     * @throws {ArgumentError} If the data format is invalid.\n     * @throws {ArgumentError} If the seed is not provided.\n     * @throws {ArgumentError} If the mnemonic seed phrase is invalid.\n     */\n    static async import(data, networkId = coinbase_1.Coinbase.networks.BaseSepolia) {\n        // Check if data is a mnemonic seed phrase object\n        if ((0, types_1.isMnemonicSeedPhrase)(data)) {\n            // Handle mnemonic seed phrase object import\n            if (!data.mnemonicPhrase) {\n                throw new errors_1.ArgumentError(\"BIP-39 mnemonic seed phrase must be provided\");\n            }\n            if (!(0, bip39_1.validateMnemonic)(data.mnemonicPhrase, english_1.wordlist)) {\n                throw new errors_1.ArgumentError(\"Invalid BIP-39 mnemonic seed phrase\");\n            }\n            // Convert mnemonic phrase to seed\n            const seedBuffer = (0, bip39_1.mnemonicToSeedSync)(data.mnemonicPhrase);\n            const seed = (0, ethers_1.hexlify)(seedBuffer).slice(2); // remove 0x prefix\n            // Create wallet using the provided seed\n            const wallet = await Wallet.createWithSeed({\n                seed: seed,\n                networkId,\n            });\n            // Ensure the wallet is created\n            await wallet.listAddresses();\n            return wallet;\n        }\n        else if ((0, types_1.isWalletData)(data)) {\n            // Handle WalletData object import\n            const walletId = data.walletId || data.wallet_id;\n            if (!walletId) {\n                throw new errors_1.ArgumentError(\"Wallet ID must be provided\");\n            }\n            if (!data.seed) {\n                throw new errors_1.ArgumentError(\"Seed must be provided\");\n            }\n            const walletModel = await coinbase_1.Coinbase.apiClients.wallet.getWallet(walletId);\n            const wallet = Wallet.init(walletModel.data, data.seed);\n            await wallet.listAddresses();\n            return wallet;\n        }\n        else {\n            throw new errors_1.ArgumentError(\"Invalid import data format\");\n        }\n    }\n    /**\n     * Creates a new Wallet with a random seed.\n     *\n     * @constructs Wallet\n     * @param options - The options to create the Wallet.\n     * @param options.networkId - the ID of the blockchain network. Defaults to 'base-sepolia'.\n     * @param options.intervalSeconds - The interval at which to poll the backend, in seconds.\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the ServerSigner to create a seed, in seconds.\n     * @throws {ArgumentError} If the model or client is not provided.\n     * @throws {Error} - If address derivation or caching fails.\n     * @throws {APIError} - If the request fails.\n     * @returns A promise that resolves with the new Wallet object.\n     */\n    static async create({ networkId = coinbase_1.Coinbase.networks.BaseSepolia, timeoutSeconds = 20, intervalSeconds = 0.2, } = {}) {\n        return Wallet.createWithSeed({\n            networkId,\n            timeoutSeconds,\n            intervalSeconds,\n        });\n    }\n    /**\n     * Creates a new Wallet with the given seed.\n     *\n     * @param options - The options to create the Wallet.\n     * @param options.seed - The seed to use for the Wallet. If undefined, a random seed will be generated.\n     * @param options.networkId - the ID of the blockchain network. Defaults to 'base-sepolia'.\n     * @param options.intervalSeconds - The interval at which to poll the backend, in seconds.\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the ServerSigner to create a seed, in seconds.\n     * @throws {ArgumentError} If the model or client is not provided.\n     * @throws {Error} - If address derivation or caching fails.\n     * @throws {APIError} - If the request fails.\n     * @returns A promise that resolves with the new Wallet object.\n     */\n    static async createWithSeed({ seed = undefined, networkId = coinbase_1.Coinbase.networks.BaseSepolia, timeoutSeconds = 20, intervalSeconds = 0.2, } = {}) {\n        const result = await coinbase_1.Coinbase.apiClients.wallet.createWallet({\n            wallet: {\n                network_id: networkId,\n                use_server_signer: coinbase_1.Coinbase.useServerSigner,\n            },\n        });\n        const wallet = Wallet.init(result.data, seed);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            await wallet.waitForSigner(wallet.getId(), intervalSeconds, timeoutSeconds);\n        }\n        await wallet.createAddress();\n        return wallet;\n    }\n    /**\n     * Returns a new Wallet object. Do not use this method directly. Instead, use one of:\n     * - Wallet.create (Create a new Wallet),\n     * - Wallet.import (Import a Wallet with seed),\n     * - Wallet.fetch (fetch a Wallet by ID w/o seed, useful for server signer wallets).\n     *\n     * @constructs Wallet\n     * @param model - The underlying Wallet model object\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix. If null or undefined, a new seed will be generated.\n     * If the empty string, no seed is generated, and the Wallet will be instantiated without a seed and its corresponding private keys.\n     * @throws {ArgumentError} If the model or client is not provided.\n     * @throws {Error} - If address derivation or caching fails.\n     * @throws {APIError} - If the request fails.\n     * @returns A promise that resolves with the new Wallet object.\n     */\n    static init(model, seed) {\n        const wallet = new Wallet(model, undefined, seed);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return wallet;\n        }\n        wallet.setMasterNode(seed);\n        return wallet;\n    }\n    /**\n     * Exports the Wallet's data to a WalletData object.\n     *\n     * @returns The Wallet's data.\n     * @throws {APIError} - If the request fails.\n     */\n    export() {\n        if (!this.seed) {\n            throw new Error(\"Cannot export Wallet without loaded seed\");\n        }\n        return {\n            walletId: this.getId(),\n            seed: this.seed,\n            networkId: this.getNetworkId(),\n        };\n    }\n    /**\n     * Creates a new Address in the Wallet.\n     *\n     * @returns The new Address.\n     * @throws {APIError} - If the address creation fails.\n     */\n    async createAddress() {\n        let payload, key;\n        if (!coinbase_1.Coinbase.useServerSigner) {\n            // TODO: Coordinate this value with concurrent calls to createAddress.\n            const addressIndex = this.addresses.length;\n            const hdKey = this.deriveKey(addressIndex);\n            const attestation = this.createAttestation(hdKey);\n            const publicKey = (0, utils_1.convertStringToHex)(hdKey.publicKey);\n            key = new ethers_2.ethers.Wallet((0, utils_1.convertStringToHex)(hdKey.privateKey));\n            payload = {\n                public_key: publicKey,\n                attestation: attestation,\n                address_index: addressIndex,\n            };\n        }\n        const response = await coinbase_1.Coinbase.apiClients.address.createAddress(this.model.id, payload);\n        if (!this.addresses.length || !coinbase_1.Coinbase.useServerSigner) {\n            await this.reload();\n        }\n        const address = new wallet_address_1.WalletAddress(response.data, key);\n        this.addresses.push(address);\n        return address;\n    }\n    /**\n     * Set the seed for the Wallet.\n     *\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix.\n     * @throws {ArgumentError} If the seed is empty.\n     * @throws {Error} If the seed is already set.\n     */\n    setSeed(seed) {\n        if (seed === undefined || seed === \"\") {\n            throw new errors_1.ArgumentError(\"Seed must not be empty\");\n        }\n        if (this.master) {\n            throw new Error(\"Seed is already set\");\n        }\n        this.setMasterNode(seed);\n        if (this.addresses.length < 1) {\n            return;\n        }\n        this.addresses.forEach((address, index) => {\n            const derivedKey = this.deriveKey(index);\n            const etherWallet = new ethers_2.ethers.Wallet((0, utils_1.convertStringToHex)(derivedKey.privateKey));\n            if (etherWallet.address != address.getId()) {\n                throw new Error(`Seed does not match wallet; cannot find address ${etherWallet.address}`);\n            }\n            address.setKey(etherWallet);\n        });\n    }\n    /**\n     * Returns the WalletAddress with the given ID.\n     *\n     * @param addressId - The ID of the WalletAddress to retrieve.\n     * @returns The WalletAddress.\n     */\n    async getAddress(addressId) {\n        if (this.addresses.length < 1) {\n            this.addresses = await this.listAddresses();\n        }\n        return this.addresses.find(address => {\n            return address.getId() === addressId;\n        });\n    }\n    /**\n     * Returns the list of Addresses in the Wallet.\n     *\n     * @returns The list of Addresses.\n     */\n    async listAddresses() {\n        const response = await coinbase_1.Coinbase.apiClients.address.listAddresses(this.getId(), Wallet.MAX_ADDRESSES);\n        const addresses = response.data.data.map(address => {\n            return this.buildWalletAddress(address, address.index);\n        });\n        this.addresses = addresses;\n        return addresses;\n    }\n    /**\n     *  Trades the given amount of the given Asset for another Asset.\n     *  Currently only the default address is used to source the Trade.\n     *\n     * @param options - The options to create the Trade.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.fromAssetId - The ID of the Asset to trade from.\n     * @param options.toAssetId - The ID of the Asset to trade to.\n     * @throws {Error} If the default address is not found.\n     * @throws {Error} If the private key is not loaded, or if the asset IDs are unsupported, or if there are insufficient funds.\n     * @returns The created Trade object.\n     */\n    async createTrade(options) {\n        return (await this.getDefaultAddress()).createTrade(options);\n    }\n    /**\n     * Get the stakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the stakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the stakeable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The stakeable balance.\n     */\n    async stakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).stakeableBalance(asset_id, mode, options);\n    }\n    /**\n     * Get the unstakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the unstakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the unstakeable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The unstakeable balance.\n     */\n    async unstakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).unstakeableBalance(asset_id, mode, options);\n    }\n    /**\n     * Get the pending claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check pending claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the pending claimable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The pending claimable balance.\n     */\n    async pendingClaimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).pendingClaimableBalance(asset_id, mode, options);\n    }\n    /**\n     * Get the claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the claimable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The claimable balance.\n     */\n    async claimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).claimableBalance(asset_id, mode, options);\n    }\n    /**\n     * Lists the staking rewards for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking rewards.\n     */\n    async stakingRewards(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date()), format = types_1.StakingRewardFormat.USD) {\n        return (await this.getDefaultAddress()).stakingRewards(assetId, startTime, endTime, format);\n    }\n    /**\n     * Lists the historical staking balances for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking balances.\n     */\n    async historicalStakingBalances(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date())) {\n        return (await this.getDefaultAddress()).historicalStakingBalances(assetId, startTime, endTime);\n    }\n    /**\n     * Lists the historical balances for a given asset belonging to the default address of the wallet.\n     *\n     * @param assetId - The asset ID.\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Historical Balances to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Historical Balances. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Historical Balances for the given Asset ID.\n     */\n    async listHistoricalBalances(assetId, { limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined } = {}) {\n        return (await this.getDefaultAddress()).listHistoricalBalances(assetId, { limit, page });\n    }\n    /**\n     * Creates a staking operation to stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createStake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to unstake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createUnstake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createUnstake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to claim stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createClaimStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createClaimStake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Returns the list of balances of this Wallet. Balances are aggregated across all Addresses in the Wallet.\n     *\n     * @returns The list of balances. The key is the Asset ID, and the value is the balance.\n     */\n    async listBalances() {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.listWalletBalances(this.model.id);\n        return balance_map_1.BalanceMap.fromBalances(response.data.data);\n    }\n    /**\n     * Returns the balance of the provided Asset. Balances are aggregated across all Addresses in the Wallet.\n     *\n     * @param assetId - The ID of the Asset to retrieve the balance for.\n     * @returns The balance of the Asset.\n     */\n    async getBalance(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.getWalletBalance(this.model.id, asset_1.Asset.primaryDenomination(assetId));\n        if (!response.data.amount) {\n            return new decimal_js_1.default(0);\n        }\n        const balance = balance_1.Balance.fromModelAndAssetId(response.data, assetId);\n        return balance.amount;\n    }\n    /**\n     * Returns the Network ID of the Wallet.\n     *\n     * @returns The network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the ServerSigner Status of the Wallet.\n     *\n     * @returns the ServerSigner Status.\n     */\n    getServerSignerStatus() {\n        const status = {\n            pending_seed_creation: types_1.ServerSignerStatus.PENDING,\n            active_seed: types_1.ServerSignerStatus.ACTIVE,\n        };\n        return this.model.server_signer_status ? status[this.model.server_signer_status] : undefined;\n    }\n    /**\n     * Returns the wallet ID.\n     *\n     * @returns The wallet ID.\n     */\n    getId() {\n        return this.model.id;\n    }\n    /**\n     * Saves the seed of the Wallet to the given file.\n     *\n     * @deprecated Use saveSeedToFile() instead\n     * @param filePath - The path of the file to save the seed to\n     * @param encrypt - Whether the seed information persisted to the local file system should be\n     * encrypted or not. Data is unencrypted by default.\n     * @returns A string indicating the success of the operation\n     * @throws {Error} If the Wallet does not have a seed\n     */\n    saveSeed(filePath, encrypt = false) {\n        return this.saveSeedToFile(filePath, encrypt);\n    }\n    /**\n     * Saves the seed of the Wallet to the given file. Wallets whose seeds are saved this way can be\n     * rehydrated using load_seed. A single file can be used for multiple Wallet seeds.\n     * This is an insecure method of storing Wallet seeds and should only be used for development purposes.\n     *\n     * @param filePath - The path of the file to save the seed to\n     * @param encrypt - Whether the seed information persisted to the local file system should be\n     * encrypted or not. Data is unencrypted by default.\n     * @returns A string indicating the success of the operation\n     * @throws {Error} If the Wallet does not have a seed\n     */\n    saveSeedToFile(filePath, encrypt = false) {\n        if (!this.master) {\n            throw new Error(\"Cannot save Wallet without loaded seed\");\n        }\n        const existingSeedsInStore = this.getExistingSeeds(filePath);\n        const data = this.export();\n        let seedToStore = data.seed;\n        let authTag = \"\";\n        let iv = \"\";\n        if (encrypt) {\n            const ivBytes = crypto.randomBytes(12);\n            const sharedSecret = this.getEncryptionKey();\n            const cipher = crypto.createCipheriv(\"aes-256-gcm\", crypto.createHash(\"sha256\").update(sharedSecret).digest(), ivBytes);\n            const encryptedData = Buffer.concat([cipher.update(data.seed, \"utf8\"), cipher.final()]);\n            authTag = cipher.getAuthTag().toString(\"hex\");\n            seedToStore = encryptedData.toString(\"hex\");\n            iv = ivBytes.toString(\"hex\");\n        }\n        existingSeedsInStore[data.walletId] = {\n            seed: seedToStore,\n            encrypted: encrypt,\n            authTag: authTag,\n            iv: iv,\n            networkId: data.networkId,\n        };\n        fs.writeFileSync(filePath, JSON.stringify(existingSeedsInStore, null, 2), \"utf8\");\n        return `Successfully saved seed for ${data.walletId} to ${filePath}.`;\n    }\n    /**\n     * Loads the seed of the Wallet from the given file.\n     *\n     * @deprecated Use loadSeedFromFile() instead\n     * @param filePath - The path of the file to load the seed from\n     * @returns A string indicating the success of the operation\n     */\n    async loadSeed(filePath) {\n        return this.loadSeedFromFile(filePath);\n    }\n    /**\n     * Loads the seed of the Wallet from the given file.\n     *\n     * @param filePath - The path of the file to load the seed from\n     * @returns A string indicating the success of the operation\n     */\n    async loadSeedFromFile(filePath) {\n        const existingSeedsInStore = this.getExistingSeeds(filePath);\n        if (Object.keys(existingSeedsInStore).length === 0) {\n            throw new errors_1.ArgumentError(`File ${filePath} does not contain any seed data`);\n        }\n        if (existingSeedsInStore[this.getId()] === undefined) {\n            throw new errors_1.ArgumentError(`File ${filePath} does not contain seed data for wallet ${this.getId()}`);\n        }\n        const seedData = existingSeedsInStore[this.getId()];\n        let seed = seedData.seed;\n        if (!seed) {\n            /* istanbul ignore next */\n            throw new errors_1.ArgumentError(\"Seed data is malformed\");\n        }\n        if (seedData.encrypted) {\n            const sharedSecret = this.getEncryptionKey();\n            if (!seedData.iv || !seedData.authTag) {\n                /* istanbul ignore next */\n                throw new errors_1.ArgumentError(\"Encrypted seed data is malformed\");\n            }\n            const decipher = crypto.createDecipheriv(\"aes-256-gcm\", crypto.createHash(\"sha256\").update(sharedSecret).digest(), Buffer.from(seedData.iv, \"hex\"));\n            decipher.setAuthTag(Buffer.from(seedData.authTag, \"hex\"));\n            const decryptedData = Buffer.concat([\n                decipher.update(Buffer.from(seed, \"hex\")),\n                decipher.final(),\n            ]);\n            seed = decryptedData.toString(\"utf8\");\n        }\n        this.setSeed(seed);\n        await this.listAddresses();\n        return `Successfully loaded seed for wallet ${this.getId()} from ${filePath}.`;\n    }\n    /**\n     * Returns the default address of the Wallet.\n     *\n     * @returns The default address\n     */\n    async getDefaultAddress() {\n        if (this.model.default_address === undefined) {\n            throw new Error(\"WalletModel default address not set\");\n        }\n        const defaultAddress = await this.getAddress(this.model.default_address.address_id);\n        if (!defaultAddress) {\n            throw new Error(\"Default address not found\");\n        }\n        return defaultAddress;\n    }\n    /**\n     * Returns whether the Wallet has a seed with which to derive keys and sign transactions.\n     *\n     * @returns Whether the Wallet has a seed with which to derive keys and sign transactions.\n     */\n    canSign() {\n        return this.master?.publicKey !== undefined;\n    }\n    /**\n     * Requests funds from the faucet for the Wallet's default address and returns the faucet transaction.\n     * This is only supported on testnet networks.\n     *\n     * @param assetId - The ID of the Asset to request from the faucet.\n     * @throws {Error} If the default address is not found.\n     * @throws {APIError} If the request fails.\n     * @returns The successful faucet transaction\n     */\n    async faucet(assetId) {\n        if (!this.model.default_address) {\n            throw new Error(\"Default address not found\");\n        }\n        const transaction = (await this.getDefaultAddress()).faucet(assetId);\n        return transaction;\n    }\n    /**\n     * Transfers the given amount of the given Asset to the given address. Only same-Network Transfers are supported.\n     * Currently only the default_address is used to source the Transfer.\n     *\n     * @param options - The options to create the Transfer.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.assetId - The ID of the Asset to send.\n     * @param options.destination - The destination of the transfer. If a Wallet, sends to the Wallet's default address. If a String, interprets it as the address ID.\n     * @param options.gasless - Whether the Transfer should be gasless. Defaults to false.\n     * @param options.skipBatching - When true, the Transfer will be submitted immediately. Otherwise, the Transfer will be batched. Defaults to false. Note: requires gasless option to be set to true.\n     * @returns The created Transfer object.\n     * @throws {APIError} if the API request to create a Transfer fails.\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async createTransfer(options) {\n        return (await this.getDefaultAddress()).createTransfer(options);\n    }\n    /**\n     * Creates a Payload Signature.\n     *\n     * @param unsignedPayload - The Unsigned Payload to sign.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to create a Payload Signature fails.\n     * @throws {Error} if the default address is not found.\n     */\n    async createPayloadSignature(unsignedPayload) {\n        return (await this.getDefaultAddress()).createPayloadSignature(unsignedPayload);\n    }\n    /**\n     * Creates a Webhook for a wallet, monitors all wallet addresses for onchain events.\n     *\n     * @param notificationUri - The URI to which the webhook notifications will be sent.\n     *\n     * @returns The newly created webhook instance.\n     */\n    async createWebhook(notificationUri) {\n        const result = await coinbase_1.Coinbase.apiClients.webhook.createWalletWebhook(this.getId(), {\n            notification_uri: notificationUri,\n        });\n        return webhook_1.Webhook.init(result.data);\n    }\n    /**\n     * Invokes a contract with the given data.\n     *\n     * @param options - The options to invoke the contract\n     * @param options.contractAddress - The address of the contract the method will be invoked on.\n     * @param options.method - The method to invoke on the contract.\n     * @param options.abi - The ABI of the contract.\n     * @param options.args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param options.amount - The amount of the asset to send to a payable contract method.\n     * @param options.assetId - The ID of the asset to send to a payable contract method.\n     *   The asset must be a denomination of the native asset. (Ex. \"wei\", \"gwei\", or \"eth\").\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     */\n    async invokeContract(options) {\n        return (await this.getDefaultAddress()).invokeContract(options);\n    }\n    /**\n     * Deploys an ERC20 token contract.\n     *\n     * @param options - The options for creating the ERC20 token.\n     * @param options.name - The name of the ERC20 token.\n     * @param options.symbol - The symbol of the ERC20 token.\n     * @param options.totalSupply - The total supply of the ERC20 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployToken(options) {\n        return (await this.getDefaultAddress()).deployToken(options);\n    }\n    /**\n     * Deploys an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployNFT(options) {\n        return (await this.getDefaultAddress()).deployNFT(options);\n    }\n    /**\n     * Deploys an ERC1155 token contract.\n     *\n     * @param options - The options for creating the ERC1155 token.\n     * @param options.name - The name of the ERC1155 token.\n     * @param options.symbol - The symbol of the ERC1155 token.\n     * @param options.baseURI - The base URI of the ERC1155 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployMultiToken(options) {\n        return (await this.getDefaultAddress()).deployMultiToken(options);\n    }\n    /**\n     * Deploys a custom contract.\n     *\n     * @param options - The options for creating the custom contract.\n     * @param options.solidityVersion - The version of the solidity compiler, must be 0.8.+, such as \"0.8.28+commit.7893614a\". See https://binaries.soliditylang.org/bin/list.json\n     * @param options.solidityInputJson - The input json for the solidity compiler. See https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description for more details.\n     * @param options.contractName - The name of the contract class to be deployed.\n     * @param options.constructorArgs - The arguments for the constructor.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployContract(options) {\n        return (await this.getDefaultAddress()).deployContract(options);\n    }\n    /**\n     * Fund the wallet from your account on the Coinbase Platform.\n     *\n     * @param options - The options to create the fund operation\n     * @param options.amount - The amount of the Asset to fund the wallet with\n     * @param options.assetId - The ID of the Asset to fund with. For Ether, eth, gwei, and wei are supported.\n     * @returns The created fund operation object\n     * @throws {Error} If the default address does not exist\n     */\n    async fund(options) {\n        const defaultAddress = await this.getDefaultAddress();\n        if (!defaultAddress) {\n            throw new Error(\"Default address does not exist\");\n        }\n        return defaultAddress.fund(options);\n    }\n    /**\n     * Get a quote for funding the wallet from your Coinbase platform account.\n     *\n     * @param options - The options to create the fund quote\n     * @param options.amount - The amount to fund\n     * @param options.assetId - The ID of the Asset to fund with. For Ether, eth, gwei, and wei are supported.\n     * @returns The fund quote object\n     * @throws {Error} If the default address does not exist\n     */\n    async quoteFund(options) {\n        const defaultAddress = await this.getDefaultAddress();\n        if (!defaultAddress) {\n            throw new Error(\"Default address does not exist\");\n        }\n        return defaultAddress.quoteFund(options);\n    }\n    /**\n     * Returns all the fund operations associated with the wallet's default address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of fund operations to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of fund operations. Don't include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     * @returns The paginated list response of fund operations.\n     * @throws {Error} If the default address does not exist\n     */\n    async listFundOperations({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const defaultAddress = await this.getDefaultAddress();\n        if (!defaultAddress) {\n            throw new Error(\"Default address does not exist\");\n        }\n        return defaultAddress.listFundOperations({ limit, page });\n    }\n    /**\n     * Returns a String representation of the Wallet.\n     *\n     * @returns a String representation of the Wallet\n     */\n    toString() {\n        return `Wallet{id: '${this.model.id}', networkId: '${this.model.network_id}'}`;\n    }\n    /**\n     * Validates the seed and address models passed to the constructor.\n     *\n     * @param seed - The seed to use for the Wallet\n     */\n    validateSeed(seed) {\n        if (seed && seed.length !== 64 && seed.length !== 128) {\n            throw new errors_1.ArgumentError(\"Seed must be 32 or 64 bytes\");\n        }\n    }\n    /**\n     * Loads the seed data from the given file.\n     *\n     * @param filePath - The path of the file to load the seed data from\n     * @returns The seed data\n     */\n    getExistingSeeds(filePath) {\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            if (!data) {\n                return {};\n            }\n            const seedData = JSON.parse(data);\n            if (!Object.entries(seedData).every(([key, value]) => typeof key === \"string\" &&\n                /* eslint-disable @typescript-eslint/no-explicit-any */\n                typeof value.authTag === \"string\" &&\n                typeof value.encrypted === \"boolean\" &&\n                typeof value.iv === \"string\" &&\n                typeof value.seed === \"string\")) {\n                throw new errors_1.ArgumentError(\"Malformed backup data\");\n            }\n            return seedData;\n        }\n        catch (error) {\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            if (error.code === \"ENOENT\") {\n                return {};\n            }\n            throw new errors_1.ArgumentError(\"Malformed backup data\");\n        }\n    }\n    /**\n     * Gets the key for encrypting seed data.\n     *\n     * For EC keys (PEM format), it uses crypto.diffieHellman.\n     * For Ed25519 keys (assumed to be a base64-encoded 64-byte string), it converts the secret key\n     * to an X25519 key using ed2curve.\n     *\n     * @returns The encryption key.\n     */\n    getEncryptionKey() {\n        const apiKeyPrivateKey = coinbase_1.Coinbase.apiKeyPrivateKey;\n        if (apiKeyPrivateKey.startsWith(\"-----BEGIN\")) {\n            // Assume EC key in PEM format.\n            const privateKey = crypto.createPrivateKey(apiKeyPrivateKey);\n            const publicKey = crypto.createPublicKey(apiKeyPrivateKey);\n            return crypto.diffieHellman({ privateKey, publicKey });\n        }\n        else {\n            // Assume Ed25519 key: a base64-encoded 64-byte string (first 32 bytes = seed, next 32 = public key)\n            const decoded = Buffer.from(apiKeyPrivateKey, \"base64\");\n            if (decoded.length !== 64) {\n                throw new Error(\"Invalid Ed25519 key format\");\n            }\n            const seed = decoded.slice(0, 32);\n            // Convert the Ed25519 seed to an X25519 key using ed2curve.\n            const x25519 = ed2curve.convertSecretKey(new Uint8Array(seed));\n            if (!x25519) {\n                throw new Error(\"Failed to convert Ed25519 key to X25519\");\n            }\n            return Buffer.from(x25519);\n        }\n    }\n    /**\n     * Returns a WalletAddress object for the given AddressModel.\n     *\n     * @param addressModel - The AddressModel to build the WalletAddress from.\n     * @param index - The index of the AddressModel.\n     * @returns The WalletAddress object.\n     */\n    buildWalletAddress(addressModel, index) {\n        if (!this.master) {\n            return new wallet_address_1.WalletAddress(addressModel);\n        }\n        const key = this.deriveKey(index);\n        const ethWallet = new ethers_2.ethers.Wallet((0, utils_1.convertStringToHex)(key.privateKey));\n        if (ethWallet.address != addressModel.address_id) {\n            throw new Error(`Seed does not match wallet`);\n        }\n        return new wallet_address_1.WalletAddress(addressModel, ethWallet);\n    }\n    /**\n     * Waits until the ServerSigner has created a seed for the Wallet.\n     *\n     * @param walletId - The ID of the Wallet that is awaiting seed creation.\n     * @param intervalSeconds - The interval at which to poll the CDPService, in seconds.\n     * @param timeoutSeconds - The maximum amount of time to wait for the ServerSigner to create a seed, in seconds.\n     * @throws {APIError} if the API request to get a Wallet fails.\n     * @throws {Error} if the ServerSigner times out.\n     */\n    async waitForSigner(walletId, intervalSeconds = 0.2, timeoutSeconds = 20) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            const response = await coinbase_1.Coinbase.apiClients.wallet.getWallet(walletId);\n            if (response?.data.server_signer_status === types_1.ServerSignerStatus.ACTIVE) {\n                return;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Wallet creation timed out. Check status of your Server-Signer\");\n    }\n    /**\n     * Sets the master node for the given seed, if valid. If the seed is undefined it will set the master node using a random seed.\n     *\n     * @param seed - The seed to use for the Wallet.\n     * @returns The master node for the given seed.\n     */\n    setMasterNode(seed) {\n        if (seed === \"\") {\n            return undefined;\n        }\n        if (seed === undefined) {\n            seed = ethers_2.ethers.Wallet.createRandom().privateKey.slice(2);\n        }\n        this.validateSeed(seed);\n        this.seed = seed;\n        this.master = bip32_1.HDKey.fromMasterSeed(Buffer.from(seed, \"hex\"));\n    }\n    /**\n     * Derives a key for an already registered Address in the Wallet.\n     *\n     * @param index - The index of the Address to derive.\n     * @throws {Error} - If the key derivation fails.\n     * @returns The derived key.\n     */\n    deriveKey(index) {\n        if (!this.master) {\n            throw new Error(\"Cannot derive key for Wallet without seed loaded\");\n        }\n        const derivedKey = this.master?.derive(this.addressPathPrefix + `/${index}`);\n        if (!derivedKey?.privateKey) {\n            throw new Error(\"Failed to derive key\");\n        }\n        return derivedKey;\n    }\n    /**\n     * Creates an attestation for the Address currently being created.\n     *\n     * @param key - The key of the Wallet.\n     * @returns The attestation.\n     */\n    createAttestation(key) {\n        if (!key.publicKey || !key.privateKey) {\n            /* istanbul ignore next */\n            throw Error;\n        }\n        const publicKey = (0, utils_1.convertStringToHex)(key.publicKey);\n        const payload = JSON.stringify({\n            wallet_id: this.model.id,\n            public_key: publicKey,\n        });\n        const hashedPayload = crypto.createHash(\"sha256\").update(payload).digest();\n        const signature = secp256k1.ecdsaSign(hashedPayload, key.privateKey);\n        const r = signature.signature.slice(0, 32);\n        const s = signature.signature.slice(32, 64);\n        const v = signature.recid + 27 + 4;\n        const newSignatureBuffer = Buffer.concat([Buffer.from([v]), r, s]);\n        const newSignatureHex = newSignatureBuffer.toString(\"hex\");\n        return newSignatureHex;\n    }\n    /**\n     * Reloads the Wallet model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Wallet fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.wallet.getWallet(this.model.id);\n        this.model = result?.data;\n    }\n}\nexports.Wallet = Wallet;\nWallet.MAX_ADDRESSES = 20;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Webhook = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Webhook,\n * which provides methods to create, list, update, and delete webhooks that are used to receive notifications of specific events.\n */\nclass Webhook {\n    /**\n     * Initializes a new Webhook object.\n     *\n     * @param model - The underlying Webhook object.\n     * @throws {Error} If the model is not provided.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Webhook model cannot be empty\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns a new Webhook object. Do not use this method directly. Instead, Webhook.create(...)\n     *\n     * @constructs Webhook\n     * @param model - The underlying Webhook model object\n     * @returns A Webhook object.\n     */\n    static init(model) {\n        return new Webhook(model);\n    }\n    /**\n     * Creates a new webhook for a specified network.\n     *\n     * @param options - The options to create webhook.\n     * @param options.networkId - The network ID for which the webhook is created.\n     * @param options.notificationUri - The URI where notifications should be sent.\n     * @param options.eventType - The type of event for the webhook.\n     * @param options.eventTypeFilter - Filter for wallet or smart contract activity event types.\n     * @param options.eventFilters - Filters applied to the events that determine which specific events trigger the webhook.\n     * @returns A promise that resolves to a new instance of Webhook.\n     */\n    static async create({ networkId, notificationUri, eventType, eventTypeFilter, eventFilters = [], }) {\n        const result = await coinbase_1.Coinbase.apiClients.webhook.createWebhook({\n            network_id: networkId,\n            notification_uri: notificationUri,\n            event_type: eventType,\n            event_type_filter: eventTypeFilter,\n            event_filters: eventFilters,\n        });\n        return new Webhook(result.data);\n    }\n    /**\n     * Lists the Webhooks belonging to the CDP Project.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Webhooks to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Webhooks. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Webhooks.\n     */\n    static async list({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.webhook.listWebhooks(limit, page);\n        const webhooks = response.data.data;\n        for (const w of webhooks) {\n            data.push(new Webhook(w));\n        }\n        const hasMore = response.data.has_more ? response.data.has_more : false;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns the ID of the webhook.\n     *\n     * @returns The ID of the webhook, or undefined if the model is null.\n     */\n    getId() {\n        return this.model?.id;\n    }\n    /**\n     * Returns the network ID associated with the webhook.\n     *\n     * @returns The network ID of the webhook, or undefined if the model is null.\n     */\n    getNetworkId() {\n        return this.model?.network_id;\n    }\n    /**\n     * Returns the notification URI of the webhook.\n     *\n     * @returns The URI where notifications are sent, or undefined if the model is null.\n     */\n    getNotificationURI() {\n        return this.model?.notification_uri;\n    }\n    /**\n     * Returns the event type of the webhook.\n     *\n     * @returns The type of event the webhook listens for, or undefined if the model is null.\n     */\n    getEventType() {\n        return this.model?.event_type;\n    }\n    /**\n     * Returns the event type filter of the webhook.\n     *\n     * @returns The filter which will be used to filter for events of a certain event type\n     */\n    getEventTypeFilter() {\n        return this.model?.event_type_filter;\n    }\n    /**\n     * Returns the event filters applied to the webhook.\n     *\n     * @returns An array of event filters used by the webhook, or undefined if the model is null.\n     */\n    getEventFilters() {\n        return this.model?.event_filters;\n    }\n    /**\n     * Returns the signature header of the webhook.\n     *\n     * @returns The signature header which will be set on the callback requests, or undefined if the model is null.\n     */\n    getSignatureHeader() {\n        return this.model?.signature_header;\n    }\n    /**\n     * Updates the webhook with a new notification URI, and optionally a new list of addresses to monitor.\n     *\n     * @param options - The options to update webhook.\n     * @param options.notificationUri - The new URI for webhook notifications.\n     * @param options.eventTypeFilter - The new eventTypeFilter that contains a new list (replacement) of addresses to monitor for the webhook.\n     * @returns A promise that resolves to the updated Webhook object.\n     */\n    async update({ notificationUri, eventTypeFilter, }) {\n        const finalNotificationUri = notificationUri ?? this.getNotificationURI();\n        const finalEventTypeFilter = eventTypeFilter ?? this.getEventTypeFilter();\n        // wallet ID is required for wallet activity event type filter, but we do not support updating it just yet, this will be added in the future\n        if (this.getEventType() === api_1.WebhookEventType.WalletActivity) {\n            finalEventTypeFilter.wallet_id = (this.getEventTypeFilter()?.wallet_id);\n        }\n        const result = await coinbase_1.Coinbase.apiClients.webhook.updateWebhook(this.getId(), {\n            notification_uri: finalNotificationUri,\n            event_filters: this.getEventFilters(),\n            event_type_filter: finalEventTypeFilter,\n        });\n        this.model = result.data;\n        return this;\n    }\n    /**\n     * Deletes the webhook.\n     *\n     * @returns A promise that resolves when the webhook is deleted and its attributes are set to null.\n     */\n    async delete() {\n        await coinbase_1.Coinbase.apiClients.webhook.deleteWebhook(this.getId());\n        this.model = null;\n    }\n    /**\n     * Returns a String representation of the Webhook.\n     *\n     * @returns A String representation of the Webhook.\n     */\n    toString() {\n        return (`Webhook { id: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `eventType: '${this.getEventType()}', eventFilter: ${JSON.stringify(this.getEventFilters())}, ` +\n            `eventTypeFilter: ${JSON.stringify(this.getEventTypeFilter())}, ` +\n            `notificationUri: '${this.getNotificationURI()}', signatureHeader: '${this.getSignatureHeader()}' }`);\n    }\n}\nexports.Webhook = Webhook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./coinbase/address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/address/external_address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/address/wallet_address */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/api_error */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/asset */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/authenticator */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/balance_map */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/coinbase */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/constants */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/contract_event */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/contract_invocation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/faucet_transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/hash */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/historical_balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/payload_signature */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/server_signer */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/smart_contract */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_balance */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_reward */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/trade */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/transaction */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/transfer */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/validator */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/wallet */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/webhook */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/read_contract */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/crypto_amount */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/crypto_amount.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/fiat_amount */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fiat_amount.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/fund_operation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_operation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/fund_quote */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/fund_quote.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/chain */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallets/types */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallets/createSmartWallet */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/createSmartWallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallets/toSmartWallet */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/toSmartWallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./actions/sendUserOperation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/sendUserOperation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./actions/waitForUserOperation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/waitForUserOperation.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLGtJQUFxQztBQUMxRCxhQUFhLG1CQUFPLENBQUMsOEhBQW1DO0FBQ3hELGFBQWEsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsNEdBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLHdHQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsa0dBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDhHQUEyQjtBQUNoRCxhQUFhLG1CQUFPLENBQUMsd0hBQWdDO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyw4RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLHNIQUErQjtBQUNwRCxhQUFhLG1CQUFPLENBQUMsMEZBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyxzSEFBK0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLG9IQUE4QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsNEdBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyw4R0FBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLGdIQUE0QjtBQUNqRCxhQUFhLG1CQUFPLENBQUMsb0hBQThCO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyw4R0FBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsd0dBQXdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxrR0FBcUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsb0dBQXNCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQyw4RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLGdHQUFvQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMsNEdBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyw0R0FBMEI7QUFDL0MsYUFBYSxtQkFBTyxDQUFDLHdHQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsOEdBQTJCO0FBQ2hELGFBQWEsbUJBQU8sQ0FBQyxzR0FBdUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHNGQUFlO0FBQ3BDLGFBQWEsbUJBQU8sQ0FBQywwRkFBaUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLGtIQUE2QjtBQUNsRCxhQUFhLG1CQUFPLENBQUMsMEdBQXlCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyxrSEFBNkI7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLHdIQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvaW5kZXguanM/NDBlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2FkZHJlc3NcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2FkZHJlc3MvZXh0ZXJuYWxfYWRkcmVzc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYWRkcmVzcy93YWxsZXRfYWRkcmVzc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYXBpX2Vycm9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9hc3NldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYXV0aGVudGljYXRvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYmFsYW5jZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYmFsYW5jZV9tYXBcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2NvaW5iYXNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2NvbnRyYWN0X2V2ZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9jb250cmFjdF9pbnZvY2F0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9lcnJvcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2ZhdWNldF90cmFuc2FjdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvaGFzaFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvaGlzdG9yaWNhbF9iYWxhbmNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9wYXlsb2FkX3NpZ25hdHVyZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvc2VydmVyX3NpZ25lclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvc21hcnRfY29udHJhY3RcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3N0YWtpbmdfYmFsYW5jZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvc3Rha2luZ19vcGVyYXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3N0YWtpbmdfcmV3YXJkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS90cmFkZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvdHJhbnNhY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3RyYW5zZmVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvdmFsaWRhdG9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS93YWxsZXRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3dlYmhvb2tcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3JlYWRfY29udHJhY3RcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2NyeXB0b19hbW91bnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2ZpYXRfYW1vdW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9mdW5kX29wZXJhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvZnVuZF9xdW90ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMvY2hhaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldHMvdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldHMvY3JlYXRlU21hcnRXYWxsZXRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldHMvdG9TbWFydFdhbGxldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWN0aW9ucy9zZW5kVXNlck9wZXJhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWN0aW9ucy93YWl0Rm9yVXNlck9wZXJhdGlvblwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CHAIN_ID_TO_NETWORK_ID = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\n/**\n * Maps chain IDs to their corresponding Coinbase network IDs. Only SmartWallet related chains are listed here right now.\n */\nexports.CHAIN_ID_TO_NETWORK_ID = {\n    8453: api_1.NetworkIdentifier.BaseMainnet,\n    84532: api_1.NetworkIdentifier.BaseSepolia,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3R5cGVzL2NoYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixjQUFjLG1CQUFPLENBQUMscUZBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvdHlwZXMvY2hhaW4uanM/NGFmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ0hBSU5fSURfVE9fTkVUV09SS19JRCA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIi4uL2NsaWVudC9hcGlcIik7XG4vKipcbiAqIE1hcHMgY2hhaW4gSURzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgQ29pbmJhc2UgbmV0d29yayBJRHMuIE9ubHkgU21hcnRXYWxsZXQgcmVsYXRlZCBjaGFpbnMgYXJlIGxpc3RlZCBoZXJlIHJpZ2h0IG5vdy5cbiAqL1xuZXhwb3J0cy5DSEFJTl9JRF9UT19ORVRXT1JLX0lEID0ge1xuICAgIDg0NTM6IGFwaV8xLk5ldHdvcmtJZGVudGlmaWVyLkJhc2VNYWlubmV0LFxuICAgIDg0NTMyOiBhcGlfMS5OZXR3b3JrSWRlbnRpZmllci5CYXNlU2Vwb2xpYSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/chain.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/utils/chain.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createNetwork = void 0;\nconst chain_1 = __webpack_require__(/*! ../types/chain */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/types/chain.js\");\n/**\n * Creates a network configuration for a given chain ID\n * @param chainId - The chain ID to create a network configuration for\n * @returns The network configuration\n */\nfunction createNetwork(chainId) {\n    return {\n        chainId,\n        networkId: chain_1.CHAIN_ID_TO_NETWORK_ID[chainId],\n    };\n}\nexports.createNetwork = createNetwork;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3V0aWxzL2NoYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixnQkFBZ0IsbUJBQU8sQ0FBQyx1RkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZpdmFsLWZ1bi8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvdXRpbHMvY2hhaW4uanM/YWE4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTmV0d29yayA9IHZvaWQgMDtcbmNvbnN0IGNoYWluXzEgPSByZXF1aXJlKFwiLi4vdHlwZXMvY2hhaW5cIik7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXR3b3JrIGNvbmZpZ3VyYXRpb24gZm9yIGEgZ2l2ZW4gY2hhaW4gSURcbiAqIEBwYXJhbSBjaGFpbklkIC0gVGhlIGNoYWluIElEIHRvIGNyZWF0ZSBhIG5ldHdvcmsgY29uZmlndXJhdGlvbiBmb3JcbiAqIEByZXR1cm5zIFRoZSBuZXR3b3JrIGNvbmZpZ3VyYXRpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTmV0d29yayhjaGFpbklkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgbmV0d29ya0lkOiBjaGFpbl8xLkNIQUlOX0lEX1RPX05FVFdPUktfSURbY2hhaW5JZF0sXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlTmV0d29yayA9IGNyZWF0ZU5ldHdvcms7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/wait.js":
/*!****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/utils/wait.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wait = void 0;\nconst errors_1 = __webpack_require__(/*! ../coinbase/errors */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * Polls a resource until a terminal condition is met or timeout occurs.\n *\n * @param reload - Function that fetches the latest state of the resource\n * @param isTerminal - Function that determines if the current state is terminal\n * @param transform - Function that transforms the resource into a new type\n * @param options - Configuration options for polling behavior\n * @returns The resource in its terminal state\n * @throws {TimeoutError} If the operation exceeds the timeout duration\n *\n * @example\n * const result = await wait(\n *   () => fetchOrderStatus(orderId),\n *   (status) => status === 'completed',\n *   (status) => status === 'completed' ? { status } : undefined,\n *   { timeoutSeconds: 30 }\n * );\n */\nasync function wait(reload, isTerminal, transform = (obj) => obj, options = {}) {\n    const { intervalSeconds = 0.2, timeoutSeconds = 10 } = options;\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeoutSeconds * 1000) {\n        const updatedObject = await reload();\n        if (isTerminal(updatedObject)) {\n            return transform(updatedObject);\n        }\n        await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));\n    }\n    throw new errors_1.TimeoutError(`Operation has not reached a terminal state after ${timeoutSeconds} seconds and may still succeed. Retry with a longer timeout using the timeoutSeconds option.`);\n}\nexports.wait = wait;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3V0aWxzL3dhaXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLGlCQUFpQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRCxPQUFPO0FBQ1A7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RSxZQUFZLDZDQUE2QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLGdCQUFnQjtBQUN4RztBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3V0aWxzL3dhaXQuanM/NjlmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2FpdCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2NvaW5iYXNlL2Vycm9yc1wiKTtcbi8qKlxuICogUG9sbHMgYSByZXNvdXJjZSB1bnRpbCBhIHRlcm1pbmFsIGNvbmRpdGlvbiBpcyBtZXQgb3IgdGltZW91dCBvY2N1cnMuXG4gKlxuICogQHBhcmFtIHJlbG9hZCAtIEZ1bmN0aW9uIHRoYXQgZmV0Y2hlcyB0aGUgbGF0ZXN0IHN0YXRlIG9mIHRoZSByZXNvdXJjZVxuICogQHBhcmFtIGlzVGVybWluYWwgLSBGdW5jdGlvbiB0aGF0IGRldGVybWluZXMgaWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdGVybWluYWxcbiAqIEBwYXJhbSB0cmFuc2Zvcm0gLSBGdW5jdGlvbiB0aGF0IHRyYW5zZm9ybXMgdGhlIHJlc291cmNlIGludG8gYSBuZXcgdHlwZVxuICogQHBhcmFtIG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHBvbGxpbmcgYmVoYXZpb3JcbiAqIEByZXR1cm5zIFRoZSByZXNvdXJjZSBpbiBpdHMgdGVybWluYWwgc3RhdGVcbiAqIEB0aHJvd3Mge1RpbWVvdXRFcnJvcn0gSWYgdGhlIG9wZXJhdGlvbiBleGNlZWRzIHRoZSB0aW1lb3V0IGR1cmF0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdhaXQoXG4gKiAgICgpID0+IGZldGNoT3JkZXJTdGF0dXMob3JkZXJJZCksXG4gKiAgIChzdGF0dXMpID0+IHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcsXG4gKiAgIChzdGF0dXMpID0+IHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgPyB7IHN0YXR1cyB9IDogdW5kZWZpbmVkLFxuICogICB7IHRpbWVvdXRTZWNvbmRzOiAzMCB9XG4gKiApO1xuICovXG5hc3luYyBmdW5jdGlvbiB3YWl0KHJlbG9hZCwgaXNUZXJtaW5hbCwgdHJhbnNmb3JtID0gKG9iaikgPT4gb2JqLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGludGVydmFsU2Vjb25kcyA9IDAuMiwgdGltZW91dFNlY29uZHMgPSAxMCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgdGltZW91dFNlY29uZHMgKiAxMDAwKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRPYmplY3QgPSBhd2FpdCByZWxvYWQoKTtcbiAgICAgICAgaWYgKGlzVGVybWluYWwodXBkYXRlZE9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0odXBkYXRlZE9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGludGVydmFsU2Vjb25kcyAqIDEwMDApKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9yc18xLlRpbWVvdXRFcnJvcihgT3BlcmF0aW9uIGhhcyBub3QgcmVhY2hlZCBhIHRlcm1pbmFsIHN0YXRlIGFmdGVyICR7dGltZW91dFNlY29uZHN9IHNlY29uZHMgYW5kIG1heSBzdGlsbCBzdWNjZWVkLiBSZXRyeSB3aXRoIGEgbG9uZ2VyIHRpbWVvdXQgdXNpbmcgdGhlIHRpbWVvdXRTZWNvbmRzIG9wdGlvbi5gKTtcbn1cbmV4cG9ydHMud2FpdCA9IHdhaXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/wait.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/createSmartWallet.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/wallets/createSmartWallet.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createSmartWallet = void 0;\nconst index_1 = __webpack_require__(/*! ../index */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\");\nconst toSmartWallet_1 = __webpack_require__(/*! ./toSmartWallet */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/toSmartWallet.js\");\n/**\n * @description Creates a new smart wallet using the Coinbase API\n *\n * @param - {@link CreateSmartWalletOptions} options - Configuration options for creating the smart wallet\n * @returns {Promise<SmartWallet>} A promise that resolves to the newly created smart wallet instance\n * @throws {Error} If the Coinbase API client is not initialized\n *\n * See https://viem.sh/docs/accounts/local/privateKeyToAccount for using a Viem LocalAccount with SmartWallet\n *\n * @example\n * ```ts\n * import { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\n * import { createSmartWallet } from \"@coinbase/coinbase-sdk\";\n * import { Coinbase } from \"@coinbase/coinbase-sdk\";\n *\n * Coinbase.configureFromJson({filePath: \"~/.apikeys/prod.json\"});\n *\n * const privateKey = generatePrivateKey();\n * const owner = privateKeyToAccount(privateKey);\n * const wallet = await createSmartWallet({\n *   signer: owner\n * });\n * ```\n *\n */\nasync function createSmartWallet(options) {\n    const result = await index_1.Coinbase.apiClients.smartWallet.createSmartWallet({\n        owner: options.signer.address,\n    });\n    return (0, toSmartWallet_1.toSmartWallet)({\n        smartWalletAddress: result.data.address,\n        signer: options.signer,\n    });\n}\nexports.createSmartWallet = createSmartWallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3dhbGxldHMvY3JlYXRlU21hcnRXYWxsZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLGtHQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdDQUFnQztBQUM3QyxhQUFhLHNCQUFzQjtBQUNuQyxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMENBQTBDO0FBQ3RELFlBQVksb0JBQW9CO0FBQ2hDLFlBQVksV0FBVztBQUN2QjtBQUNBLCtCQUErQixpQ0FBaUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC93YWxsZXRzL2NyZWF0ZVNtYXJ0V2FsbGV0LmpzP2Y2NzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVNtYXJ0V2FsbGV0ID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbmNvbnN0IHRvU21hcnRXYWxsZXRfMSA9IHJlcXVpcmUoXCIuL3RvU21hcnRXYWxsZXRcIik7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIGEgbmV3IHNtYXJ0IHdhbGxldCB1c2luZyB0aGUgQ29pbmJhc2UgQVBJXG4gKlxuICogQHBhcmFtIC0ge0BsaW5rIENyZWF0ZVNtYXJ0V2FsbGV0T3B0aW9uc30gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIHNtYXJ0IHdhbGxldFxuICogQHJldHVybnMge1Byb21pc2U8U21hcnRXYWxsZXQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgbmV3bHkgY3JlYXRlZCBzbWFydCB3YWxsZXQgaW5zdGFuY2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgQ29pbmJhc2UgQVBJIGNsaWVudCBpcyBub3QgaW5pdGlhbGl6ZWRcbiAqXG4gKiBTZWUgaHR0cHM6Ly92aWVtLnNoL2RvY3MvYWNjb3VudHMvbG9jYWwvcHJpdmF0ZUtleVRvQWNjb3VudCBmb3IgdXNpbmcgYSBWaWVtIExvY2FsQWNjb3VudCB3aXRoIFNtYXJ0V2FsbGV0XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBnZW5lcmF0ZVByaXZhdGVLZXksIHByaXZhdGVLZXlUb0FjY291bnQgfSBmcm9tIFwidmllbS9hY2NvdW50c1wiO1xuICogaW1wb3J0IHsgY3JlYXRlU21hcnRXYWxsZXQgfSBmcm9tIFwiQGNvaW5iYXNlL2NvaW5iYXNlLXNka1wiO1xuICogaW1wb3J0IHsgQ29pbmJhc2UgfSBmcm9tIFwiQGNvaW5iYXNlL2NvaW5iYXNlLXNka1wiO1xuICpcbiAqIENvaW5iYXNlLmNvbmZpZ3VyZUZyb21Kc29uKHtmaWxlUGF0aDogXCJ+Ly5hcGlrZXlzL3Byb2QuanNvblwifSk7XG4gKlxuICogY29uc3QgcHJpdmF0ZUtleSA9IGdlbmVyYXRlUHJpdmF0ZUtleSgpO1xuICogY29uc3Qgb3duZXIgPSBwcml2YXRlS2V5VG9BY2NvdW50KHByaXZhdGVLZXkpO1xuICogY29uc3Qgd2FsbGV0ID0gYXdhaXQgY3JlYXRlU21hcnRXYWxsZXQoe1xuICogICBzaWduZXI6IG93bmVyXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlU21hcnRXYWxsZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGluZGV4XzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zbWFydFdhbGxldC5jcmVhdGVTbWFydFdhbGxldCh7XG4gICAgICAgIG93bmVyOiBvcHRpb25zLnNpZ25lci5hZGRyZXNzLFxuICAgIH0pO1xuICAgIHJldHVybiAoMCwgdG9TbWFydFdhbGxldF8xLnRvU21hcnRXYWxsZXQpKHtcbiAgICAgICAgc21hcnRXYWxsZXRBZGRyZXNzOiByZXN1bHQuZGF0YS5hZGRyZXNzLFxuICAgICAgICBzaWduZXI6IG9wdGlvbnMuc2lnbmVyLFxuICAgIH0pO1xufVxuZXhwb3J0cy5jcmVhdGVTbWFydFdhbGxldCA9IGNyZWF0ZVNtYXJ0V2FsbGV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/createSmartWallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/toSmartWallet.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/wallets/toSmartWallet.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toSmartWallet = void 0;\nconst sendUserOperation_1 = __webpack_require__(/*! ../actions/sendUserOperation */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/actions/sendUserOperation.js\");\nconst chain_1 = __webpack_require__(/*! ../utils/chain */ \"(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/utils/chain.js\");\n/**\n * Creates a SmartWallet instance from an existing smart wallet address and signer.\n * Use this to interact with previously deployed smart wallets, rather than creating new ones.\n *\n * The signer must be the original owner of the smart wallet.\n *\n * @example\n * ```typescript\n * import { toSmartWallet } from \"@coinbase/coinbase-sdk\";\n *\n * // Connect to an existing smart wallet\n * const wallet = toSmartWallet({\n *   smartWalletAddress: \"0x1234567890123456789012345678901234567890\",\n *   signer: localAccount\n * });\n *\n * // Use on a specific network\n * const networkWallet = wallet.useNetwork({\n *   chainId: 8453, // Base Mainnet\n *   paymasterUrl: \"https://paymaster.example.com\"\n * });\n * ```\n *\n * @param {ToSmartWalletOptions} options - Configuration options\n * @param {string} options.smartWalletAddress - The deployed smart wallet's address\n * @param {Signer} options.signer - The owner's signer instance\n * @returns {SmartWallet} A configured SmartWallet instance ready for transaction submission\n * @throws {Error} If the signer is not an original owner of the wallet\n */\nfunction toSmartWallet(options) {\n    const wallet = {\n        address: options.smartWalletAddress,\n        owners: [options.signer],\n        type: \"smart\",\n        sendUserOperation: options => (0, sendUserOperation_1.sendUserOperation)(wallet, options),\n        useNetwork: (options) => {\n            const network = (0, chain_1.createNetwork)(options.chainId);\n            return {\n                ...wallet,\n                network,\n                paymasterUrl: options.paymasterUrl,\n                sendUserOperation: options => (0, sendUserOperation_1.sendUserOperation)(wallet, {\n                    ...options,\n                    chainId: network.chainId,\n                }),\n            };\n        },\n    };\n    return wallet;\n}\nexports.toSmartWallet = toSmartWallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3dhbGxldHMvdG9TbWFydFdhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsNEJBQTRCLG1CQUFPLENBQUMsbUhBQThCO0FBQ2xFLGdCQUFnQixtQkFBTyxDQUFDLHVGQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsYUFBYTtBQUMxQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vydml2YWwtZnVuLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC93YWxsZXRzL3RvU21hcnRXYWxsZXQuanM/YTFiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9TbWFydFdhbGxldCA9IHZvaWQgMDtcbmNvbnN0IHNlbmRVc2VyT3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9ucy9zZW5kVXNlck9wZXJhdGlvblwiKTtcbmNvbnN0IGNoYWluXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY2hhaW5cIik7XG4vKipcbiAqIENyZWF0ZXMgYSBTbWFydFdhbGxldCBpbnN0YW5jZSBmcm9tIGFuIGV4aXN0aW5nIHNtYXJ0IHdhbGxldCBhZGRyZXNzIGFuZCBzaWduZXIuXG4gKiBVc2UgdGhpcyB0byBpbnRlcmFjdCB3aXRoIHByZXZpb3VzbHkgZGVwbG95ZWQgc21hcnQgd2FsbGV0cywgcmF0aGVyIHRoYW4gY3JlYXRpbmcgbmV3IG9uZXMuXG4gKlxuICogVGhlIHNpZ25lciBtdXN0IGJlIHRoZSBvcmlnaW5hbCBvd25lciBvZiB0aGUgc21hcnQgd2FsbGV0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyB0b1NtYXJ0V2FsbGV0IH0gZnJvbSBcIkBjb2luYmFzZS9jb2luYmFzZS1zZGtcIjtcbiAqXG4gKiAvLyBDb25uZWN0IHRvIGFuIGV4aXN0aW5nIHNtYXJ0IHdhbGxldFxuICogY29uc3Qgd2FsbGV0ID0gdG9TbWFydFdhbGxldCh7XG4gKiAgIHNtYXJ0V2FsbGV0QWRkcmVzczogXCIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgc2lnbmVyOiBsb2NhbEFjY291bnRcbiAqIH0pO1xuICpcbiAqIC8vIFVzZSBvbiBhIHNwZWNpZmljIG5ldHdvcmtcbiAqIGNvbnN0IG5ldHdvcmtXYWxsZXQgPSB3YWxsZXQudXNlTmV0d29yayh7XG4gKiAgIGNoYWluSWQ6IDg0NTMsIC8vIEJhc2UgTWFpbm5ldFxuICogICBwYXltYXN0ZXJVcmw6IFwiaHR0cHM6Ly9wYXltYXN0ZXIuZXhhbXBsZS5jb21cIlxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1RvU21hcnRXYWxsZXRPcHRpb25zfSBvcHRpb25zIC0gQ29uZmlndXJhdGlvbiBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zbWFydFdhbGxldEFkZHJlc3MgLSBUaGUgZGVwbG95ZWQgc21hcnQgd2FsbGV0J3MgYWRkcmVzc1xuICogQHBhcmFtIHtTaWduZXJ9IG9wdGlvbnMuc2lnbmVyIC0gVGhlIG93bmVyJ3Mgc2lnbmVyIGluc3RhbmNlXG4gKiBAcmV0dXJucyB7U21hcnRXYWxsZXR9IEEgY29uZmlndXJlZCBTbWFydFdhbGxldCBpbnN0YW5jZSByZWFkeSBmb3IgdHJhbnNhY3Rpb24gc3VibWlzc2lvblxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBzaWduZXIgaXMgbm90IGFuIG9yaWdpbmFsIG93bmVyIG9mIHRoZSB3YWxsZXRcbiAqL1xuZnVuY3Rpb24gdG9TbWFydFdhbGxldChvcHRpb25zKSB7XG4gICAgY29uc3Qgd2FsbGV0ID0ge1xuICAgICAgICBhZGRyZXNzOiBvcHRpb25zLnNtYXJ0V2FsbGV0QWRkcmVzcyxcbiAgICAgICAgb3duZXJzOiBbb3B0aW9ucy5zaWduZXJdLFxuICAgICAgICB0eXBlOiBcInNtYXJ0XCIsXG4gICAgICAgIHNlbmRVc2VyT3BlcmF0aW9uOiBvcHRpb25zID0+ICgwLCBzZW5kVXNlck9wZXJhdGlvbl8xLnNlbmRVc2VyT3BlcmF0aW9uKSh3YWxsZXQsIG9wdGlvbnMpLFxuICAgICAgICB1c2VOZXR3b3JrOiAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV0d29yayA9ICgwLCBjaGFpbl8xLmNyZWF0ZU5ldHdvcmspKG9wdGlvbnMuY2hhaW5JZCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLndhbGxldCxcbiAgICAgICAgICAgICAgICBuZXR3b3JrLFxuICAgICAgICAgICAgICAgIHBheW1hc3RlclVybDogb3B0aW9ucy5wYXltYXN0ZXJVcmwsXG4gICAgICAgICAgICAgICAgc2VuZFVzZXJPcGVyYXRpb246IG9wdGlvbnMgPT4gKDAsIHNlbmRVc2VyT3BlcmF0aW9uXzEuc2VuZFVzZXJPcGVyYXRpb24pKHdhbGxldCwge1xuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBuZXR3b3JrLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHdhbGxldDtcbn1cbmV4cG9ydHMudG9TbWFydFdhbGxldCA9IHRvU21hcnRXYWxsZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/toSmartWallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/wallets/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3dhbGxldHMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2aXZhbC1mdW4vLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L3dhbGxldHMvdHlwZXMuanM/NmMyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@coinbase/coinbase-sdk/dist/wallets/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/agentkit/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@coinbase/agentkit/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@coinbase/agentkit","description":"Coinbase AgentKit core primitives","repository":"https://github.com/coinbase/agentkit","version":"0.6.2","author":"Coinbase Inc.","license":"Apache-2.0","main":"dist/index.js","types":"dist/index.d.ts","files":["dist"],"keywords":["coinbase","sdk","crypto","cdp","agentkit","ai","agent","nodejs","typescript"],"dependencies":{"@across-protocol/app-sdk":"^0.2.0","@alloralabs/allora-sdk":"^0.1.0","@coinbase/coinbase-sdk":"^0.20.0","@jup-ag/api":"^6.0.39","@privy-io/public-api":"^2.18.5","@privy-io/server-auth":"^1.18.4","@solana/spl-token":"^0.4.12","@solana/web3.js":"^1.98.0","bs58":"^4.0.1","canonicalize":"^2.1.0","decimal.js":"^10.5.0","ethers":"^6.13.5","md5":"^2.3.0","opensea-js":"^7.1.18","reflect-metadata":"^0.2.2","twitter-api-v2":"^1.18.2","viem":"^2.22.16","zod":"^3.23.8"},"devDependencies":{"@types/jest":"^29.5.14","@types/nunjucks":"^3.2.6","@types/ora":"^3.2.0","@types/prompts":"^2.4.9","@types/secp256k1":"^4.0.6","abitype":"^1.0.8","http-server":"^14.1.1","jest":"^29.7.0","mock-fs":"^5.2.0","nunjucks":"^3.2.4","ora":"^7.0.1","picocolors":"^1.0.0","prompts":"^2.4.2","ts-jest":"^29.2.5","tsd":"^0.31.2","tsx":"^4.7.1","typescript":"^5.7.2","yargs":"^17.7.2"},"exports":{".":{"types":"./dist/index.d.ts","default":"./dist/index.js"}},"scripts":{"build":"tsc","lint":"eslint -c .eslintrc.json \\"src/**/*.ts\\"","lint:fix":"eslint -c .eslintrc.json \\"src/**/*.ts\\" --fix","format":"prettier -c .prettierrc --write \\"**/*.{ts,js,cjs,json,md}\\"","format:check":"prettier -c .prettierrc --check \\"**/*.{ts,js,cjs,json,md}\\"","check":"tsc --noEmit","test":"jest --no-cache --testMatch=\'**/*.test.ts\'","test:e2e":"jest --no-cache --testMatch=**/e2e.ts --coverageThreshold \'{}\'","test:types":"tsd --files src/tests/types.test-d.ts","clean":"rm -rf dist/*","docs":"typedoc --entryPoints ./src --entryPointStrategy expand --exclude ./src/tests/**/*.ts","docs:serve":"http-server ./docs","dev":"tsc --watch","generate:action-provider":"tsx ./scripts/generate-action-provider/main.ts"}}');

/***/ }),

/***/ "(rsc)/./node_modules/@coinbase/coinbase-sdk/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/package.json ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@coinbase/coinbase-sdk","author":"Coinbase Inc.","license":"ISC","description":"Coinbase Platform SDK","repository":"https://github.com/coinbase/coinbase-sdk-nodejs","version":"0.20.0","main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"eslint -c .eslintrc.json src/coinbase/**.ts","lint-fix":"eslint -c .eslintrc.json src/coinbase/*.ts --fix","format":"prettier -c .prettierrc --write \\"**/*.{ts,js,cjs,json,md}\\"","format-check":"prettier -c .prettierrc --check \\"**/*.{ts,js,cjs,json,md}\\"","check":"tsc --noEmit","test":"jest --config jest.config.js --testPathIgnorePatterns src/tests/e2e.ts src/tests/utils.ts src/tests/types.test-d.ts","test:dry-run":"npm install && npm ci && npm publish --dry-run","test:e2e":"npx jest --no-cache --testMatch=**/e2e.ts --coverageThreshold \'{}\'","test:e2e:stake":"npx jest --no-cache --testMatch=**/e2e.ts --coverageThreshold \'{}\' -t Stake","test:types":"tsd --files src/tests/types.test-d.ts","clean":"rm -rf dist/*","build":"tsc","prepack":"tsc --skipLibCheck","docs":"typedoc --entryPoints ./src --entryPointStrategy expand --exclude ./src/tests/**/*.ts"},"files":["dist"],"dependencies":{"@scure/bip32":"^1.4.0","abitype":"^1.0.6","axios":"^1.6.8","axios-mock-adapter":"^1.22.0","axios-retry":"^4.4.1","bip32":"^4.0.0","bip39":"^3.1.0","decimal.js":"^10.4.3","dotenv":"^16.4.5","ed2curve":"^0.3.0","ethers":"^6.12.1","jose":"^5.10.0","secp256k1":"^5.0.0","viem":"^2.21.26"},"devDependencies":{"@types/jest":"^29.5.12","@types/node":"^20.12.11","@types/secp256k1":"^4.0.6","@typescript-eslint/eslint-plugin":"^7.8.0","@typescript-eslint/parser":"^7.8.0","eslint":"^8.57.0","eslint-config-prettier":"^9.1.0","eslint-plugin-jsdoc":"^48.2.5","eslint-plugin-prettier":"^5.1.3","jest":"^29.7.0","mock-fs":"^5.2.0","prettier":"^3.2.5","ts-jest":"^29.1.2","ts-node":"^10.9.2","tsd":"^0.31.2","typedoc":"^0.25.13","typescript":"^5.4.5"}}');

/***/ })

};
;